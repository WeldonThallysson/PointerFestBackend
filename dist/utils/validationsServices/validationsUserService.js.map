{"version":3,"sources":["../../../src/utils/validationsServices/validationsUserService.ts","../../../src/utils/validators/validatorAge.ts","../../../src/utils/validators/validatorCNPJ.ts","../../../src/utils/validators/validatorCPF.ts","../../../src/utils/validators/validatorDate.ts","../../../src/utils/validators/validatorEmail.ts","../../../src/utils/validators/validatorFieldsEmpty.ts","../../../src/utils/validators/validatorPhone.ts"],"sourcesContent":["import { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { validatorAge } from \"../validators/validatorAge\";\r\nimport { validatorCNPJ } from \"../validators/validatorCNPJ\";\r\nimport { validatorCPF } from \"../validators/validatorCPF\";\r\nimport { validateBirthDate } from \"../validators/validatorDate\";\r\nimport { validatorEmail } from \"../validators/validatorEmail\";\r\nimport { validatorFieldsEmpty } from \"../validators/validatorFieldsEmpty\";\r\nimport { isValidPhoneNumber } from \"../validators/validatorPhone\";\r\n\r\ninterface IParamsUserService {\r\n  name: string; // nome do cliente ou administrador\r\n  companyName?: string | null\r\n  email: string; // email\r\n  password?: string; // senha\r\n  cpfCnpj: string; // cpf\r\n  phone: string; // numero de telefone\r\n  birthDate?: string | null; // Data de nascimento\r\n  residence?: string; // casa ou detalhe da morada\r\n  neighborhood?: string; // bairro\r\n  address?: string; // endereço\r\n  city?: string; // cidade\r\n  cep?: string,\r\n  region_code?: string,\r\n  number_address?: string,\r\n  typePerson?: TypePerson,\r\n  gender?: string; // é o genero ele pode mandar masculino, feminino ou prefiro não dizer\r\n}\r\n\r\nexport const validationsUserService = ({\r\n  name,\r\n  companyName,\r\n  email,\r\n  cpfCnpj,\r\n  phone,\r\n  birthDate,\r\n  gender,\r\n  typePerson,\r\n  password\r\n}: IParamsUserService) => {\r\n\r\n  const validatorEmpty = validatorFieldsEmpty(\r\n    name,\r\n    email,\r\n    cpfCnpj,\r\n    phone,\r\n    gender,\r\n    typePerson\r\n  );\r\n\r\n  if (validatorEmpty) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha todos os campos obrigatórios.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        fields: ['name','email','cpf','phone','typePerson','gender'],\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if (!validatorEmail(email)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, E-mail inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if(!isValidPhoneNumber(phone)){\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Número de telefone inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length < 8 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length > 14 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if(!companyName && typePerson === TypePerson.Juridic){\r\n     return {\r\n      data: {\r\n        message: \"Não foi possível prosseguir, por favor informe o Nome Fantasia sua Empresa\",\r\n        status: 400\r\n      }\r\n     }\r\n  }\r\n\r\n  if (typePerson !== TypePerson.Fisic && typePerson !== TypePerson.Juridic) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar esta ação, o tipo da pessoa deve ser Física ou Jurídica\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Fisic && !validatorCPF(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CPF inválido. Deve conter 11 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Juridic && !validatorCNPJ(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CNPJ inválido. Deve conter 14 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && birthDate === '') {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, é necessário informar sua data de nascimento !\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && !validateBirthDate(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, É necessário ter pelo menos 18 anos para se cadastrar!\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (birthDate && validatorAge(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A ação não pode ser realizada. É necessário ter pelo menos 18 anos para prosseguir.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n\r\n};\r\n","export const validatorAge = (birthDate: string) => {\r\n    const today = new Date(); // Data atual\r\n    const birth = new Date(birthDate); // Data de nascimento do payload\r\n  \r\n    // Calcula a diferença de anos\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n  \r\n    // Ajusta a idade se o aniversário ainda não aconteceu este ano\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n  \r\n    return age < 18; // Retorna true se maior ou igual a 18, caso contrário false\r\n  };","\r\n\r\nexport const validatorCNPJ = (value: string) => {\r\n    const cnpjRegex = /^\\d{14}$/;\r\n    return cnpjRegex.test(value);\r\n};\r\n\r\n\r\n","\r\n\r\n\r\n\r\nexport const validatorCPF = (value:string) => {\r\n    const cpfRegex = /^\\d{11}$/;\r\n    const isCPF = cpfRegex.test(value)\r\n\r\n    return isCPF\r\n}\r\n","import { isValid, parseISO } from \"date-fns\";\r\n\r\nexport const validateBirthDate = (dateString: string) => {\r\n    const date = parseISO(dateString); \r\n    return isValid(date); \r\n  }\r\n  ","\r\n\r\nexport const validatorEmail = (value:string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const isEmail = emailRegex.test(value)\r\n\r\n    return isEmail\r\n}","\r\n\r\n\r\nexport const validatorFieldsEmpty = (...fields: (string | number | null)[]): boolean => {\r\n    return fields.some(field => !field ||  field === \"\" || field === null)\r\n}","export const isValidPhoneNumber = (phoneNumber: string) => {\r\n\r\n    const phoneRegex = /^(\\d{1,3})(\\d{1,4})(\\d{6,10})$/;\r\n\r\n    const match = phoneRegex.exec(phoneNumber);\r\n\r\n    if (!match) return false;\r\n\r\n    const countryCode = match[1]; \r\n    const areaCode = match[2];     \r\n    const number = match[3];      \r\n\r\n  \r\n    if (countryCode === '55') {\r\n      \r\n        const isValidBrazilAreaCode = areaCode.length >= 2 && areaCode.length <= 4;\r\n      \r\n        const isValidBrazilNumber = number.length >= 8 && number.length <= 9;\r\n\r\n        return isValidBrazilAreaCode && isValidBrazilNumber;\r\n    } else {\r\n    \r\n        const isValidAreaCode = areaCode.length >= 1 && areaCode.length <= 4;\r\n\r\n      \r\n        const isValidNumber = number.length >= 6 && number.length <= 10;\r\n\r\n        return isValidAreaCode && isValidNumber;\r\n    }\r\n}\r\n\r\n"],"mappings":"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","names":[]}