{"version":3,"sources":["../../../src/utils/validationsServices/validationsDependentsService.ts","../../../src/utils/validators/validatorCPF.ts","../../../src/utils/validators/validatorDate.ts","../../../src/utils/validators/validatorEmail.ts","../../../src/utils/validators/validatorFieldsEmpty.ts","../../../src/utils/validators/validatorPhone.ts"],"sourcesContent":["import { validatorCPF } from \"../validators/validatorCPF\";\r\nimport { validateBirthDate } from \"../validators/validatorDate\";\r\nimport { validatorEmail } from \"../validators/validatorEmail\";\r\nimport { validatorFieldsEmpty } from \"../validators/validatorFieldsEmpty\";\r\nimport { isValidPhoneNumber } from \"../validators/validatorPhone\";\r\n\r\ninterface IParamsDependentsService {\r\n  name: string; // nome do cliente ou administrador\r\n  cpf: string; // cpf\r\n  birthDate: string; // Data de nascimento\r\n  gender?: string;\r\n  email?: string | null,\r\n  phone?: string | null, // é o genero ele pode mandar masculino, feminino ou prefiro não dizer\r\n  emailExists?: boolean | null;\r\n  cpfExists?: boolean | null;\r\n  userExists?: boolean | null;\r\n}\r\n\r\nexport const validationsDependentsService = ({\r\n  name,\r\n  cpf,\r\n  birthDate,\r\n  gender,\r\n  email,\r\n  phone,\r\n  emailExists,\r\n  cpfExists,\r\n  userExists,\r\n}: IParamsDependentsService) => {\r\n\r\n  const validatorEmpty = validatorFieldsEmpty(\r\n    name,\r\n    cpf,\r\n    birthDate,\r\n    gender\r\n  );\r\n\r\n  if (validatorEmpty) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha todos os campos obrigatórios.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        fields: [\r\n          \"name\",\r\n          \"cpf\",\r\n          \"birthDate\",\r\n          \"gender\",\r\n        ],\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n  if (!validatorCPF(cpf)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, CPF inválido. Deve conter 11 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (!validateBirthDate(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, data de nascimento inválida, verifique e tente novamente!\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n    if (email && !validatorEmail(email)) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar está ação, E-mail inválido.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n  \r\n    if(phone && !isValidPhoneNumber(phone)){\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar está ação, Número de telefone inválido.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n    \r\n  /*\r\n  if (validatorAge(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A ação não pode ser realizada. É necessário ter pelo menos 18 anos para prosseguir.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }*/\r\n\r\n  if (userExists !== null && userExists) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar o esta ação, o usuário não existe.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (emailExists !== null && emailExists) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Esse email está em uso.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (cpfExists !== null && cpfExists) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, esse CPF está em uso.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n","\r\n\r\n\r\n\r\nexport const validatorCPF = (value:string) => {\r\n    const cpfRegex = /^\\d{11}$/;\r\n    const isCPF = cpfRegex.test(value)\r\n\r\n    return isCPF\r\n}\r\n","import { isValid, parseISO } from \"date-fns\";\r\n\r\nexport const validateBirthDate = (dateString: string) => {\r\n    const date = parseISO(dateString); \r\n    return isValid(date); \r\n  }\r\n  ","\r\n\r\nexport const validatorEmail = (value:string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const isEmail = emailRegex.test(value)\r\n\r\n    return isEmail\r\n}","\r\n\r\n\r\nexport const validatorFieldsEmpty = (...fields: (string | number | null)[]): boolean => {\r\n    return fields.some(field => !field ||  field === \"\" || field === null)\r\n}","export const isValidPhoneNumber = (phoneNumber: string) => {\r\n\r\n    const phoneRegex = /^(\\d{1,3})(\\d{1,4})(\\d{6,10})$/;\r\n\r\n    const match = phoneRegex.exec(phoneNumber);\r\n\r\n    if (!match) return false;\r\n\r\n    const countryCode = match[1]; \r\n    const areaCode = match[2];     \r\n    const number = match[3];      \r\n\r\n  \r\n    if (countryCode === '55') {\r\n      \r\n        const isValidBrazilAreaCode = areaCode.length >= 2 && areaCode.length <= 4;\r\n      \r\n        const isValidBrazilNumber = number.length >= 8 && number.length <= 9;\r\n\r\n        return isValidBrazilAreaCode && isValidBrazilNumber;\r\n    } else {\r\n    \r\n        const isValidAreaCode = areaCode.length >= 1 && areaCode.length <= 4;\r\n\r\n      \r\n        const isValidNumber = number.length >= 6 && number.length <= 10;\r\n\r\n        return isValidAreaCode && isValidNumber;\r\n    }\r\n}\r\n\r\n"],"mappings":"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","names":[]}