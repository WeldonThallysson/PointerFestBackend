{"version":3,"sources":["../../../src/utils/validationsServices/validationsWalletsService.ts","../../../src/utils/validators/validatorFieldsEmpty.ts"],"sourcesContent":["\r\nimport { validatorAge } from \"../validators/validatorAge\";\r\nimport { validatorCPF } from \"../validators/validatorCPF\";\r\nimport { validateBirthDate } from \"../validators/validatorDate\";\r\nimport { validatorEmail } from \"../validators/validatorEmail\";\r\nimport { validatorFieldsEmpty } from \"../validators/validatorFieldsEmpty\";\r\n\r\ninterface IParamsWalletsService {\r\n    idUserOwner: string,\r\n    idUserForWallet: string | null,\r\n    idCodePassport?: string | null,\r\n    userLoggedExists?: boolean | null\r\n    userExists?: boolean | null\r\n    dependentExists?: boolean | null\r\n    passportExists?: boolean | null\r\n}\r\n\r\nexport const validationsWalletsService = ({\r\n    idUserOwner,\r\n    idUserForWallet,\r\n    idCodePassport,\r\n    userLoggedExists,\r\n    userExists,\r\n    dependentExists,\r\n    passportExists\r\n}: IParamsWalletsService) => \r\n  {\r\n  const validatorEmpty = validatorFieldsEmpty(\r\n    idUserOwner,\r\n    idUserForWallet,\r\n    idCodePassport,\r\n  );\r\n\r\n  if (validatorEmpty) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha todos os campos obrigatórios.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        fields: [\r\n          \"idUserForWallet\",\r\n          \"idCodePassport\",\r\n        ],\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n \r\n  \r\n  if(!userLoggedExists){\r\n    return {\r\n        data: {\r\n          message: \"Não foi possível realizar o esta ação, o usuário responsável não existe.\",\r\n          status: 400,\r\n        },\r\n      };\r\n  }\r\n\r\n  if (!dependentExists) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, o dependente ou usuário não existe.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (passportExists) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, o passaporte já existe.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n","\r\n\r\n\r\nexport const validatorFieldsEmpty = (...fields: (string | number | null)[]): boolean => {\r\n    return fields.some(field => !field ||  field === \"\" || field === null)\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGO,IAAM,uBAAuB,IAAI,WAAgD;AACpF,SAAO,OAAO,KAAK,WAAS,CAAC,SAAU,UAAU,MAAM,UAAU,IAAI;AACzE;;;ADYO,IAAM,4BAA4B,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,MACE;AACA,QAAM,iBAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI,gBAAgB;AAClB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA;AAAA,QACF,QAAQ;AAAA,UACN;AAAA,UACA;AAAA,QACF;AAAA,QACA,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAIA,MAAG,CAAC,kBAAiB;AACnB,WAAO;AAAA,MACH,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACJ;AAEA,MAAI,CAAC,iBAAiB;AACpB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,gBAAgB;AAClB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;","names":[]}