{"version":3,"sources":["../../../src/utils/formatters/formatterToday.ts"],"sourcesContent":["import {DateTime} from 'luxon'\r\n\r\nconst today = new Date();\r\n\r\nexport const todayFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n  })\r\n    .format(today)\r\n    .split(\"/\")\r\n    .reverse()\r\n    .join(\"-\"); // Converte para YYYY-MM-DD\r\n\r\n\r\nexport const todayFormattedWithTime = (dateNow: Date) => {\r\n  new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\", // Inclui as horas no formato de 2 dígitos\r\n    minute: \"2-digit\", // Inclui os minutos no formato de 2 dígitos\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n}).format(dateNow).replace(',', ''); // Remove a vírgula entre data e hora\r\n\r\n\r\n}\r\n  \r\n\r\nexport const todayFormattedWithTimeToIso = (dateNow: Date): string => {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\",\r\n    hour12: false, // Para garantir o formato 24h\r\n  };\r\n\r\n  // Obter a data e hora formatadas no padrão ISO customizado\r\n  const formatted = new Intl.DateTimeFormat(\"pt-BR\", options)\r\n    .format(dateNow)\r\n    .replace(',', ''); // Remove vírgula\r\n\r\n  // Converter \"DD/MM/AAAA HH:MM\" para \"AAAA-MM-DD HH:MM\"\r\n  const [date, time] = formatted.split(' ');\r\n  const [day, month, year] = date.split('/');\r\n  return `${year}-${month}-${day} ${time}`;\r\n};\r\n\r\n\r\n\r\nexport const todayWithTime = (): string => {\r\n\r\n  const now = DateTime.now().setZone('America/Sao_Paulo');\r\n  \r\n  \r\n  return now.toFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n};\r\n\r\n\r\nexport const todayWithTimeAtFormat = (date?: Date | null): string => {\r\n  if (!date) {\r\n    return \"\"; // Retorna uma string vazia se `date` for `null` ou `undefined`.\r\n  }\r\n\r\n  const isoString = date instanceof Date ? date.toISOString() : date; // Garante que seja uma string ISO\r\n  const [datePart, timePart] = isoString.split(\"T\"); // Divide a data em partes (data e hora)\r\n  const [year, month, day] = datePart.split(\"-\"); // Divide a parte da data (YYYY-MM-DD)\r\n  const [hours, minutes] = timePart.split(\":\"); // Divide a parte do tempo (HH:mm:ss)\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAuB;AAEvB,IAAM,QAAQ,oBAAI,KAAK;AAEhB,IAAM,iBAAiB,IAAI,KAAK,eAAe,SAAS;AAAA,EAC3D,MAAM;AAAA,EACN,OAAO;AAAA,EACP,KAAK;AAAA,EACL,UAAU;AAAA;AACZ,CAAC,EACE,OAAO,KAAK,EACZ,MAAM,GAAG,EACT,QAAQ,EACR,KAAK,GAAG;AAGN,IAAM,yBAAyB,CAAC,YAAkB;AACvD,MAAI,KAAK,eAAe,SAAS;AAAA,IAC/B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,MAAM;AAAA;AAAA,IACN,QAAQ;AAAA;AAAA,IACR,UAAU;AAAA;AAAA,EACd,CAAC,EAAE,OAAO,OAAO,EAAE,QAAQ,KAAK,EAAE;AAGlC;AAGO,IAAM,8BAA8B,CAAC,YAA0B;AACpE,QAAM,UAAsC;AAAA,IAC1C,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,QAAQ;AAAA;AAAA,EACV;AAGA,QAAM,YAAY,IAAI,KAAK,eAAe,SAAS,OAAO,EACvD,OAAO,OAAO,EACd,QAAQ,KAAK,EAAE;AAGlB,QAAM,CAAC,MAAM,IAAI,IAAI,UAAU,MAAM,GAAG;AACxC,QAAM,CAAC,KAAK,OAAO,IAAI,IAAI,KAAK,MAAM,GAAG;AACzC,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI;AACxC;AAIO,IAAM,gBAAgB,MAAc;AAEzC,QAAM,MAAM,sBAAS,IAAI,EAAE,QAAQ,mBAAmB;AAGtD,SAAO,IAAI,SAAS,8BAA8B;AACpD;AAGO,IAAM,wBAAwB,CAAC,SAA+B;AACnE,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,QAAM,YAAY,gBAAgB,OAAO,KAAK,YAAY,IAAI;AAC9D,QAAM,CAAC,UAAU,QAAQ,IAAI,UAAU,MAAM,GAAG;AAChD,QAAM,CAAC,MAAM,OAAO,GAAG,IAAI,SAAS,MAAM,GAAG;AAC7C,QAAM,CAAC,OAAO,OAAO,IAAI,SAAS,MAAM,GAAG;AAE3C,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO;AACpD;","names":[]}