{"version":3,"sources":["../../../src/controllers/Bin/binEditItemsController.ts","../../../src/prisma/index.ts","../../../src/services/Bin/binEditItemsService.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\n \r\nimport { BinEditItemsService } from \"../../services/Bin/binEditItemsService\";\r\n\r\nclass BinEditItemsController {\r\n  async handle(req: Request, res: Response) {\r\n     \r\n    const { \r\n        id,\r\n        idUserOwner,\r\n        tableName,\r\n        data\r\n    } = req.body;\r\n\r\n    const binEditItemsService = new BinEditItemsService();\r\n\r\n    const responseBinGetAllItemsService = await binEditItemsService.execute({\r\n         id: id,\r\n         idUserOwner: idUserOwner,\r\n         tableName: tableName, \r\n         data: data\r\n    });\r\n\r\n    return res\r\n      .status(responseBinGetAllItemsService.data.status)\r\n      .json(responseBinGetAllItemsService.data);\r\n  }\r\n}\r\n\r\nexport { BinEditItemsController };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IBinEditItemsService {\r\n  id: string;\r\n  tableName: string;\r\n  idUserOwner: string;\r\n  data: JSON | null;\r\n}\r\n\r\nclass BinEditItemsService {\r\n  async execute({ id, idUserOwner, tableName, data }: IBinEditItemsService) {\r\n    if (!idUserOwner) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!id || !tableName) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const itemBinExists = await prismaClient.$queryRawUnsafe(\r\n      `SELECT * FROM ${tableName} WHERE id = '${id}'`\r\n    );\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, usuário não existe\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!itemBinExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, item não existe na lixeira\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      await prismaClient.bin.update({\r\n        where: {\r\n          id: id,\r\n        },\r\n        data: {\r\n          tableName,\r\n          itemId: id,\r\n          idUserOwner: idUserOwner,\r\n          data: JSON.stringify(data),\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.UpdateMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.UpdateMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { BinEditItemsService };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACMf,IAAM,sBAAN,MAA0B;AAAA,EAClB,QAAQ,IAA4D;AAAA,+CAA5D,EAAE,IAAI,aAAa,WAAW,KAAK,GAAyB;AACxE,UAAI,CAAC,aAAa;AAChB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,MAAM,CAAC,WAAW;AACrB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,gBAAgB,MAAM,eAAa;AAAA,QACvC,iBAAiB,SAAS,gBAAgB,EAAE;AAAA,MAC9C;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,eAAe;AAClB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AACF,cAAM,eAAa,IAAI,OAAO;AAAA,UAC5B,OAAO;AAAA,YACL;AAAA,UACF;AAAA,UACA,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,MAAM,KAAK,UAAU,IAAI;AAAA,UAC3B;AAAA,QACF,CAAC;AAED,eAAO;AAAA,UACL,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,0EAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;;;AFtFA,IAAM,yBAAN,MAA6B;AAAA,EACrB,OAAO,KAAc,KAAe;AAAA;AAExC,YAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,IAAI,IAAI;AAER,YAAM,sBAAsB,IAAI,oBAAoB;AAEpD,YAAM,gCAAgC,MAAM,oBAAoB,QAAQ;AAAA,QACnE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACL,CAAC;AAED,aAAO,IACJ,OAAO,8BAA8B,KAAK,MAAM,EAChD,KAAK,8BAA8B,IAAI;AAAA,IAC5C;AAAA;AACF;","names":[]}