{"version":3,"sources":["../../../src/controllers/Events/cadastrarEventoController.ts","../../../src/prisma/index.ts","../../../src/services/Events/cadastrarEventoService.ts"],"sourcesContent":["import { Request,Response } from \"express\";\r\nimport { CadastrarEventoService } from \"../../services/Events/cadastrarEventoService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport { v2 as cloudinary } from \"cloudinary\";\r\nimport { UploadApiResponse } from \"cloudinary\";\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_NAME,\r\n    api_key: process.env.CLOUDINARY_KEY,\r\n    api_secret: process.env.CLOUDINARY_SECRET\r\n})\r\ninterface IResponseCadastrarEventoController {\r\n    status?: number\r\n    message?: string\r\n  }\r\n\r\n\r\nclass CadastrarEventoController {\r\n    async handle(req: Request, res: Response){\r\n        const id_user_logged = req.url\r\n        const { \r\n          idProduct,\r\n          idCategory,\r\n          name,\r\n          description,\r\n          localityEvent,\r\n          urlLocalityEvent,\r\n          bannerImageUrl,\r\n          dateEvent,\r\n          hourEvent,\r\n          restrictionsEvent,\r\n          placesPurchaseTicket,\r\n          urlPostSocialNetwork,\r\n          phoneForContact,\r\n        } = req.body;\r\n\r\n        const cadastrarEvento = new CadastrarEventoService()\r\n       \r\n            const file = req.files['bannerEvento'];\r\n\r\n            if (Array.isArray(file)) {\r\n              // Se for um array, use o primeiro arquivo ou faça o que for necessário\r\n              throw new Error(\"Only one file is allowed for 'bannerEvento'\");\r\n            } else {\r\n              const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n                cloudinary.uploader.upload_stream({}, (error, result) => {\r\n                  if (error) {\r\n                    reject(error);\r\n                  }\r\n                  resolve(result);\r\n                }).end(file.data);\r\n              });\r\n              \r\n            const eventoCadastrado = await cadastrarEvento.execute({ \r\n              idUserOwner: id_user_logged,\r\n              idProduct,\r\n              idCategory,\r\n              name,\r\n              description,\r\n              localityEvent,\r\n              urlLocalityEvent,\r\n              bannerImageUrl,\r\n              dateEvent,\r\n              hourEvent,\r\n              restrictionsEvent,\r\n              placesPurchaseTicket,\r\n              urlPostSocialNetwork,\r\n              phoneForContact,\r\n             }) as IResponseCadastrarEventoController\r\n             \r\n             if(eventoCadastrado.status === 403){\r\n                return res.status(403).json(eventoCadastrado)\r\n             }\r\n\r\n            return res.json(eventoCadastrado)\r\n\r\n        }\r\n   \r\n    }\r\n\r\n}\r\n\r\nexport {CadastrarEventoController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../prisma\";\r\n\r\ninterface CadastrarEventoType {\r\n  idUserOwner: string;\r\n  idProduct: string;\r\n  name: string;\r\n  description: string;\r\n  localityEvent: string;\r\n  urlLocalityEvent: string;\r\n  bannerImageUrl: string;\r\n  dateEvent: string;\r\n  hourEvent: string;\r\n  idCategory: string; \r\n  restrictionsEvent?: string;\r\n  placesPurchaseTicket: string;\r\n  urlPostSocialNetwork: string;\r\n  phoneForContact?: string;\r\n}\r\n\r\nclass CadastrarEventoService {\r\n  async execute({\r\n    idUserOwner,\r\n    idProduct,\r\n    idCategory,\r\n    name,\r\n    description,\r\n    localityEvent,\r\n    urlLocalityEvent,\r\n    bannerImageUrl,\r\n    dateEvent,\r\n    hourEvent,\r\n    restrictionsEvent,\r\n    placesPurchaseTicket,\r\n    urlPostSocialNetwork,\r\n    phoneForContact,\r\n  }: CadastrarEventoType) {\r\n\r\n\r\n    //idUserOwner\r\n\r\n\r\n\r\n    const eventoExiste = await prismaClient.events.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n    if (eventoExiste) {\r\n      return {\r\n        message: \"Essa evento já existe\",\r\n        status: 400,\r\n      };\r\n    }\r\n    const cadastrarEvento = await prismaClient.events.create({\r\n      data: {\r\n        idUserOwner: idUserOwner,\r\n        name: name,\r\n        description: description,\r\n        idProduct: idProduct,\r\n        idCategory: idCategory,\r\n        localityEvent: localityEvent,\r\n        urlLocalityEvent: urlLocalityEvent,\r\n        bannerImageUrl: bannerImageUrl,\r\n        dateEvent: dateEvent,\r\n        hourEvent: hourEvent,\r\n\r\n        restrictionsEvent: restrictionsEvent,\r\n        placesPurchaseTicket: placesPurchaseTicket,\r\n        urlPostSocialNetwork: urlPostSocialNetwork,\r\n        phoneForContact: phoneForContact,\r\n      },\r\n    });\r\n    return cadastrarEvento;\r\n  }\r\n}\r\n\r\nexport { CadastrarEventoService };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACef,IAAM,yBAAN,MAA6B;AAAA,EACrB,QAAQ,IAeU;AAAA,+CAfV;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAAwB;AAOtB,YAAM,eAAe,MAAM,eAAa,OAAO,UAAU;AAAA,QACvD,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,CAAC;AACD,UAAI,cAAc;AAChB,eAAO;AAAA,UACL,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AACA,YAAM,kBAAkB,MAAM,eAAa,OAAO,OAAO;AAAA,QACvD,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UAEA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAAA;AACF;;;AFvEA,wBAAiC;AAEjC,kBAAAA,GAAW,OAAO;AAAA,EACd,YAAY,QAAQ,IAAI;AAAA,EACxB,SAAS,QAAQ,IAAI;AAAA,EACrB,YAAY,QAAQ,IAAI;AAC5B,CAAC;AAOD,IAAM,4BAAN,MAAgC;AAAA,EACtB,OAAO,KAAc,KAAc;AAAA;AACrC,YAAM,iBAAiB,IAAI;AAC3B,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI,IAAI;AAER,YAAM,kBAAkB,IAAI,uBAAuB;AAE/C,YAAM,OAAO,IAAI,MAAM,cAAc;AAErC,UAAI,MAAM,QAAQ,IAAI,GAAG;AAEvB,cAAM,IAAI,MAAM,6CAA6C;AAAA,MAC/D,OAAO;AACL,cAAM,aAAgC,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC3E,4BAAAA,GAAW,SAAS,cAAc,CAAC,GAAG,CAAC,OAAO,WAAW;AACvD,gBAAI,OAAO;AACT,qBAAO,KAAK;AAAA,YACd;AACA,oBAAQ,MAAM;AAAA,UAChB,CAAC,EAAE,IAAI,KAAK,IAAI;AAAA,QAClB,CAAC;AAEH,cAAM,mBAAmB,MAAM,gBAAgB,QAAQ;AAAA,UACrD,aAAa;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,CAAC;AAED,YAAG,iBAAiB,WAAW,KAAI;AAChC,iBAAO,IAAI,OAAO,GAAG,EAAE,KAAK,gBAAgB;AAAA,QAC/C;AAED,eAAO,IAAI,KAAK,gBAAgB;AAAA,MAEpC;AAAA,IAEJ;AAAA;AAEJ;","names":["cloudinary"]}