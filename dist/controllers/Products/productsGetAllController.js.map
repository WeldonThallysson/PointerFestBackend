{"version":3,"sources":["../../../src/controllers/Products/productsGetAllController.ts","../../../src/prisma/index.ts","../../../src/services/Products/productsGetAllService.ts"],"sourcesContent":["import { Request,Response } from \"express\";\r\nimport { ProductsGetAllService } from \"../../services/Products/productsGetAllService\";\r\n\r\nclass ProductGetAllController {\r\n  async handle(req: Request, res: Response) {\r\n     const name = req.query.name as string\r\n     const page = req.query.page as string\r\n     const limit = req.query.limit as string\r\n     const idUserLogged = req.query.idUserLogged as string;\r\n     const idUserOwner = req.query.idUserOwner as string;\r\n     const idTypeProduct = req.query.idTypeProduct as string;\r\n     const available = req.query.available as string\r\n     const status = req.query.status as string\r\n\r\n\r\n     const productGetAll = new ProductsGetAllService()\r\n     const responseProductGetAll = await productGetAll.execute({\r\n      available,\r\n      idTypeProduct,\r\n      idUserLogged,\r\n      idUserOwner,\r\n      limit: Number(limit),\r\n      name,\r\n      page: Number(page),\r\n      ...(status !== null && {status: status !== 'false' ? true : false}),\r\n     })\r\n\r\n     return res.status(responseProductGetAll.data.status).json(responseProductGetAll.data)\r\n  }\r\n}\r\n\r\nexport {ProductGetAllController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IProductsGetAllService {\r\n  name?: string | null;\r\n  idUserLogged?: string | null;\r\n  idUserOwner?: string | null;\r\n  idTypeProduct?: string | null;\r\n  available?: string | null;\r\n  status?: boolean | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass ProductsGetAllService {\r\n  async execute({\r\n    available,\r\n    idTypeProduct,\r\n    idUserLogged,\r\n    idUserOwner,\r\n    name,\r\n    status,\r\n    page,\r\n    limit,\r\n  }: IProductsGetAllService) {\r\n    const userIDSend = idUserLogged ?? idUserOwner;\r\n    // Verificar se o usuário existe\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: idUserOwner ?? idUserLogged },\r\n    });\r\n\r\n    const typesProductsExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        id: idTypeProduct,\r\n      },\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n         message: \"Não foi possível prosseguir, este usuário não existe!\",\r\n         status: 404,\r\n        }\r\n      };\r\n    }\r\n    if (!typesProductsExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n          \"Não foi possível prosseguir com está ação, o tipo do produto não existe!\",\r\n         status: 404,\r\n        }\r\n      };\r\n    }\r\n\r\n    const where: any = {};\r\n\r\n    if (name)\r\n      where.id = {\r\n        contains: name,\r\n        mode: \"insensitive\",\r\n      };\r\n    if (userIDSend) {\r\n      where.idUserOwner = {\r\n        contains: userIDSend,\r\n        mode: \"insensitive\",\r\n      };\r\n    }\r\n    if (idTypeProduct)\r\n      where.idTypeProduct = { contains: idTypeProduct, mode: \"insensitive\" };\r\n    if (available)\r\n      where.available = { contains: available, mode: \"insensitive\" };\r\n\r\n    if (status !== null)\r\n      where.status = {\r\n        contains: status,\r\n      };\r\n\r\n    try {\r\n      const shouldPaginate = page !== undefined || limit !== undefined;\r\n      const skip = shouldPaginate\r\n        ? ((page ?? 1) - 1) * (limit ?? 10)\r\n        : undefined;\r\n      const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n      const products = await prismaClient.products.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n      });\r\n\r\n      const totalProducts = await prismaClient.products.count({ where });\r\n      const totalPages = shouldPaginate\r\n        ? Math.ceil(totalProducts / (limit ?? 10))\r\n        : 1;\r\n\r\n      return {\r\n        data: {\r\n          items: products,\r\n          totalItems: totalProducts,\r\n          totalPages: totalPages,\r\n          currentPage: shouldPaginate ? page ?? 1 : 1,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: MessagesError.GetAllMessageError,\r\n          error: err?.message,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsGetAllService };\r\n"],"mappings":"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","names":[]}