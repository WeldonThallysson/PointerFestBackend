{"version":3,"sources":["../../../../src/controllers/Users/PasswordRecover/recoverPasswordUserController.ts","../../../../src/prisma/index.ts","../../../../src/services/Users/PasswordRecover/recoverPasswordUserService.ts","../../../../src/config/nodemailerConfig.ts","../../../../src/utils/validators/validatorEmail.ts"],"sourcesContent":["\r\nimport { Request, Response } from 'express'\r\nimport { RecoverPasswordService } from '../../../services/Users/PasswordRecover/recoverPasswordUserService'\r\n\r\n\r\n\r\nclass RecoverPasswordController {\r\n    async handle(req: Request, res: Response){   \r\n\r\n        const {\r\n            email,\r\n        } = req.body\r\n\r\n        const recoverPassword = new RecoverPasswordService()\r\n        const responseRecoverPassword = await recoverPassword.execute({\r\n            email\r\n        })\r\n\r\n        return res.status(responseRecoverPassword.data.status).json(responseRecoverPassword.data)\r\n    }\r\n}\r\n\r\n\r\nexport { RecoverPasswordController }","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../../prisma\";\r\nimport jsonwebtoken from \"jsonwebtoken\";\r\nimport { transporter } from \"../../../config/nodemailerConfig\"; \r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { validatorEmail } from \"../../../utils/validators/validatorEmail\";\r\n\r\ninterface IRecoverPasswordService {\r\n  email: string;\r\n}\r\n\r\nclass RecoverPasswordService {\r\n  async execute({ email }: IRecoverPasswordService) {\r\n\r\n    if (!email) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor informe seu email para prosseguir.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    \r\n    if(!validatorEmail(email)){\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com a ação, E-mail inválido.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const userExists = await prismaClient.users.findFirst({\r\n        where: {\r\n          email: email,\r\n        },\r\n      });\r\n\r\n      if (!userExists) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível prosseguir com a ação, E-mail do usuário não encontrado!\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      const tokenRecoverPassword = jsonwebtoken.sign(\r\n        { userId: userExists.id },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: \"30min\" }\r\n      );\r\n\r\n      const resetLink = `${process.env.FRONTEND_URL}${process.env.LINK_REDEFINE_PASSWORD_URL}/${tokenRecoverPassword}`;\r\n      const filePath = path.join(__dirname, \"../../../config/templates/templateRecoverPassword.html\");\r\n      let htmlContent = fs.readFileSync(filePath, \"utf-8\");\r\n\r\n      htmlContent = htmlContent\r\n        .replace(\"{{resetLink}}\", resetLink)\r\n        .replace(\"{{userName}}\", userExists.name.split(\" \")[0]);\r\n\r\n      const mailOptions = {\r\n          from: `Suporte Up Point <${process.env.EMAIL_USER_RECOVERPASSWORD}>`,\r\n          to: userExists.email,\r\n          subject: \"Redefinição de Senha\",\r\n          html: htmlContent,\r\n          messageId: `<${Date.now()}-${Math.random().toString(36).slice(2)}>`,\r\n          headers: { 'X-Entity-Ref-ID': `${Date.now()}` },\r\n        };\r\n\r\n      await transporter({\r\n        authEmail: process.env.EMAIL_USER_RECOVERPASSWORD,\r\n        authPassword: process.env.EMAIL_PASSWORD_RECOVERPASSWORD\r\n      }).sendMail(mailOptions);\r\n\r\n      return {\r\n        data: {\r\n          message: \"E-mail de recuperação enviado, confira sua caixa de entrada.\",\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      console.log(err);\r\n      return {\r\n        data: {\r\n          err: err,\r\n          message: \"Erro ao enviar e-mail para recuperação de senha.\",\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { RecoverPasswordService };\r\n","import nodemailer from 'nodemailer'\r\n\r\ninterface ITransporter {\r\n    authEmail: string,\r\n    authPassword: string\r\n}\r\n\r\nexport const transporter = ({authEmail, authPassword}: ITransporter) => {\r\n    \r\n    return nodemailer.createTransport({\r\n        host: process.env.SMTP_HOST_NODEMAILER ?? 'smtp.gmail.com',\r\n        port: 465,\r\n        secure: true,\r\n        auth: {\r\n            user: authEmail,\r\n            pass: authPassword\r\n        }\r\n    })\r\n}","\r\n\r\nexport const validatorEmail = (value:string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const isEmail = emailRegex.test(value)\r\n\r\n    return isEmail\r\n}"],"mappings":"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","names":["nodemailer","jsonwebtoken","path","fs"]}