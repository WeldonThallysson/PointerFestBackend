{"version":3,"sources":["../../../src/controllers/Users/usersGetAllController.ts","../../../src/prisma/index.ts","../../../src/utils/formatters/formatterDate.ts","../../../src/utils/validators/validatorPermissions.ts","../../../src/utils/formatters/formatterCPF.ts","../../../src/utils/formatters/formatterCEP.ts","../../../src/utils/formatters/formatterCNPJ.ts","../../../src/services/Users/usersGetAllSevice.ts"],"sourcesContent":["import {Request,Response } from 'express'\r\nimport { UsersGetAllService } from '../../services/Users/usersGetAllSevice'\r\n \r\n\r\nclass UsersGetAllController {\r\n    async handle(req: Request, res: Response){\r\n      const id_user_logged = req.user_id;\r\n      const idOtherUser = req.query.idOtherUser as string;\r\n      const name = req.query.name as string;\r\n      const companyName = req.query.companyName as string;\r\n      const email = req.query.email as string;\r\n      const cpfCnpj = req.query.cpfCnpj as string;\r\n      const phone = req.query.phone as string;\r\n      const birthDate = req.query.birthDate as string;\r\n      const gender = req.query.gender as string;\r\n      const typePerson = req.query.typePerson as string;\r\n      const city = req.query.city as string;\r\n      const street = req.query.street as string;\r\n      const neighborhood = req.query.neighborhood as string;\r\n      const complement = req.query.complement as string; \r\n      const cep = req.query.cep as string;\r\n      const number_address = req.query.number_address as string;\r\n      const region_code = req.query.region_code as string;\r\n      const typeAccess = req.query.typeAccess as string;\r\n      const status = req.query.status as string;\r\n      const page = req.query.page as string;\r\n      const limit = req.query.limit as string\r\n \r\n       const usersGetAll = new UsersGetAllService()\r\n\r\n       const responseUsersGetAll = await usersGetAll.execute({\r\n          id_user_logged: id_user_logged,\r\n          idOtherUser: idOtherUser,\r\n          name: name,\r\n          companyName: companyName,\r\n          email: email,\r\n          cpfCnpj: cpfCnpj,\r\n          phone: phone,\r\n          birthDate: birthDate,\r\n          gender: gender,\r\n          typeAccess: typeAccess,\r\n          typePerson: typePerson,\r\n          city: city,\r\n          street: street,\r\n          neighborhood: neighborhood,\r\n          complement: complement,\r\n          cep: cep,\r\n          number_address: number_address,\r\n          region_code: region_code,\r\n          ...(status !== null && {status: status !== 'false' ? true : false}),\r\n          page: Number(page),\r\n          limit: Number(limit)\r\n\r\n       })\r\n       return res.status(responseUsersGetAll.data.status).json(responseUsersGetAll.data)\r\n    }\r\n\r\n}\r\n\r\nexport {UsersGetAllController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\n\r\ninterface IValidatorPermissions {\r\n    typeAccess: string,\r\n}\r\n\r\n\r\nexport const validatorPermissions = ({typeAccess}: IValidatorPermissions) => {\r\n  return (typeAccess === TypesAccess.Owner || typeAccess === TypesAccess.Developer || typeAccess === TypesAccess.Master || typeAccess === TypesAccess.Admin)\r\n \r\n}\r\n","export const formatterCPF = (cpf: string) => {\r\n    const cleanedCPF = cpf.replace(/\\D/g, '');\r\n\r\n\r\n    /*\r\n      if (cleanedCPF.length !== 11) {\r\n        throw new Error('CPF inválido. Deve conter 11 dígitos.');\r\n       }\r\n\r\n    */\r\n\r\n    const formattedCPF = cleanedCPF.replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\r\n\r\n    return formattedCPF;\r\n};\r\n","export const formatterCEP = (cep: string) => {\r\n    if(cep){\r\n        const cleanedCEP = cep.replace(/\\D/g, '');\r\n        /*\r\n         if (cleanedCEP.length !== 8) {\r\n            throw new Error('CEP inválido. Deve conter 8 dígitos.');\r\n        }\r\n    \r\n        */\r\n        const formattedCEP = cleanedCEP.replace(/(\\d{5})(\\d{3})/, '$1-$2');\r\n    \r\n        return formattedCEP;\r\n    }\r\n\r\n    return null\r\n   \r\n};","\r\n\r\n\r\n\r\nexport const formatterCNPJ = (cnpj: string) => {\r\n  const cleanedCNPJ = cnpj.replace(/\\D/g, '');  \r\n\r\n  const formattedCNPJ = cleanedCNPJ.replace(/^(\\d{2})(\\d)/, '$1.$2')\r\n                                   .replace(/^(\\d{2})\\.(\\d{3})(\\d)/, '$1.$2.$3')\r\n                                   .replace(/\\.(\\d{3})(\\d)/, '.$1/$2')\r\n                                   .replace(/(\\d{4})(\\d{2})$/, '$1-$2');\r\n\r\n  return formattedCNPJ;\r\n};\r\n","import { stat } from \"fs\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport {\r\n  formatterDate,\r\n  formatterDateToIso,\r\n} from \"../../utils/formatters/formatterDate\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport { formatterCEP } from \"../../utils/formatters/formatterCEP\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { formatterCNPJ } from \"../../utils/formatters/formatterCNPJ\";\r\n\r\ninterface IGetAllUserService {\r\n  id_user_logged: string;\r\n  idOtherUser: string | null;\r\n  name?: string | null;\r\n  companyName?: string | null;\r\n  email?: string | null;\r\n  cpfCnpj?: string | null;\r\n  complement?: string | null;\r\n  phone?: string | null;\r\n  birthDate?: string | null;\r\n  residence?: string | null;\r\n  neighborhood?: string | null;\r\n  address?: string | null;\r\n  city?: string | null;\r\n  gender?: string | null;\r\n  cep?: string | null;\r\n  typeAccess?: string | null;\r\n  typePerson?: string | null;\r\n  number_address?: string | null;\r\n  region_code?: string | null;\r\n  street?: string | null;\r\n  status?: boolean;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass UsersGetAllService {\r\n  async execute({\r\n    id_user_logged,\r\n    idOtherUser,\r\n    name,\r\n    companyName,\r\n    email,\r\n    cpfCnpj,\r\n    complement,\r\n    phone,\r\n    birthDate,\r\n    residence,\r\n    neighborhood,\r\n    address,\r\n    city,\r\n    gender,\r\n    cep,\r\n    typeAccess,\r\n    typePerson,\r\n    number_address,\r\n    region_code,\r\n    street,\r\n    status,\r\n    page,\r\n    limit,\r\n  }: IGetAllUserService) {\r\n    \r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: { id: id_user_logged },\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const responseValidation = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess,\r\n    });\r\n\r\n    if (!responseValidation) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta não possui permissão para realizar esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      (typeAccess && userExistsLogged.typeAccess === TypesAccess.User) ||\r\n      userExistsLogged.typeAccess === TypesAccess.Promoter\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Sua conta não possui permissão para buscar pelos parâmetros de tipo do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    const where: any = { id: { not: id_user_logged } };\r\n\r\n    if (\r\n      userExistsLogged?.typeAccess === TypesAccess.Owner ||\r\n      userExistsLogged?.typeAccess === TypesAccess.Developer\r\n    ) {\r\n      where.typeAccess = { contains: typeAccess, mode: \"insensitive\" };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Master) {\r\n      where.typeAccess = {\r\n        notIn: [TypesAccess.Master, TypesAccess.Owner, TypesAccess.Developer],\r\n      };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Admin) {\r\n      where.typeAccess = {\r\n        notIn: [\r\n          TypesAccess.Admin,\r\n          TypesAccess.Master,\r\n          TypesAccess.Owner,\r\n          TypesAccess.Developer,\r\n        ],\r\n      };\r\n    } else if (userExistsLogged.typeAccess === TypesAccess.Worker) {\r\n      where.typeAccess = {\r\n        notIn: [\r\n          TypesAccess.Admin,\r\n          TypesAccess.Owner,\r\n          TypesAccess.Developer,\r\n          TypesAccess.Master,\r\n          TypesAccess.Worker,\r\n        ],\r\n      };\r\n    }\r\n\r\n    if (idOtherUser) where.id = { contains: idOtherUser, mode: \"insensitive\" };\r\n    if (name)\r\n      where.name = {\r\n        contains: name,\r\n        mode: \"insensitive\",\r\n      };\r\n    if (companyName)\r\n        where.companyName = {\r\n          contains: companyName,\r\n          mode: \"insensitive\",\r\n    };\r\n    if (email) where.email = { contains: email, mode: \"insensitive\" };\r\n\r\n    if (cpfCnpj) where.cpfCnpj = { contains: cpfCnpj, mode: \"insensitive\" };\r\n\r\n    if (phone) where.phone = { contains: phone, mode: \"insensitive\" };\r\n    if (complement)\r\n      where.complement = { contains: complement, mode: \"insensitive\" };\r\n    if (birthDate) where.birthDate = formatterDate(birthDate);\r\n    if (residence)\r\n      where.residence = { contains: residence, mode: \"insensitive\" };\r\n    if (neighborhood)\r\n      where.neighborhood = { contains: neighborhood, mode: \"insensitive\" };\r\n    if (address) where.address = { contains: address, mode: \"insensitive\" };\r\n    if (cep) where.cep = { contains: address, mode: \"insensitive\" };\r\n    if (city) where.city = { contains: city, mode: \"insensitive\" };\r\n    if (gender) where.gender = gender;\r\n    if (status !== null) where.status = status;\r\n    if (typeAccess)\r\n      where.typeAccess = { contains: typeAccess, mode: \"insensitive\" };\r\n    if (typePerson)\r\n      where.typePerson = { contains: typePerson, mode: \"insensitive\" };\r\n    if (street) where.street = { contains: street, mode: \"insensitive\" };\r\n    if (number_address)\r\n      where.number_address = { contains: number_address, mode: \"insensitive\" };\r\n    if (region_code)\r\n      where.region_code = { contains: region_code, mode: \"insensitive\" };\r\n    // Configurar paginação\r\n    const shouldPaginate = page !== undefined || limit !== undefined;\r\n    const skip = shouldPaginate ? ((page ?? 1) - 1) * (limit ?? 10) : undefined;\r\n    const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n    const users = await prismaClient.users.findMany({\r\n      where,\r\n      skip,\r\n      take,\r\n      orderBy: { created_At: \"desc\" },\r\n      select: {\r\n        id: true,\r\n        idPlan: true,\r\n        name: true,\r\n        companyName: true,\r\n        email: true,\r\n        cpfCnpj: true,\r\n        phone: true,\r\n        birthDate: true,\r\n        gender: true,\r\n        typePerson: true,\r\n\r\n        city: true,\r\n        street: true,\r\n        neighborhood: true,\r\n        complement: true,\r\n        cep: true,\r\n        number_address: true,\r\n        region_code: true,\r\n        typeAccess: true,\r\n        profileAvatar: true, // essa é a logo que o usuário ira enviar apenas a url do banco de fotos\r\n        profileSocialUrl: true,\r\n\r\n        termsUsePlatform: true,\r\n        termsUseLGPD: true,\r\n        termsPrivacyPolicy: true,\r\n        termsReceiptNews: true,\r\n\r\n        registeredBy: true,\r\n        typeAccessRegisteredBy: true,\r\n        cpfRegisteredBy: true,\r\n        dateRegisteredBy: true,\r\n\r\n        editedBy: true,\r\n        typeAccessEditedBy: true, // para quando o admin ou master cadastrar um novo cliente saber quem cadastrou esse novo usuário\r\n        cpfEditedBy: true,\r\n        dateEditedBy: true,\r\n\r\n        tutorialFirstAccess: true,\r\n        status: true,\r\n\r\n        planSubscription: true,\r\n\r\n        created_At: true,\r\n        updated_At: true,\r\n      },\r\n    });\r\n\r\n    const totalUsers = await prismaClient.users.count({ where });\r\n    const totalPages = shouldPaginate\r\n      ? Math.ceil(totalUsers / (limit ?? 10))\r\n      : 1;\r\n\r\n    const formattedUsers = users.map((user) => ({\r\n      ...user,\r\n      cpfCnpj:\r\n        user.typePerson === TypePerson.Fisic\r\n          ? formatterCPF(user.cpfCnpj)\r\n          : formatterCNPJ(user.cpfCnpj),\r\n      cep: formatterCEP(user.cep),\r\n      birthDate: user.birthDate ? formatterDateToIso(user.birthDate) : null,\r\n    }));\r\n\r\n    return {\r\n      data: {\r\n        items: formattedUsers,\r\n        totalItems: totalUsers,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersGetAllService };\r\n"],"mappings":"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","names":[]}