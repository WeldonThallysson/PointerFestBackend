{"version":3,"sources":["../../../../src/controllers/Users/Permissions/allowUpdateTermsController.ts","../../../../src/prisma/index.ts","../../../../src/services/Users/Permissions/allowUpdateTermsService.ts"],"sourcesContent":["import { Request, Response} from 'express'\r\nimport { AllowUpdateTermsService } from '../../../services/Users/Permissions/allowUpdateTermsService';\r\n\r\n\r\nclass AllowUpdateTermsController {\r\n    async handle(req: Request, res: Response){\r\n         const id_user_logged = req.user_id;\r\n\r\n        const {\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        } = req.body;\r\n\r\n        const AllowUpdateTerms = new AllowUpdateTermsService()\r\n        const responseAllowAccessUser = await AllowUpdateTerms.execute({\r\n            id_user_logged,\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        })\r\n\r\n        return res.status(responseAllowAccessUser.data.status).json(responseAllowAccessUser.data)\r\n    }\r\n}\r\n\r\n\r\nexport {AllowUpdateTermsController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","\r\nimport prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  id_user_logged: string;  \r\n  termsUsePlatform?: boolean | null\r\n  termsUseLGPD?: boolean | null\r\n  termsUsePark?: boolean | null\r\n  termsReceiptNews?: boolean | null;\r\n  termsPrivacyPolicy?: boolean | null\r\n}\r\n\r\nclass AllowUpdateTermsService {\r\n  async execute({\r\n    id_user_logged,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    termsReceiptNews\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor envie o id_user_logged do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, usuário responsável não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n      data: {\r\n        termsPrivacyPolicy: termsPrivacyPolicy !== null ? termsPrivacyPolicy : userLoggedExists.termsPrivacyPolicy,\r\n        termsUseLGPD: termsUseLGPD !== null ? termsUseLGPD : userLoggedExists.termsUseLGPD,\r\n        termsUsePlatform: termsUsePlatform !== null ? termsUsePlatform : userLoggedExists.termsUsePlatform,\r\n        termsReceiptNews: termsReceiptNews !== null ? termsReceiptNews: userLoggedExists.termsReceiptNews\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Termo(s) atualizado(s) com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowUpdateTermsService };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACQf,IAAM,0BAAN,MAA8B;AAAA,EACtB,QAAQ,IAMc;AAAA,+CANd;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAA4B;AAC1B,UAAI,CAAC,gBAAgB;AACnB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,mBAAmB,MAAM,eAAa,MAAM,UAAU;AAAA,QAC1D,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,UAAI,CAAC,kBAAkB;AACrB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,eAAa,MAAM,OAAO;AAAA,QAC9B,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,QACA,MAAM;AAAA,UACJ,oBAAoB,uBAAuB,OAAO,qBAAqB,iBAAiB;AAAA,UACxF,cAAc,iBAAiB,OAAO,eAAe,iBAAiB;AAAA,UACtE,kBAAkB,qBAAqB,OAAO,mBAAmB,iBAAiB;AAAA,UAClF,kBAAkB,qBAAqB,OAAO,mBAAkB,iBAAiB;AAAA,QACnF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA;AACF;;;AF7DA,IAAM,6BAAN,MAAiC;AAAA,EACvB,OAAO,KAAc,KAAc;AAAA;AACpC,YAAM,iBAAiB,IAAI;AAE5B,YAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,IAAI,IAAI;AAER,YAAM,mBAAmB,IAAI,wBAAwB;AACrD,YAAM,0BAA0B,MAAM,iBAAiB,QAAQ;AAAA,QAC3D;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAED,aAAO,IAAI,OAAO,wBAAwB,KAAK,MAAM,EAAE,KAAK,wBAAwB,IAAI;AAAA,IAC5F;AAAA;AACJ;","names":[]}