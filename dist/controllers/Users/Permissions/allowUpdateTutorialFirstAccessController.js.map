{"version":3,"sources":["../../../../src/controllers/Users/Permissions/allowUpdateTutorialFirstAccessController.ts","../../../../src/prisma/index.ts","../../../../src/services/Users/Permissions/allowUpdateTutorialFirstAccessService.ts"],"sourcesContent":["import { Request, Response} from 'express'\r\nimport { AllowUpdateTutorialFirstAccessService } from '../../../services/Users/Permissions/allowUpdateTutorialFirstAccessService';\r\n\r\n\r\nclass AllowUpdateTutorialFirstAccessController {\r\n    async handle(req: Request, res: Response){\r\n         const id_user_logged = req.user_id;\r\n\r\n        const {\r\n            tutorialFirstAccess\r\n        } = req.body;\r\n\r\n        const allowUpdateTutorialFirstAccess = new AllowUpdateTutorialFirstAccessService()\r\n        const responseAllowUpdateTutorialFirstAccess = await allowUpdateTutorialFirstAccess.execute({\r\n            id_user_logged,\r\n            tutorialFirstAccess\r\n        })\r\n\r\n        return res.status(responseAllowUpdateTutorialFirstAccess.data.status).json(responseAllowUpdateTutorialFirstAccess.data)\r\n    }\r\n}\r\n\r\n\r\nexport {AllowUpdateTutorialFirstAccessController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  id_user_logged: string;\r\n  tutorialFirstAccess?: boolean | null;\r\n}\r\n\r\nclass AllowUpdateTutorialFirstAccessService {\r\n  async execute({\r\n    id_user_logged,\r\n    tutorialFirstAccess\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor envie o id_user_logged do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, usuário responsável não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n      data: {\r\n        tutorialFirstAccess: tutorialFirstAccess\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Tutorial de primeiro acesso atualizado com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowUpdateTutorialFirstAccessService };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACGf,IAAM,wCAAN,MAA4C;AAAA,EACpC,QAAQ,IAGc;AAAA,+CAHd;AAAA,MACZ;AAAA,MACA;AAAA,IACF,GAA4B;AAC1B,UAAI,CAAC,gBAAgB;AACnB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAGA,YAAM,mBAAmB,MAAM,eAAa,MAAM,UAAU;AAAA,QAC1D,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,UAAI,CAAC,kBAAkB;AACrB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,eAAa,MAAM,OAAO;AAAA,QAC9B,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA;AACF;;;AFnDA,IAAM,2CAAN,MAA+C;AAAA,EACrC,OAAO,KAAc,KAAc;AAAA;AACpC,YAAM,iBAAiB,IAAI;AAE5B,YAAM;AAAA,QACF;AAAA,MACJ,IAAI,IAAI;AAER,YAAM,iCAAiC,IAAI,sCAAsC;AACjF,YAAM,yCAAyC,MAAM,+BAA+B,QAAQ;AAAA,QACxF;AAAA,QACA;AAAA,MACJ,CAAC;AAED,aAAO,IAAI,OAAO,uCAAuC,KAAK,MAAM,EAAE,KAAK,uCAAuC,IAAI;AAAA,IAC1H;AAAA;AACJ;","names":[]}