{"version":3,"sources":["../../../src/controllers/Users/usersGetDetailsController.ts","../../../src/prisma/index.ts","../../../src/utils/formatters/formatterCEP.ts","../../../src/utils/formatters/formatterCNPJ.ts","../../../src/utils/formatters/formatterCPF.ts","../../../src/utils/formatters/formatterDate.ts","../../../src/services/Users/usersGetDetailsService.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { UsersGetDetailsService } from \"../../services/Users/usersGetDetailsService\";\r\n\r\nclass UsersGetDetailsController {\r\n  async handle(req: Request, res: Response) {\r\n    const idUserLogged = req.user_id;\r\n    const { id } = req.params;\r\n\r\n    const usersGetDetails = new UsersGetDetailsService();\r\n\r\n    const responseUsersGetDetails = await usersGetDetails.execute({\r\n      id: id,\r\n      idUserLogged: idUserLogged,\r\n    });\r\n\r\n    return res.status(responseUsersGetDetails?.data?.status).json(responseUsersGetDetails.data);\r\n  }\r\n}\r\n\r\nexport { UsersGetDetailsController };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","export const formatterCEP = (cep: string) => {\r\n    if(cep){\r\n        const cleanedCEP = cep.replace(/\\D/g, '');\r\n        /*\r\n         if (cleanedCEP.length !== 8) {\r\n            throw new Error('CEP inválido. Deve conter 8 dígitos.');\r\n        }\r\n    \r\n        */\r\n        const formattedCEP = cleanedCEP.replace(/(\\d{5})(\\d{3})/, '$1-$2');\r\n    \r\n        return formattedCEP;\r\n    }\r\n\r\n    return null\r\n   \r\n};","\r\n\r\n\r\n\r\nexport const formatterCNPJ = (cnpj: string) => {\r\n  const cleanedCNPJ = cnpj.replace(/\\D/g, '');  \r\n\r\n  const formattedCNPJ = cleanedCNPJ.replace(/^(\\d{2})(\\d)/, '$1.$2')\r\n                                   .replace(/^(\\d{2})\\.(\\d{3})(\\d)/, '$1.$2.$3')\r\n                                   .replace(/\\.(\\d{3})(\\d)/, '.$1/$2')\r\n                                   .replace(/(\\d{4})(\\d{2})$/, '$1-$2');\r\n\r\n  return formattedCNPJ;\r\n};\r\n","export const formatterCPF = (cpf: string) => {\r\n    const cleanedCPF = cpf.replace(/\\D/g, '');\r\n\r\n\r\n    /*\r\n      if (cleanedCPF.length !== 11) {\r\n        throw new Error('CPF inválido. Deve conter 11 dígitos.');\r\n       }\r\n\r\n    */\r\n\r\n    const formattedCPF = cleanedCPF.replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\r\n\r\n    return formattedCPF;\r\n};\r\n","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { formatterCEP } from \"../../utils/formatters/formatterCEP\";\r\nimport { formatterCNPJ } from \"../../utils/formatters/formatterCNPJ\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\n\r\ninterface IUsersGetDetailsService {\r\n  id: string;\r\n  idUserLogged: string;\r\n}\r\n\r\nclass UsersGetDetailsService {\r\n  async execute({ id, idUserLogged }: IUsersGetDetailsService) {\r\n\r\n    if (!id) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível realizar esta ação, por favor informe o (id) do usuário.\",\r\n            status: 400,\r\n          },\r\n         \r\n        };\r\n    }\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n        where: { id: idUserLogged },\r\n        select: {\r\n            id: true,\r\n            name: true,\r\n            companyName: true,\r\n            email: true,\r\n            phone: true,\r\n            cpfCnpj: true,\r\n            birthDate: true,\r\n            gender: true,\r\n            city: true,\r\n            neighborhood: true, \r\n            cep: true,\r\n            number_address: true,\r\n            region_code: true,\r\n            typeAccess: true,\r\n      \r\n            status: true, \r\n            created_At: true\r\n        }\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n                status: 404,  \r\n            },\r\n         \r\n        };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n        where: {  \r\n         id: {\r\n           contains: id,\r\n         }, \r\n       },\r\n        select: {\r\n            id: true,\r\n            name: true,\r\n            companyName: true,\r\n            email: true,\r\n            cpfCnpj: true,\r\n            birthDate: true,\r\n            phone: true,\r\n            gender: true,\r\n            \r\n            city: true,\r\n            neighborhood: true, \r\n            cep: true,\r\n            number_address: true,\r\n            region_code: true,\r\n            street: true,\r\n            complement: true,\r\n\r\n            typeAccess: true,\r\n            typePerson: true,\r\n\r\n            profileAvatar: true,\r\n            profileSocialUrl: true,\r\n\r\n            termsUsePlatform: true,\r\n            termsUseLGPD: true,\r\n            termsPrivacyPolicy: true,\r\n            termsReceiptNews: true,\r\n            registeredBy: true, \r\n            typeAccessRegisteredBy: true,\r\n\r\n            cpfRegisteredBy: true,\r\n            dateRegisteredBy: true,\r\n\r\n            editedBy: true,\r\n            typeAccessEditedBy: true, \r\n            cpfEditedBy: true, \r\n            dateEditedBy: true, \r\n            \r\n            tutorialFirstAccess: true,\r\n            status: true, \r\n            created_At: true,\r\n            \r\n\r\n        },\r\n    });\r\n\r\n    if (!userExists) {\r\n        return {\r\n            data: {\r\n              message: \"Não foi possível realizar esta ação, o usuário não existe.\",\r\n            },\r\n            status: 404,\r\n        };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Admin) {\r\n        return {\r\n            data: {\r\n                message: \"Acesso negado. Administradores não podem visualizar dados de contas master.\",\r\n                status: 403,\r\n            },\r\n        };\r\n    }\r\n\r\n    return {\r\n        data: {\r\n            items: {\r\n                ...userExists,\r\n                cpfCnpj: userExists.typePerson === TypePerson.Fisic \r\n                 ? formatterCPF(userExists.cpfCnpj) \r\n                 : formatterCNPJ(userExists.cpfCnpj),\r\n                cep: formatterCEP(userExists.cep),\r\n                birthDate: formatterDateToIso(userExists.birthDate),\r\n            },\r\n            status: 200,\r\n        },\r\n   \r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport { UsersGetDetailsService };\r\n"],"mappings":"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","names":[]}