{"version":3,"sources":["../../../src/controllers/Categories/categoriesGetDetailsController.ts","../../../src/prisma/index.ts","../../../src/services/Categories/categoriesGetDetailsService.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { CategoriesGetDetailsService,  } from \"../../services/Categories/categoriesGetDetailsService\";\r\n\r\n\r\nclass CategoriesGetDetailsController {\r\n    async handle(req: Request, res: Response){\r\n         const {id} = req.params\r\n\r\n         const categoriesGetDetails = new CategoriesGetDetailsService()\r\n         const responseCategoriesGetDetails = await categoriesGetDetails.execute({id})\r\n\r\n         return res.status(responseCategoriesGetDetails.data.status).json(responseCategoriesGetDetails.data)\r\n        \r\n        }\r\n    \r\n}\r\n\r\n\r\nexport {CategoriesGetDetailsController}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ICategoriesGetDetailsService {\r\n    id: string\r\n    idUserOwner?: string | null\r\n}\r\n\r\nclass CategoriesGetDetailsService {\r\n    async execute({\r\n        id,\r\n        idUserOwner\r\n    }: ICategoriesGetDetailsService){\r\n        try {   \r\n\r\n            if(!id){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id da categoria para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!idUserOwner){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id do responsável para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            const userExists = await prismaClient.users.findFirst({\r\n                where: {\r\n                    id: idUserOwner\r\n                }\r\n            })\r\n    \r\n            const categoryExists = await prismaClient.categories.findFirst({\r\n                where: {\r\n                    id: id,\r\n                    idUserOwner: idUserOwner\r\n                }\r\n            })\r\n    \r\n            if(!userExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, esse usuário responsável não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!categoryExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, essa categoria não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return {\r\n                data: {\r\n                    item: categoryExists,\r\n                    status: 200\r\n                }\r\n            }\r\n\r\n        } catch(err){\r\n           return {\r\n            data: {\r\n              message: `${MessagesError.GetDetailsMessageError} ${err}`,\r\n              status: 500,\r\n            },\r\n          };\r\n        }\r\n      \r\n       \r\n    }\r\n}\r\n\r\nexport {CategoriesGetDetailsService}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACIf,IAAM,8BAAN,MAAkC;AAAA,EACxB,QAAQ,IAGkB;AAAA,+CAHlB;AAAA,MACV;AAAA,MACA;AAAA,IACJ,GAAgC;AAC5B,UAAI;AAEA,YAAG,CAAC,IAAG;AACH,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,YAAG,CAAC,aAAY;AACZ,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,cAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,UAClD,OAAO;AAAA,YACH,IAAI;AAAA,UACR;AAAA,QACJ,CAAC;AAED,cAAM,iBAAiB,MAAM,eAAa,WAAW,UAAU;AAAA,UAC3D,OAAO;AAAA,YACH;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,CAAC;AAED,YAAG,CAAC,YAAW;AACX,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,YAAG,CAAC,gBAAe;AACf,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO;AAAA,UACH,MAAM;AAAA,YACF,MAAM;AAAA,YACN,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MAEJ,SAAQ,KAAI;AACT,eAAO;AAAA,UACN,MAAM;AAAA,YACJ,SAAS,oFAAuC,IAAI,GAAG;AAAA,YACvD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IAGJ;AAAA;AACJ;;;AF9EA,IAAM,iCAAN,MAAqC;AAAA,EAC3B,OAAO,KAAc,KAAc;AAAA;AACpC,YAAM,EAAC,GAAE,IAAI,IAAI;AAEjB,YAAM,uBAAuB,IAAI,4BAA4B;AAC7D,YAAM,+BAA+B,MAAM,qBAAqB,QAAQ,EAAC,GAAE,CAAC;AAE5E,aAAO,IAAI,OAAO,6BAA6B,KAAK,MAAM,EAAE,KAAK,6BAA6B,IAAI;AAAA,IAEnG;AAAA;AAER;","names":[]}