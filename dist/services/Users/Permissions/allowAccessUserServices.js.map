{"version":3,"sources":["../../../../src/services/Users/Permissions/allowAccessUserServices.ts","../../../../src/prisma/index.ts"],"sourcesContent":["import { TypesAccess } from \"../../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  cpfCnpj: string;\r\n  id_user_logged: string;\r\n  typeAccess?: string | null;\r\n}\r\n\r\nclass AllowAccessUserService {\r\n  async execute({\r\n    cpfCnpj,\r\n    id_user_logged,\r\n    typeAccess,\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, por favor envie o id do responsável pela alteração\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!cpfCnpj) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, por favor envie o CPF ou CNPJ do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      typeAccess !== TypesAccess.Owner &&\r\n      typeAccess !== TypesAccess.Developer &&\r\n      typeAccess !== TypesAccess.Master &&\r\n      typeAccess !== TypesAccess.Admin &&\r\n      typeAccess !== TypesAccess.Promoter &&\r\n      typeAccess !== TypesAccess.User\r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, tipo de acesso não reconhecido pelo sistema.\",\r\n          typesAccessAccepts: [\r\n            TypesAccess.Owner,\r\n            TypesAccess.Developer,\r\n            TypesAccess.Master,\r\n            TypesAccess.Admin,\r\n            TypesAccess.Promoter,\r\n            TypesAccess.User,\r\n          \r\n          ],\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        cpfCnpj: cpfCnpj,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, usuário responsavel não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, usuário não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userLoggedExists?.typeAccess !== TypesAccess.Owner &&\r\n      userLoggedExists?.typeAccess !== TypesAccess.Developer &&\r\n      userLoggedExists.typeAccess !== TypesAccess.Master \r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Você não tem permissão de autorização para esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (userExists.id === id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não é possível alterar o próprio tipo de acesso, para está ação entre em contato com o suporte\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: userExists.id,\r\n      },\r\n      data: {\r\n        typeAccess: typeAccess ? typeAccess : TypesAccess.User,\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Permissão de autorizações alteradas com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowAccessUserService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADKf,IAAM,yBAAN,MAA6B;AAAA,EACrB,QAAQ,IAIc;AAAA,+CAJd;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAA4B;AAC1B,UAAI,CAAC,gBAAgB;AACnB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UACE,sCACA,8CACA,wCACA,sCACA,4CACA,oCACA;AACA,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQpB;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,mBAAmB,MAAM,eAAa,MAAM,UAAU;AAAA,QAC1D,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,kBAAkB;AACrB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,WACE,qDAAkB,wCAClB,qDAAkB,+CAClB,iBAAiB,sCACjB;AACA,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,WAAW,OAAO,gBAAgB;AACpC,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,eAAa,MAAM,OAAO;AAAA,QAC9B,OAAO;AAAA,UACL,IAAI,WAAW;AAAA,QACjB;AAAA,QACA,MAAM;AAAA,UACJ,YAAY,aAAa;AAAA,QAC3B;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}