{"version":3,"sources":["../../../src/services/Users/usersDeleteService.ts","../../../src/prisma/index.ts","../../../src/utils/validators/validatorPermissions.ts"],"sourcesContent":["import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\n\r\ninterface IUsersDeleteService {\r\n  id: string;\r\n  id_user_logged: string;\r\n}\r\n\r\nclass UsersDeleteService {\r\n  async execute({ id, id_user_logged }: IUsersDeleteService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor informe o (id) do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: id },\r\n    });\r\n\r\n    const responsePermission = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess,\r\n    });\r\n\r\n    if (!responsePermission) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta não possui permissão para realizar esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível deletar, o usuário não existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userExists.id === id_user_logged &&\r\n      userExistsLogged.typeAccess === TypesAccess.Admin\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não é possível como administrador deletar a própria conta, está ação está disponível somente para contas master\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n    \r\n    await prismaClient.$transaction(async (tx) => {\r\n      if (userExists.typeAccess === TypesAccess.Promoter) {\r\n        await tx.coupon.updateMany({\r\n          where: { idPromoter: id },\r\n          data: { idPromoter: null, commissionPromoter: null },\r\n        });\r\n      }\r\n\r\n      await tx.couponUsage.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.coupon.deleteMany({\r\n        where: { idUserOwner: id },\r\n      });\r\n\r\n      await tx.couponUsage.deleteMany({ where: { idUserOwner: id } });\r\n\r\n      await tx.events.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.methodsPayments.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.typesCommercials.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.typesProducts.deleteMany({ where: { idUserOwner: id } });\r\n\r\n      await tx.users.delete({ where: { id: id } });\r\n\r\n      await tx.categories.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.commercials.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.purchases.deleteMany({ where: { idUser: id } });\r\n      await tx.bin.deleteMany({ where: { idUserOwner: id } });\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Usuário deletado com sucesso!\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersDeleteService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\n\r\ninterface IValidatorPermissions {\r\n    typeAccess: string,\r\n}\r\n\r\n\r\nexport const validatorPermissions = ({typeAccess}: IValidatorPermissions) => {\r\n  return (typeAccess === TypesAccess.Owner || typeAccess === TypesAccess.Developer || typeAccess === TypesAccess.Master || typeAccess === TypesAccess.Admin)\r\n \r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACGR,IAAM,uBAAuB,CAAC,EAAC,WAAU,MAA6B;AAC3E,SAAQ,sCAAoC,8CAAwC,wCAAqC;AAE3H;;;AFDA,IAAM,qBAAN,MAAyB;AAAA,EACjB,QAAQ,IAA6C;AAAA,+CAA7C,EAAE,IAAI,eAAe,GAAwB;AACzD,UAAI,CAAC,IAAI;AACP,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,mBAAmB,MAAM,eAAa,MAAM,UAAU;AAAA,QAC1D,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO,EAAE,GAAO;AAAA,MAClB,CAAC;AAED,YAAM,qBAAqB,qBAAqB;AAAA,QAC9C,YAAY,iBAAiB;AAAA,MAC/B,CAAC;AAED,UAAI,CAAC,oBAAoB;AACvB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UACE,WAAW,OAAO,kBAClB,iBAAiB,oCACjB;AACA,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,eAAa,aAAa,CAAO,OAAO;AAC5C,YAAI,WAAW,0CAAqC;AAClD,gBAAM,GAAG,OAAO,WAAW;AAAA,YACzB,OAAO,EAAE,YAAY,GAAG;AAAA,YACxB,MAAM,EAAE,YAAY,MAAM,oBAAoB,KAAK;AAAA,UACrD,CAAC;AAAA,QACH;AAEA,cAAM,GAAG,YAAY,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAC9D,cAAM,GAAG,OAAO,WAAW;AAAA,UACzB,OAAO,EAAE,aAAa,GAAG;AAAA,QAC3B,CAAC;AAED,cAAM,GAAG,YAAY,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAE9D,cAAM,GAAG,OAAO,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AACzD,cAAM,GAAG,gBAAgB,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAClE,cAAM,GAAG,iBAAiB,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AACnE,cAAM,GAAG,cAAc,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAEhE,cAAM,GAAG,MAAM,OAAO,EAAE,OAAO,EAAE,GAAO,EAAE,CAAC;AAE3C,cAAM,GAAG,WAAW,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAC7D,cAAM,GAAG,YAAY,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAC9D,cAAM,GAAG,UAAU,WAAW,EAAE,OAAO,EAAE,QAAQ,GAAG,EAAE,CAAC;AACvD,cAAM,GAAG,IAAI,WAAW,EAAE,OAAO,EAAE,aAAa,GAAG,EAAE,CAAC;AAAA,MACxD,EAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}