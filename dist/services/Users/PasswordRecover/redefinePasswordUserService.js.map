{"version":3,"sources":["../../../../src/services/Users/PasswordRecover/redefinePasswordUserService.ts","../../../../src/prisma/index.ts"],"sourcesContent":["import jsonwebtoken from \"jsonwebtoken\";\r\nimport prismaClient from \"../../../prisma\";\r\nimport { hash } from \"bcryptjs\";\r\ninterface IRefinePasswordService {\r\n  tokenPassword: string;\r\n  newPassword: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nclass RedefinePasswordService {\r\n  async execute({ tokenPassword, newPassword,confirmPassword }: IRefinePasswordService) {\r\n    if (!tokenPassword) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Por favor informe o token de recuperação de senha enviado no seu email\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n    if (!newPassword) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor informe sua nova senha para prosseguir.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if(newPassword.length < 8 ){\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    \r\n    if(newPassword.length > 14 ){\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if(newPassword !== confirmPassword ){\r\n      return {\r\n        data: {\r\n          message: \"As credenciais informadas não coincidem. Confirme a senha corretamente para continuar\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n    \r\n    try {\r\n      const decoded = jsonwebtoken.verify(\r\n        tokenPassword,\r\n        process.env.JWT_SECRET\r\n      );\r\n      const { userId } = decoded as { userId: string };\r\n\r\n      const userExists = await prismaClient.users.findFirst({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      });\r\n\r\n      if (!userExists) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com a ação, dados do token inválidos.\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      const newPasswordHash = await hash(newPassword, 8);\r\n\r\n      await prismaClient.users.update({\r\n        where: {\r\n          id: userExists.id,\r\n        },\r\n        data: {\r\n          password: newPasswordHash,\r\n        },\r\n      });\r\n      \r\n      return {\r\n        data: {\r\n          message: \"Sua senha foi redefinida com sucesso\",\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      if (err.name === \"TokenExpiredError\") {\r\n        return {\r\n          data: {\r\n            message: \"Link para redefinição de senha expirado (token).\",\r\n            status: 401,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        data: {\r\n          message: \"Erro ao redefinir senha\",\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { RedefinePasswordService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAyB;;;ACAzB,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADFf,sBAAqB;AAOrB,IAAM,0BAAN,MAA8B;AAAA,EACtB,QAAQ,IAAwE;AAAA,+CAAxE,EAAE,eAAe,aAAY,gBAAgB,GAA2B;AACpF,UAAI,CAAC,eAAe;AAClB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AACA,UAAI,CAAC,aAAa;AAChB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAG,YAAY,SAAS,GAAG;AACzB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAGA,UAAG,YAAY,SAAS,IAAI;AAC1B,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAG,gBAAgB,iBAAiB;AAClC,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AACF,cAAM,UAAU,oBAAAA,QAAa;AAAA,UAC3B;AAAA,UACA,QAAQ,IAAI;AAAA,QACd;AACA,cAAM,EAAE,OAAO,IAAI;AAEnB,cAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,UACpD,OAAO;AAAA,YACL,IAAI;AAAA,UACN;AAAA,QACF,CAAC;AAED,YAAI,CAAC,YAAY;AACf,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SACE;AAAA,cACF,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAEA,cAAM,kBAAkB,UAAM,sBAAK,aAAa,CAAC;AAEjD,cAAM,eAAa,MAAM,OAAO;AAAA,UAC9B,OAAO;AAAA,YACL,IAAI,WAAW;AAAA,UACjB;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AAAA,UACZ;AAAA,QACF,CAAC;AAED,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,SAAS,KAAK;AACZ,YAAI,IAAI,SAAS,qBAAqB;AACpC,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SAAS;AAAA,cACT,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":["jsonwebtoken"]}