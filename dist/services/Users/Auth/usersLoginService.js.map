{"version":3,"sources":["../../../../src/services/Users/Auth/usersLoginService.ts","../../../../src/prisma/index.ts"],"sourcesContent":["import prismaClient from \"../../../prisma\";\r\nimport { compare } from \"bcryptjs\";\r\nimport { sign } from \"jsonwebtoken\";\r\n\r\ninterface IUsersLoginService {\r\n  account: string;\r\n  password: string;\r\n}\r\n\r\nclass UsersLoginService {\r\n  async execute({ account, password }: IUsersLoginService) {\r\n    if (!account) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor, informe seu e-mail, CPF ou CNPJ para continuar.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!password) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor, informe sua senha para continuar.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const users = await prismaClient.users.findFirst({\r\n      where: {\r\n        OR: [\r\n          {\r\n            cpfCnpj: account,\r\n          },\r\n          {\r\n            email: account\r\n          },\r\n        ]\r\n    \r\n    \r\n      },\r\n    });\r\n\r\n    if (!users) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir, este E-mail, CPF ou CNPJ não existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const verifyPassword = await compare(password, users.password);\r\n\r\n    if (!verifyPassword) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir, sua senha está incorreta.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    const token = sign(\r\n      {\r\n        id: users.id,\r\n        name: users.name,\r\n        password: users.password,\r\n      },\r\n      process.env.JWT_SECRET,\r\n      {\r\n        subject: users.id,\r\n        expiresIn: \"30d\",\r\n      }\r\n    );\r\n\r\n    return {\r\n      data: {\r\n        message: `Bem Vindo ${users.name.split(\" \")[0].charAt(0).toUpperCase()}${users.name.split(\" \")[0].slice(1).toLocaleLowerCase()}`,\r\n        token: token,\r\n        status: 200\r\n      }\r\n\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersLoginService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADHf,sBAAwB;AACxB,0BAAqB;AAOrB,IAAM,oBAAN,MAAwB;AAAA,EAChB,QAAQ,IAA2C;AAAA,+CAA3C,EAAE,SAAS,SAAS,GAAuB;AACvD,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,UAAU;AACb,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,QAAQ,MAAM,eAAa,MAAM,UAAU;AAAA,QAC/C,OAAO;AAAA,UACL,IAAI;AAAA,YACF;AAAA,cACE,SAAS;AAAA,YACX;AAAA,YACA;AAAA,cACE,OAAO;AAAA,YACT;AAAA,UACF;AAAA,QAGF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,OAAO;AACV,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SACE;AAAA,YACF,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,iBAAiB,UAAM,yBAAQ,UAAU,MAAM,QAAQ;AAE7D,UAAI,CAAC,gBAAgB;AACnB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,YAAM,YAAQ;AAAA,QACZ;AAAA,UACE,IAAI,MAAM;AAAA,UACV,MAAM,MAAM;AAAA,UACZ,UAAU,MAAM;AAAA,QAClB;AAAA,QACA,QAAQ,IAAI;AAAA,QACZ;AAAA,UACE,SAAS,MAAM;AAAA,UACf,WAAW;AAAA,QACb;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,UACJ,SAAS,aAAa,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE,YAAY,CAAC,GAAG,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,kBAAkB,CAAC;AAAA,UAC9H;AAAA,UACA,QAAQ;AAAA,QACV;AAAA,MAEF;AAAA,IACF;AAAA;AACF;","names":[]}