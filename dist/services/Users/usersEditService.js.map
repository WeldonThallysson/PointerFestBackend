{"version":3,"sources":["../../../src/services/Users/usersEditService.ts","../../../src/utils/desformatter/index.ts","../../../src/utils/formatters/formatterDate.ts","../../../src/utils/formatters/formatterToday.ts","../../../src/utils/validators/validatorPermissions.ts","../../../src/prisma/index.ts","../../../src/utils/validators/validatorAge.ts","../../../src/utils/validators/validatorCNPJ.ts","../../../src/utils/validators/validatorCPF.ts","../../../src/utils/validators/validatorDate.ts","../../../src/utils/validators/validatorEmail.ts","../../../src/utils/validators/validatorFieldsEmpty.ts","../../../src/utils/validators/validatorPhone.ts","../../../src/utils/validationsServices/validationsUserService.ts"],"sourcesContent":["import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { deformatter } from \"../../utils/desformatter\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\nimport { todayWithTime } from \"../../utils/formatters/formatterToday\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\nimport { hash } from \"bcryptjs\";\r\n\r\nimport prismaClient from \"../../prisma\";\r\nimport { v2 as cloudinary, UploadApiResponse } from \"cloudinary\";\r\n\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport { validationsUserService } from \"../../utils/validationsServices/validationsUserService\";\r\n\r\ninterface IEditUserService {\r\n  id: string;\r\n  id_user_logged: string;\r\n\r\n  email: string;\r\n  password: string;\r\n  cpfCnpj: string;\r\n  name?: string | null;\r\n  companyName?: string | null;\r\n  complement?: string | null;\r\n  typePerson?: TypePerson | null;\r\n  phone?: string | null;\r\n  birthDate?: string | null;\r\n  residence?: string | null;\r\n  neighborhood?: string | null;\r\n  address?: string | null;\r\n  city?: string | null;\r\n  gender?: string | null;\r\n  cep?: string | null;\r\n  profileSocialUrl?: string | null;\r\n  number_address?: string | null;\r\n  region_code?: string | null;\r\n  street?: string | null;\r\n  status?: boolean;\r\n  profileAvatar?: UploadedFile | null;\r\n  typeAccess?: string | null;\r\n\r\n  termsReceiptNews?: boolean | null;\r\n  termsUsePlatform?: boolean | null;\r\n  termsUseLGPD?: boolean | null;\r\n  termsPrivacyPolicy?: boolean | null;\r\n}\r\n\r\nclass UsersEditService {\r\n  async execute({\r\n    id,\r\n    id_user_logged,\r\n    complement,\r\n    street,\r\n    termsReceiptNews,\r\n    typePerson,\r\n    name,\r\n    companyName,\r\n    email,\r\n    password,\r\n    cpfCnpj,\r\n    phone,\r\n    birthDate,\r\n    neighborhood,\r\n    profileSocialUrl,\r\n    profileAvatar,\r\n    city,\r\n    cep,\r\n    region_code,\r\n    number_address,\r\n    typeAccess,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    gender,\r\n    status,\r\n  }: IEditUserService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar está ação, por favor informe o (id) do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const verifyValidations = validationsUserService({\r\n      name,\r\n      companyName,\r\n      email,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      typePerson,\r\n      password: password ? password : null,\r\n    });\r\n\r\n    if (verifyValidations) {\r\n      return verifyValidations;\r\n    }\r\n\r\n    const isUserLogged = id === id_user_logged;\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: id },\r\n    });\r\n\r\n    const userEmailExists = await prismaClient.users.findFirst({\r\n      where: { email: email, NOT: { id: id } },\r\n    });\r\n\r\n    const userCPFOrCNPJExists = await prismaClient.users.findFirst({\r\n      where: { cpfCnpj: cpfCnpj, NOT: { id: id, cpfCnpj: cpfCnpj } },\r\n    });\r\n\r\n    const CPFOrCNPJ =\r\n      userCPFOrCNPJExists?.typePerson === TypePerson.Fisic ? \"CPF\" : \"CNPJ\";\r\n\r\n    const validationPermission = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess || \"\",\r\n    });\r\n\r\n    if (id !== id_user_logged && !validationPermission) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Sua conta não possui permissão para realizar esta ação, sua conta pode editar apenas o seus dados.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (userExists !== null && !userExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar o esta ação, o usuário não existe.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (email && userEmailExists) {\r\n      return {\r\n        data: {\r\n          message: `Não foi possível realizar está ação, esse e-mail está em uso.`,\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (cpfCnpj && userCPFOrCNPJExists) {\r\n      return {\r\n        data: {\r\n          message: `Não foi possível realizar está ação, esse ${CPFOrCNPJ} está em uso.`,\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length < 8) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length > 14) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    const todayAt = todayWithTime();\r\n\r\n    if (password && password?.length < 8) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter no mínimo 8 caracteres para garantir maior segurança.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length > 14) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      typeAccess &&\r\n      (userExistsLogged.typeAccess === TypesAccess.User ||\r\n        userExistsLogged.typeAccess === TypesAccess.Promoter ||\r\n        userExistsLogged.typeAccess === TypesAccess.Worker)\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, sua conta não tem permissão para alterar o status do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      (userExistsLogged.typeAccess === TypesAccess.User ||\r\n        userExistsLogged.typeAccess === TypesAccess.Promoter ||\r\n        userExistsLogged.typeAccess === TypesAccess.Worker)\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, sua conta não tem permissão para alterar o status do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      let idProfileAvatar = isUserLogged\r\n        ? userExistsLogged.idProfileAvatar\r\n        : userExists.idProfileAvatar;\r\n\r\n      const resultFile: UploadApiResponse = await new Promise(\r\n        (resolve, reject) => {\r\n          cloudinary.uploader\r\n            .upload_stream(\r\n              {\r\n                public_id: `users/${idProfileAvatar}`,\r\n                overwrite: true,\r\n                folder: \"users\",\r\n              },\r\n              (err, result) => {\r\n                if (err) {\r\n                  reject(err);\r\n                  return;\r\n                }\r\n                resolve(result);\r\n              }\r\n            )\r\n            .end(profileAvatar.data);\r\n        }\r\n      );\r\n\r\n      const profileAvatarUpdated = resultFile.secure_url;\r\n\r\n      const updateUser = async (\r\n        user: typeof userExistsLogged,\r\n        isLoggedUser = false\r\n      ) => {\r\n        return await prismaClient.users.update({\r\n          where: { id: isLoggedUser ? id_user_logged : id },\r\n          data: {\r\n            name: name ? name : null,\r\n            companyName: companyName !== null ? companyName : null,\r\n            email: email ? email : null,\r\n            password: password ? await hash(password, 8) : user.password,\r\n            cpfCnpj: cpfCnpj ? deformatter(cpfCnpj) : null,\r\n            phone: phone ? deformatter(phone) : null,\r\n            birthDate: birthDate ? formatterDateToIso(birthDate) : null,\r\n\r\n            street: street ? street : null,\r\n            complement: complement ? complement : null,\r\n            profileAvatar: profileAvatarUpdated, // Será atualizado pelo controller\r\n            profileSocialUrl: profileSocialUrl ? profileSocialUrl : null,\r\n            typePerson: typePerson ? typePerson : null,\r\n            neighborhood: neighborhood ? neighborhood : null,\r\n            city: city ? city : null,\r\n\r\n            gender: gender ? gender : null,\r\n            cep: cep ? deformatter(cep) : null,\r\n            region_code: region_code ? region_code : null,\r\n            number_address: number_address ? number_address : null,\r\n\r\n            typeAccess: typeAccess ? typeAccess : user.typeAccess,\r\n\r\n            termsUsePlatform:\r\n              termsUsePlatform !== null\r\n                ? termsUsePlatform\r\n                : user.termsUsePlatform,\r\n            termsUseLGPD:\r\n              termsUseLGPD !== null ? termsUseLGPD : user.termsUseLGPD,\r\n            termsReceiptNews:\r\n              termsReceiptNews !== null\r\n                ? termsReceiptNews\r\n                : user.termsReceiptNews,\r\n            termsPrivacyPolicy:\r\n              termsPrivacyPolicy !== null\r\n                ? termsPrivacyPolicy\r\n                : user.termsPrivacyPolicy,\r\n\r\n            status:\r\n              status !== null &&\r\n              userExistsLogged.typeAccess !== TypesAccess.User\r\n                ? status\r\n                : user.status,\r\n            updated_At: todayAt,\r\n\r\n            editedBy: userExistsLogged?.name ?? null,\r\n            typeAccessEditedBy: userExistsLogged?.typeAccess ?? null,\r\n            cpfEditedBy: userExistsLogged?.cpfCnpj ?? null,\r\n            dateEditedBy: todayAt ?? null,\r\n          },\r\n        });\r\n      };\r\n\r\n      if (isUserLogged) {\r\n        await updateUser(userExistsLogged, true);\r\n        return {\r\n          data: {\r\n            message: \"Sua conta foi atualizada com sucesso!\",\r\n            status: 200,\r\n          },\r\n        };\r\n      } else {\r\n        await updateUser(userExists);\r\n        return {\r\n          data: {\r\n            message: \"Usuário atualizado com sucesso!\",\r\n            status: 200,\r\n          },\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `Erro ao atualizar usuário: ${err.message}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { UsersEditService };\r\n","export const deformatter = (item: string) => {\r\n    \r\n    // Remove todos os caracteres não numéricos\r\n    return item.replace(/\\D/g, \"\");\r\n  };\r\n  ","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import {DateTime} from 'luxon'\r\n\r\nconst today = new Date();\r\n\r\nexport const todayFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n  })\r\n    .format(today)\r\n    .split(\"/\")\r\n    .reverse()\r\n    .join(\"-\"); // Converte para YYYY-MM-DD\r\n\r\n\r\nexport const todayFormattedWithTime = (dateNow: Date) => {\r\n  new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\", // Inclui as horas no formato de 2 dígitos\r\n    minute: \"2-digit\", // Inclui os minutos no formato de 2 dígitos\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n}).format(dateNow).replace(',', ''); // Remove a vírgula entre data e hora\r\n\r\n\r\n}\r\n  \r\n\r\nexport const todayFormattedWithTimeToIso = (dateNow: Date): string => {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\",\r\n    hour12: false, // Para garantir o formato 24h\r\n  };\r\n\r\n  // Obter a data e hora formatadas no padrão ISO customizado\r\n  const formatted = new Intl.DateTimeFormat(\"pt-BR\", options)\r\n    .format(dateNow)\r\n    .replace(',', ''); // Remove vírgula\r\n\r\n  // Converter \"DD/MM/AAAA HH:MM\" para \"AAAA-MM-DD HH:MM\"\r\n  const [date, time] = formatted.split(' ');\r\n  const [day, month, year] = date.split('/');\r\n  return `${year}-${month}-${day} ${time}`;\r\n};\r\n\r\n\r\n\r\nexport const todayWithTime = (): string => {\r\n\r\n  const now = DateTime.now().setZone('America/Sao_Paulo');\r\n  \r\n  \r\n  return now.toFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n};\r\n\r\n\r\nexport const todayWithTimeAtFormat = (date?: Date | null): string => {\r\n  if (!date) {\r\n    return \"\"; // Retorna uma string vazia se `date` for `null` ou `undefined`.\r\n  }\r\n\r\n  const isoString = date instanceof Date ? date.toISOString() : date; // Garante que seja uma string ISO\r\n  const [datePart, timePart] = isoString.split(\"T\"); // Divide a data em partes (data e hora)\r\n  const [year, month, day] = datePart.split(\"-\"); // Divide a parte da data (YYYY-MM-DD)\r\n  const [hours, minutes] = timePart.split(\":\"); // Divide a parte do tempo (HH:mm:ss)\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\n\r\ninterface IValidatorPermissions {\r\n    typeAccess: string,\r\n}\r\n\r\n\r\nexport const validatorPermissions = ({typeAccess}: IValidatorPermissions) => {\r\n  return (typeAccess === TypesAccess.Owner || typeAccess === TypesAccess.Developer || typeAccess === TypesAccess.Master || typeAccess === TypesAccess.Admin)\r\n \r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","export const validatorAge = (birthDate: string) => {\r\n    const today = new Date(); // Data atual\r\n    const birth = new Date(birthDate); // Data de nascimento do payload\r\n  \r\n    // Calcula a diferença de anos\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n  \r\n    // Ajusta a idade se o aniversário ainda não aconteceu este ano\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n  \r\n    return age < 18; // Retorna true se maior ou igual a 18, caso contrário false\r\n  };","\r\n\r\nexport const validatorCNPJ = (value: string) => {\r\n    const cnpjRegex = /^\\d{14}$/;\r\n    return cnpjRegex.test(value);\r\n};\r\n\r\n\r\n","\r\n\r\n\r\n\r\nexport const validatorCPF = (value:string) => {\r\n    const cpfRegex = /^\\d{11}$/;\r\n    const isCPF = cpfRegex.test(value)\r\n\r\n    return isCPF\r\n}\r\n","import { isValid, parseISO } from \"date-fns\";\r\n\r\nexport const validateBirthDate = (dateString: string) => {\r\n    const date = parseISO(dateString); \r\n    return isValid(date); \r\n  }\r\n  ","\r\n\r\nexport const validatorEmail = (value:string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const isEmail = emailRegex.test(value)\r\n\r\n    return isEmail\r\n}","\r\n\r\n\r\nexport const validatorFieldsEmpty = (...fields: (string | number | null)[]): boolean => {\r\n    return fields.some(field => !field ||  field === \"\" || field === null)\r\n}","export const isValidPhoneNumber = (phoneNumber: string) => {\r\n\r\n    const phoneRegex = /^(\\d{1,3})(\\d{1,4})(\\d{6,10})$/;\r\n\r\n    const match = phoneRegex.exec(phoneNumber);\r\n\r\n    if (!match) return false;\r\n\r\n    const countryCode = match[1]; \r\n    const areaCode = match[2];     \r\n    const number = match[3];      \r\n\r\n  \r\n    if (countryCode === '55') {\r\n      \r\n        const isValidBrazilAreaCode = areaCode.length >= 2 && areaCode.length <= 4;\r\n      \r\n        const isValidBrazilNumber = number.length >= 8 && number.length <= 9;\r\n\r\n        return isValidBrazilAreaCode && isValidBrazilNumber;\r\n    } else {\r\n    \r\n        const isValidAreaCode = areaCode.length >= 1 && areaCode.length <= 4;\r\n\r\n      \r\n        const isValidNumber = number.length >= 6 && number.length <= 10;\r\n\r\n        return isValidAreaCode && isValidNumber;\r\n    }\r\n}\r\n\r\n","import { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { validatorAge } from \"../validators/validatorAge\";\r\nimport { validatorCNPJ } from \"../validators/validatorCNPJ\";\r\nimport { validatorCPF } from \"../validators/validatorCPF\";\r\nimport { validateBirthDate } from \"../validators/validatorDate\";\r\nimport { validatorEmail } from \"../validators/validatorEmail\";\r\nimport { validatorFieldsEmpty } from \"../validators/validatorFieldsEmpty\";\r\nimport { isValidPhoneNumber } from \"../validators/validatorPhone\";\r\n\r\ninterface IParamsUserService {\r\n  name: string; // nome do cliente ou administrador\r\n  companyName?: string | null\r\n  email: string; // email\r\n  password?: string; // senha\r\n  cpfCnpj: string; // cpf\r\n  phone: string; // numero de telefone\r\n  birthDate?: string | null; // Data de nascimento\r\n  residence?: string; // casa ou detalhe da morada\r\n  neighborhood?: string; // bairro\r\n  address?: string; // endereço\r\n  city?: string; // cidade\r\n  cep?: string,\r\n  region_code?: string,\r\n  number_address?: string,\r\n  typePerson?: TypePerson,\r\n  gender?: string; // é o genero ele pode mandar masculino, feminino ou prefiro não dizer\r\n}\r\n\r\nexport const validationsUserService = ({\r\n  name,\r\n  companyName,\r\n  email,\r\n  cpfCnpj,\r\n  phone,\r\n  birthDate,\r\n  gender,\r\n  typePerson,\r\n  password\r\n}: IParamsUserService) => {\r\n\r\n  const validatorEmpty = validatorFieldsEmpty(\r\n    name,\r\n    email,\r\n    cpfCnpj,\r\n    phone,\r\n    gender,\r\n    typePerson\r\n  );\r\n\r\n  if (validatorEmpty) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha todos os campos obrigatórios.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        fields: ['name','email','cpf','phone','typePerson','gender'],\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if (!validatorEmail(email)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, E-mail inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if(!isValidPhoneNumber(phone)){\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Número de telefone inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length < 8 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length > 14 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (companyName && typePerson === TypePerson.Fisic) {\r\n    return {\r\n      data: {\r\n        message: \"Não é possível cadastrar um nome fantasia para pessoas físicas.\",\r\n        status: 400\r\n      }\r\n    }\r\n  }\r\n  \r\n  if(!companyName && typePerson === TypePerson.Juridic){\r\n     return {\r\n      data: {\r\n        message: \"Não é possível prosseguir. Por favor, informe o nome fantasia da sua empresa.\",\r\n        status: 400\r\n      }\r\n     }\r\n  }\r\n\r\n  if (typePerson !== TypePerson.Fisic && typePerson !== TypePerson.Juridic) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar esta ação, o tipo da pessoa deve ser Física ou Jurídica\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Fisic && !validatorCPF(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CPF inválido. Deve conter 11 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Juridic && !validatorCNPJ(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CNPJ inválido. Deve conter 14 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && birthDate === '') {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, é necessário informar sua data de nascimento !\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && !validateBirthDate(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, É necessário ter pelo menos 18 anos para se cadastrar!\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (birthDate && validatorAge(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A ação não pode ser realizada. É necessário ter pelo menos 18 anos para prosseguir.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n\r\n};\r\n"],"mappings":"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","names":["today","import_date_fns","cloudinary"]}