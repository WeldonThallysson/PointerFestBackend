{"version":3,"sources":["../../../src/services/Products/productEditService.ts","../../../src/prisma/index.ts","../../../src/utils/validationsServices/validationsProducts.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { todayWithTimeAtFormat } from \"../../utils/formatters/formatterToday\";\r\nimport { validationsProductsService } from \"../../utils/validationsServices/validationsProducts\";\r\n\r\n\r\ninterface IProductsEdit {\r\n    id: string\r\n    idCategory: string,\r\n    idTypeProduct:string\r\n    idUserOwner: string\r\n    name: string\r\n    description: string\r\n  \r\n    labelPrice: string // é a label que pode ir ao lado do preço se é a entrada,inteira,meia,promoção.\r\n    price: number\r\n  \r\n    expirationDate: string\r\n  \r\n    positionOrder: number\r\n  \r\n    available: boolean \r\n    allowAddCoupon: boolean \r\n  \r\n    status: boolean\r\n}\r\n \r\nclass ProductsEditService {\r\n  async execute ({ \r\n    id,\r\n   name,\r\n   allowAddCoupon,\r\n   available,\r\n   description,\r\n   expirationDate,\r\n   idCategory,\r\n   idTypeProduct,\r\n   idUserOwner,\r\n   labelPrice,\r\n   positionOrder,\r\n   price,\r\n   status\r\n  }: IProductsEdit) {\r\n\r\n      const validationsProducts = validationsProductsService({\r\n         name,\r\n         idUserOwner,\r\n         idCategory,\r\n         idTypeProduct,\r\n         description,\r\n         price,\r\n         allowAddCoupon,\r\n         available,\r\n      })\r\n\r\n      if(validationsProducts){\r\n         return validationsProducts\r\n      }\r\n\r\n      const productExists = await prismaClient.products.findFirst({\r\n         where: {\r\n            id: id\r\n         } \r\n      })\r\n\r\n      const categoryExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idCategory\r\n        } \r\n     })\r\n\r\n     const typesProductsExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idTypeProduct\r\n        } \r\n     })\r\n\r\n     const userExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idUserOwner\r\n        } \r\n     })\r\n      if(!productExists){\r\n         return {\r\n            data: {\r\n             status: 400,\r\n             message: \"Não foi possível prosseguir, esse produto não existe\"\r\n           }\r\n         }\r\n      }\r\n\r\n      if(!categoryExists){\r\n        return {\r\n          data: {\r\n           status: 400,\r\n           message: \"Não foi possível prosseguir, esse categoria não existe\"\r\n          }  \r\n         }\r\n     }\r\n     \r\n     if(!typesProductsExists){\r\n        return {\r\n          data: {\r\n           status: 400,\r\n           message: \"Não foi possível prosseguir, esse tipo do produto não existe\"\r\n          }\r\n         }\r\n     }\r\n\r\n     if(!userExists){\r\n        return {\r\n           data: {\r\n            status: 400,\r\n            message: \"Não foi possível prosseguir, esse usuário não existe\"\r\n           }\r\n         }\r\n     }\r\n \r\n      try {\r\n         \r\n         await prismaClient.products.update({\r\n            where: {\r\n                id: id\r\n            },\r\n            data: {\r\n               name: name,\r\n               allowAddCoupon: allowAddCoupon !== null ? allowAddCoupon : null,\r\n               available: available !== null ? available : null,\r\n               description: description,\r\n               expirationDate: expirationDate ? expirationDate : null,\r\n               idCategory: idCategory,\r\n               idTypeProduct: idTypeProduct,\r\n               idUserOwner: idUserOwner,\r\n               labelPrice: labelPrice, \r\n               positionOrder: positionOrder ? positionOrder : null,\r\n               price: price ? price : null,\r\n               status: status ? status : null\r\n            }\r\n         })  \r\n        \r\n         return {\r\n            data: {\r\n            status: 200,\r\n            message: Messages.UpdateMessageSuccess,\r\n         }    \r\n         }\r\n      } catch(err) {\r\n         return {\r\n          data: {\r\n            status: 500,\r\n            message:  `${MessagesError.UpdateMessageError} ${err}`,\r\n          } \r\n         }\r\n      }\r\n    \r\n  }\r\n}\r\n\r\n\r\nexport {ProductsEditService}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","\r\ninterface IParamsProductsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  description?: string | null, \r\n  idCategory: string,\r\n  idTypeProduct:string\r\n  price: number\r\n  allowAddCoupon: boolean\r\n  available: boolean\r\n}\r\n\r\n \r\nexport const validationsProductsService = ({\r\n  name,\r\n  idUserOwner,\r\n  description,\r\n  allowAddCoupon,\r\n  available,\r\n  idCategory,\r\n  idTypeProduct,\r\n  price\r\n}: IParamsProductsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!idCategory) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe a categoria do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  \r\n  if (!idTypeProduct) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o tipo do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (available === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se o produto está disponível para venda\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (allowAddCoupon === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se pode haver uso de cupom para os produtos\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do produto.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!description) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe a descrição do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!price) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe preço do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","names":[]}