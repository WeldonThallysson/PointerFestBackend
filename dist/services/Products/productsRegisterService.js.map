{"version":3,"sources":["../../../src/services/Products/productsRegisterService.ts","../../../src/prisma/index.ts","../../../src/utils/formatters/formatterToday.ts","../../../src/utils/validationsServices/validationsProducts.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { todayWithTimeAtFormat } from \"../../utils/formatters/formatterToday\";\r\nimport { validationsProductsService } from \"../../utils/validationsServices/validationsProducts\";\r\n\r\ninterface IProductRegister {\r\n  idCategory: string;\r\n  idTypeProduct: string;\r\n  idUserOwner: string;\r\n  name: string;\r\n  description: string;\r\n\r\n  labelPrice: string; // é a label que pode ir ao lado do preço se é a entrada,inteira,meia,promoção.\r\n  price: number;\r\n\r\n  expirationDate: string;\r\n\r\n  positionOrder: number;\r\n\r\n  available: boolean;\r\n  allowAddCoupon: boolean;\r\n}\r\n\r\nclass ProductsRegisterService {\r\n  async execute({\r\n    name,\r\n    allowAddCoupon,\r\n    available,\r\n    description,\r\n    expirationDate,\r\n    idCategory,\r\n    idTypeProduct,\r\n    idUserOwner,\r\n    labelPrice,\r\n    positionOrder,\r\n    price,\r\n  }: IProductRegister) {\r\n    const validationsProducts = validationsProductsService({\r\n      name,\r\n      idUserOwner,\r\n      idCategory,\r\n      idTypeProduct,\r\n      description,\r\n      price,\r\n      allowAddCoupon,\r\n      available,\r\n    });\r\n\r\n    if (validationsProducts) {\r\n      return validationsProducts;\r\n    }\r\n\r\n    const productExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n\r\n    if (productExists) {\r\n      return {\r\n         data: {\r\n            status: 400,\r\n            message: \"Não foi possível prosseguir, esse produto já existe\",\r\n         }\r\n    \r\n      };\r\n    }\r\n\r\n    const categoryExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idCategory,\r\n      },\r\n    });\r\n\r\n    const typesProductsExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idTypeProduct,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    if (!categoryExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message: \"Não foi possível prosseguir, esse categoria não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!typesProductsExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message:\r\n            \"Não foi possível prosseguir, esse tipo do produto não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message: \"Não foi possível prosseguir, esse usuário não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const todayAt = todayWithTimeAtFormat(new Date());\r\n      await prismaClient.products.create({\r\n        data: {\r\n          name: name,\r\n          allowAddCoupon: allowAddCoupon !== null ? allowAddCoupon : null,\r\n          available: available !== null ? available : null,\r\n          description: description,\r\n          expirationDate: expirationDate ? expirationDate : null,\r\n          idCategory: idCategory,\r\n          idTypeProduct: idTypeProduct,\r\n          idUserOwner: idUserOwner,\r\n          labelPrice: labelPrice,\r\n          dateRegistered: todayAt,\r\n          positionOrder: positionOrder ? positionOrder : null,\r\n          price: price ? price : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsRegisterService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import {DateTime} from 'luxon'\r\n\r\nconst today = new Date();\r\n\r\nexport const todayFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n  })\r\n    .format(today)\r\n    .split(\"/\")\r\n    .reverse()\r\n    .join(\"-\"); // Converte para YYYY-MM-DD\r\n\r\n\r\nexport const todayFormattedWithTime = (dateNow: Date) => {\r\n  new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\", // Inclui as horas no formato de 2 dígitos\r\n    minute: \"2-digit\", // Inclui os minutos no formato de 2 dígitos\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n}).format(dateNow).replace(',', ''); // Remove a vírgula entre data e hora\r\n\r\n\r\n}\r\n  \r\n\r\nexport const todayFormattedWithTimeToIso = (dateNow: Date): string => {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\",\r\n    hour12: false, // Para garantir o formato 24h\r\n  };\r\n\r\n  // Obter a data e hora formatadas no padrão ISO customizado\r\n  const formatted = new Intl.DateTimeFormat(\"pt-BR\", options)\r\n    .format(dateNow)\r\n    .replace(',', ''); // Remove vírgula\r\n\r\n  // Converter \"DD/MM/AAAA HH:MM\" para \"AAAA-MM-DD HH:MM\"\r\n  const [date, time] = formatted.split(' ');\r\n  const [day, month, year] = date.split('/');\r\n  return `${year}-${month}-${day} ${time}`;\r\n};\r\n\r\n\r\n\r\nexport const todayWithTime = (): string => {\r\n\r\n  const now = DateTime.now().setZone('America/Sao_Paulo');\r\n  \r\n  \r\n  return now.toFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n};\r\n\r\n\r\nexport const todayWithTimeAtFormat = (date?: Date | null): string => {\r\n  if (!date) {\r\n    return \"\"; // Retorna uma string vazia se `date` for `null` ou `undefined`.\r\n  }\r\n\r\n  const isoString = date instanceof Date ? date.toISOString() : date; // Garante que seja uma string ISO\r\n  const [datePart, timePart] = isoString.split(\"T\"); // Divide a data em partes (data e hora)\r\n  const [year, month, day] = datePart.split(\"-\"); // Divide a parte da data (YYYY-MM-DD)\r\n  const [hours, minutes] = timePart.split(\":\"); // Divide a parte do tempo (HH:mm:ss)\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};","\r\ninterface IParamsProductsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  description?: string | null, \r\n  idCategory: string,\r\n  idTypeProduct:string\r\n  price: number\r\n  allowAddCoupon: boolean\r\n  available: boolean\r\n}\r\n\r\n \r\nexport const validationsProductsService = ({\r\n  name,\r\n  idUserOwner,\r\n  description,\r\n  allowAddCoupon,\r\n  available,\r\n  idCategory,\r\n  idTypeProduct,\r\n  price\r\n}: IParamsProductsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!idCategory) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe a categoria do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  \r\n  if (!idTypeProduct) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o tipo do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (available === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se o produto está disponível para venda\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (allowAddCoupon === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se pode haver uso de cupom para os produtos\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do produto.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!description) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe a descrição do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!price) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe preço do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","names":[]}