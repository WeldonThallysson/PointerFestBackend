{"version":3,"sources":["../../../src/services/Products/productsDeleteService.ts","../../../src/prisma/index.ts","../../../src/services/Bin/binRegisterMoveItemsService.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { BinRegisterMoveItemsService } from \"../Bin/binRegisterMoveItemsService\";\r\n\r\ninterface IProductsDeleteService {\r\n  id: string;\r\n  idUserOwner: string;\r\n}\r\n\r\nclass ProductsDeleteService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n  }: IProductsDeleteService) {\r\n    if(!id){\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível prosseguir com esta ação, por favor envio o id do comercial para prosseguir\",\r\n                status: 403,\r\n            },\r\n        }\r\n    }\r\n\r\n    if(!idUserOwner){\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível prosseguir com esta ação, por favor envie o id do responsável\",\r\n                status: 403,\r\n            },\r\n        }\r\n    }\r\n  \r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n\r\n    const commercialsExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        id: id,\r\n        idUserOwner: idUserOwner,\r\n      }\r\n    });\r\n\r\n    if (!commercialsExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, este produto não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n\r\n      const binRegisterItemsService = new BinRegisterMoveItemsService() \r\n\r\n      const responseDelete = await binRegisterItemsService.execute({\r\n          id: id,\r\n          tableName: \"commercials\",\r\n          idUserOwner: commercialsExists.idUserOwner\r\n      })  \r\n\r\n      return {\r\n          data: {\r\n              message: responseDelete.data.message,\r\n              status: responseDelete.data.status\r\n          }\r\n      }   \r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.DeleteMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsDeleteService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../prisma\";\r\n\r\n\r\n\r\ninterface IBinRegisterItemsService {\r\n    id: string;\r\n    idUserOwner: string;\r\n    tableName: string;\r\n}\r\n\r\nclass BinRegisterMoveItemsService {\r\n    async execute({id, idUserOwner, tableName}: IBinRegisterItemsService){\r\n        if(!idUserOwner){\r\n            return {\r\n                data :{\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n                    status:400\r\n                }\r\n            }\r\n        }\r\n\r\n        if((!id || !tableName)){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const item = await prismaClient.$queryRawUnsafe(`SELECT * FROM ${tableName} WHERE id = '${id}'`)\r\n        \r\n\r\n        try {\r\n            await prismaClient.bin.create({\r\n                data: {\r\n                  tableName,\r\n                  itemId: id,\r\n                  idUserOwner: idUserOwner,\r\n                  data: JSON.stringify(item)   \r\n                }\r\n            })\r\n            await prismaClient.$executeRawUnsafe(`DELETE FROM ${tableName} WHERE id = '${id}'`)\r\n\r\n            return {\r\n                data: {\r\n                   message: `Item movido para a lixeira com sucesso`,\r\n                   status: 200\r\n                }\r\n         \r\n            }\r\n        } catch(err){\r\n            return {\r\n                data: {\r\n                    message: `Ocorreu um erro ao mover item para a lixeira ${err}`,\r\n                    status: 500\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {BinRegisterMoveItemsService}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACMf,IAAM,8BAAN,MAAkC;AAAA,EACxB,QAAQ,IAAuD;AAAA,+CAAvD,EAAC,IAAI,aAAa,UAAS,GAA4B;AACjE,UAAG,CAAC,aAAY;AACZ,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,MAAM,CAAC,WAAW;AACnB,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,OAAO,MAAM,eAAa,gBAAgB,iBAAiB,SAAS,gBAAgB,EAAE,GAAG;AAG/F,UAAI;AACA,cAAM,eAAa,IAAI,OAAO;AAAA,UAC1B,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,MAAM,KAAK,UAAU,IAAI;AAAA,UAC3B;AAAA,QACJ,CAAC;AACD,cAAM,eAAa,kBAAkB,eAAe,SAAS,gBAAgB,EAAE,GAAG;AAElF,eAAO;AAAA,UACH,MAAM;AAAA,YACH,SAAS;AAAA,YACT,QAAQ;AAAA,UACX;AAAA,QAEJ;AAAA,MACJ,SAAQ,KAAI;AACR,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS,gDAAgD,GAAG;AAAA,YAC5D,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IAEJ;AAAA;AAEJ;;;AFrDA,IAAM,wBAAN,MAA4B;AAAA,EACpB,QAAQ,IAGa;AAAA,+CAHb;AAAA,MACZ;AAAA,MACA;AAAA,IACF,GAA2B;AACzB,UAAG,CAAC,IAAG;AACH,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAG,CAAC,aAAY;AACZ,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAGD,YAAM,oBAAoB,MAAM,eAAa,SAAS,UAAU;AAAA,QAC9D,OAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,mBAAmB;AACtB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AAEF,cAAM,0BAA0B,IAAI,4BAA4B;AAEhE,cAAM,iBAAiB,MAAM,wBAAwB,QAAQ;AAAA,UACzD;AAAA,UACA,WAAW;AAAA,UACX,aAAa,kBAAkB;AAAA,QACnC,CAAC;AAED,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS,eAAe,KAAK;AAAA,YAC7B,QAAQ,eAAe,KAAK;AAAA,UAChC;AAAA,QACJ;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,oEAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}