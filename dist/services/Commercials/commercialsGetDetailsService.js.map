{"version":3,"sources":["../../../src/services/Commercials/commercialsGetDetailsService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ICommercialGetDetailsService {\r\n  id: string;\r\n  idUserOwner?: string | null;\r\n}\r\n\r\nclass CommercialGetDetailsService {\r\n  async execute({ id, idUserOwner }: ICommercialGetDetailsService) {\r\n    try {\r\n      if (!id) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com esta ação, por favor envio o id do comercial para prosseguir\",\r\n            status: 400,\r\n          },\r\n        };\r\n      }\r\n\r\n      if (!idUserOwner) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com esta ação, por favor envio o id do responsável para prosseguir\",\r\n            status: 400,\r\n          },\r\n        };\r\n      }\r\n\r\n      const userExists = await prismaClient.users.findFirst({\r\n        where: {\r\n          id: idUserOwner,\r\n        },\r\n      });\r\n\r\n      const commercialExists = await prismaClient.commercials.findFirst({\r\n        where: {\r\n          id: id,\r\n          idUserOwner: idUserOwner,\r\n        },\r\n      });\r\n\r\n      if (!userExists) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com esta ação, esse usuário responsável não existe\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      if (!commercialExists) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com esta ação, esse comercial não existe\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      return {\r\n        data: {\r\n          item: commercialExists,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetDetailsMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommercialGetDetailsService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADIf,IAAM,8BAAN,MAAkC;AAAA,EAC1B,QAAQ,IAAmD;AAAA,+CAAnD,EAAE,IAAI,YAAY,GAAiC;AAC/D,UAAI;AACF,YAAI,CAAC,IAAI;AACP,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SACE;AAAA,cACF,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAEA,YAAI,CAAC,aAAa;AAChB,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SACE;AAAA,cACF,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAEA,cAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,UACpD,OAAO;AAAA,YACL,IAAI;AAAA,UACN;AAAA,QACF,CAAC;AAED,cAAM,mBAAmB,MAAM,eAAa,YAAY,UAAU;AAAA,UAChE,OAAO;AAAA,YACL;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,CAAC,YAAY;AACf,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SACE;AAAA,cACF,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAEA,YAAI,CAAC,kBAAkB;AACrB,iBAAO;AAAA,YACL,MAAM;AAAA,cACJ,SACE;AAAA,cACF,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,oFAAuC,IAAI,GAAG;AAAA,YACvD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}