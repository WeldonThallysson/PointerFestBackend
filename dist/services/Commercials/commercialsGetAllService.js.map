{"version":3,"sources":["../../../src/services/Commercials/commercialsGetAllService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ICommercialGetAllService {\r\n  name?: string | null;\r\n  description?: string | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass CommercialGetAllService {\r\n  async execute({ name, description, page, limit }: ICommercialGetAllService) {\r\n    try {\r\n      const where: any = \"\";\r\n\r\n      if (name) where.name = { contains: name, mode: \"insensitive\" };\r\n      if (description)\r\n        where.description = { contains: description, mode: \"insensitive\" };\r\n\r\n      const shouldPaginate = page !== undefined || limit !== undefined;\r\n      const skip = shouldPaginate\r\n        ? ((page ?? 1) - 1) * (limit ?? 10)\r\n        : undefined;\r\n      const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n      const commercials = await prismaClient.commercials.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n        orderBy: { created_At: \"desc\" },\r\n      });\r\n\r\n      const totalCommercials = await prismaClient.commercials.count();\r\n      const totalPages = shouldPaginate\r\n        ? Math.ceil(totalCommercials / (limit ?? 10))\r\n        : 1;\r\n\r\n      return {\r\n        items: commercials,\r\n        totalItems: totalCommercials,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetAllMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommercialGetAllService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADMf,IAAM,0BAAN,MAA8B;AAAA,EACtB,QAAQ,IAA8D;AAAA,+CAA9D,EAAE,MAAM,aAAa,MAAM,MAAM,GAA6B;AAC1E,UAAI;AACF,cAAM,QAAa;AAEnB,YAAI,KAAM,OAAM,OAAO,EAAE,UAAU,MAAM,MAAM,cAAc;AAC7D,YAAI;AACF,gBAAM,cAAc,EAAE,UAAU,aAAa,MAAM,cAAc;AAEnE,cAAM,iBAAiB,SAAS,UAAa,UAAU;AACvD,cAAM,OAAO,mBACP,sBAAQ,KAAK,MAAM,wBAAS,MAC9B;AACJ,cAAM,OAAO,iBAAiB,wBAAS,KAAK;AAE5C,cAAM,cAAc,MAAM,eAAa,YAAY,SAAS;AAAA,UAC1D;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,EAAE,YAAY,OAAO;AAAA,QAChC,CAAC;AAED,cAAM,mBAAmB,MAAM,eAAa,YAAY,MAAM;AAC9D,cAAM,aAAa,iBACf,KAAK,KAAK,oBAAoB,wBAAS,GAAG,IAC1C;AAEJ,eAAO;AAAA,UACL,OAAO;AAAA,UACP,YAAY;AAAA,UACZ;AAAA,UACA,aAAa,iBAAiB,sBAAQ,IAAI;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,iFAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}