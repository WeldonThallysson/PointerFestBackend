{"version":3,"sources":["../../../src/services/Commercials/commercialsRegisterService.ts","../../../src/prisma/index.ts","../../../src/utils/validationsServices/validationsCommercials.ts"],"sourcesContent":["import prismaClient from \"../../prisma\";\r\nimport { UploadedFile } from \"express-fileupload\"; \r\nimport { v2 as cloudinary, UploadApiResponse } from \"cloudinary\";\r\nimport { v6 as uuid } from \"uuid\";\r\nimport { validationsCommercialsService } from \"../../utils/validationsServices/validationsCommercials\";\r\nimport { Messages, MessagesError } from \"../../constants/messages.api\";\r\n\r\ninterface ICommercialsRegisterService {\r\n  idUserOwner: string;\r\n  idTypeCommercial: string;\r\n  name: string;\r\n  description: string;\r\n  urlImageCommercial: UploadedFile | null;\r\n  urlSocialMediaCommercial: string;\r\n  positionOrder: number;\r\n}\r\n\r\nclass CommercialsRegisterService {\r\n  async execute({\r\n    idUserOwner,\r\n    name,\r\n    description,\r\n    positionOrder,\r\n    idTypeCommercial,\r\n    urlImageCommercial,\r\n    urlSocialMediaCommercial,\r\n  }: ICommercialsRegisterService) {\r\n    \r\n    const validationsCommercials = validationsCommercialsService({\r\n      idUserOwner,\r\n      name,\r\n      urlImageCommercial,\r\n      urlSocialMediaCommercial,\r\n    });\r\n\r\n    if (validationsCommercials) {\r\n      return validationsCommercials;\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const typeCommercialExists = await prismaClient.typesCommercials.findFirst({\r\n        where: {\r\n          id: idTypeCommercial,\r\n        },\r\n    });\r\n\r\n    const commercialsExists = await prismaClient.commercials.findFirst({\r\n      where: {\r\n        name: name,\r\n      }\r\n    });\r\n\r\n    if (commercialsExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, este comercial já existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!typeCommercialExists) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível prosseguir com esta ação, este tipo do comercial não existe\",\r\n            status: 403,\r\n          },\r\n        };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const idUrlImageCommercial = uuid();\r\n  \r\n      const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n          cloudinary.uploader\r\n            .upload_stream(\r\n              {\r\n                public_id: `commercials/${idUrlImageCommercial}`,\r\n                folder: \"commercials\",\r\n              },\r\n              (err, result) => {\r\n                if (err) {\r\n                  return {\r\n                    data: {\r\n                      message: err,\r\n                      status: 500,\r\n                    },\r\n                  };\r\n                }\r\n                resolve(result);\r\n              }\r\n            )\r\n            .end(urlImageCommercial.data);\r\n        }\r\n      );\r\n\r\n      await prismaClient.commercials.create({\r\n        data: {\r\n          idUserOwner: idUserOwner,\r\n          name: name,\r\n          description: description ? description : null,\r\n          idTypeCommercial: idTypeCommercial,\r\n          positionOrder:positionOrder ? positionOrder : null,\r\n          idUrlImageCommercial:idUrlImageCommercial ? idUrlImageCommercial : null,\r\n          urlImageCommercial: resultFile.url\r\n            ? resultFile.url\r\n            : null,\r\n          urlSocialMediaCommercial: urlSocialMediaCommercial ? urlSocialMediaCommercial : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommercialsRegisterService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { UploadedFile } from \"express-fileupload\";\r\n\r\ninterface IParamsCommercialsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  urlImageCommercial: UploadedFile | null,\r\n  urlSocialMediaCommercial: string,\r\n}\r\n\r\nexport const validationsCommercialsService = ({\r\n  name,\r\n  idUserOwner,\r\n  urlImageCommercial,\r\n  urlSocialMediaCommercial,\r\n}: IParamsCommercialsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do comercial.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!urlImageCommercial) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor envie a sua imagem comercial.\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!urlSocialMediaCommercial) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor envie a sua url de midia para vinculo com comercial\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","names":["uuid","cloudinary"]}