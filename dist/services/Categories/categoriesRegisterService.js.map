{"version":3,"sources":["../../../src/services/Categories/categoriesRegisterService.ts","../../../src/prisma/index.ts","../../../src/utils/validationsServices/validationsCategories.ts"],"sourcesContent":["import { UploadedFile } from \"express-fileupload\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validationsCategoriesService } from \"../../utils/validationsServices/validationsCategories\";\r\nimport {v2 as cloudinary, UploadApiResponse} from 'cloudinary'\r\nimport {v6 as uuid} from 'uuid'\r\nimport { Messages, MessagesError } from \"../../constants/messages.api\";\r\n \r\ninterface ICategoriesRegister {\r\n  idUserOwner: string;\r\n  name: string;\r\n  label?: string | null;\r\n  icon?: UploadedFile | null;\r\n  themeImageUrl?: UploadedFile | null;\r\n}\r\n\r\nclass CategoriesRegisterService {\r\n  async execute({\r\n    idUserOwner,\r\n    name,\r\n    label,\r\n    icon,\r\n    themeImageUrl,\r\n  }: ICategoriesRegister) {\r\n\r\n    const validationsCategories = validationsCategoriesService({\r\n      idUserOwner,\r\n      name,\r\n      icon,\r\n    });\r\n\r\n    if (validationsCategories) {\r\n      return validationsCategories;\r\n    } \r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner\r\n      }\r\n    })\r\n\r\n    const categoryExists = await prismaClient.categories.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n\r\n    if (categoryExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está categoria já existe\",\r\n          status: 403,\r\n        }\r\n     \r\n      };\r\n    }\r\n\r\n    if(!userExists){\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      const iconId = uuid()\r\n      const idThemeImageUrl = uuid()\r\n\r\n      const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n          cloudinary.uploader.upload_stream({\r\n            public_id: `icons/${iconId}`,\r\n            folder: \"icons\"\r\n          }, (err,result) => {\r\n            if(err){\r\n              return {\r\n                data: {\r\n                 message: err,\r\n                 status:500 \r\n              \r\n                }\r\n              }\r\n            }\r\n            resolve(result)\r\n          }).end(icon.data)\r\n\r\n      })\r\n\r\n      const resultThemeImageUrl: UploadApiResponse = await new Promise((resolve) => {\r\n        cloudinary.uploader.upload_stream({\r\n          public_id: `themesCategories/${idThemeImageUrl}`,\r\n          folder: \"themesCategories\"\r\n        }, (err, result) => {\r\n          if(err){\r\n            return {\r\n              data: {\r\n                 message: err,\r\n                 status: 500\r\n              }\r\n            }\r\n          }\r\n          resolve(result)\r\n        }).end(themeImageUrl.data)\r\n      })\r\n\r\n      await prismaClient.categories.create({\r\n        data: {\r\n          idUserOwner: idUserOwner,\r\n          name: name,\r\n          label: label ? label : null,\r\n          idIcon: iconId,\r\n          icon: resultFile.url ? resultFile.url : null, \r\n          idThemeImageUrl: idThemeImageUrl,\r\n          themeImageUrl: resultThemeImageUrl.url ? resultThemeImageUrl.url : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n      }};\r\n    }\r\n  }\r\n}\r\n\r\nexport { CategoriesRegisterService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { UploadedFile } from \"express-fileupload\";\r\n\r\ninterface IParamsCategoriesService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  icon?: UploadedFile | null;\r\n}\r\n\r\nexport const validationsCategoriesService = ({\r\n\r\n  name,\r\n  icon,\r\n  idUserOwner,\r\n}: IParamsCategoriesService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha o nome da categoria.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!icon) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, por favor envie um icone para prosseguir\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACIR,IAAM,+BAA+B,CAAC;AAAA,EAE3C;AAAA,EACA;AAAA,EACA;AACF,MAAgC;AAC9B,MAAI,CAAC,aAAa;AAChB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA;AAAA,QACF,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA;AAAA,QACF,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA;AAAA,QACF,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;;;AFxCA,wBAAkD;AAClD,kBAAyB;AAWzB,IAAM,4BAAN,MAAgC;AAAA,EACxB,QAAQ,IAMU;AAAA,+CANV;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAAwB;AAEtB,YAAM,wBAAwB,6BAA6B;AAAA,QACzD;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,uBAAuB;AACzB,eAAO;AAAA,MACT;AAEA,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,iBAAiB,MAAM,eAAa,WAAW,UAAU;AAAA,QAC7D,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,gBAAgB;AAClB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QAEF;AAAA,MACF;AAEA,UAAG,CAAC,YAAW;AACb,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AACF,cAAM,aAAS,YAAAA,IAAK;AACpB,cAAM,sBAAkB,YAAAA,IAAK;AAE7B,cAAM,aAAgC,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACzE,4BAAAC,GAAW,SAAS,cAAc;AAAA,YAChC,WAAW,SAAS,MAAM;AAAA,YAC1B,QAAQ;AAAA,UACV,GAAG,CAAC,KAAI,WAAW;AACjB,gBAAG,KAAI;AACL,qBAAO;AAAA,gBACL,MAAM;AAAA,kBACL,SAAS;AAAA,kBACT,QAAO;AAAA,gBAER;AAAA,cACF;AAAA,YACF;AACA,oBAAQ,MAAM;AAAA,UAChB,CAAC,EAAE,IAAI,KAAK,IAAI;AAAA,QAEpB,CAAC;AAED,cAAM,sBAAyC,MAAM,IAAI,QAAQ,CAAC,YAAY;AAC5E,4BAAAA,GAAW,SAAS,cAAc;AAAA,YAChC,WAAW,oBAAoB,eAAe;AAAA,YAC9C,QAAQ;AAAA,UACV,GAAG,CAAC,KAAK,WAAW;AAClB,gBAAG,KAAI;AACL,qBAAO;AAAA,gBACL,MAAM;AAAA,kBACH,SAAS;AAAA,kBACT,QAAQ;AAAA,gBACX;AAAA,cACF;AAAA,YACF;AACA,oBAAQ,MAAM;AAAA,UAChB,CAAC,EAAE,IAAI,cAAc,IAAI;AAAA,QAC3B,CAAC;AAED,cAAM,eAAa,WAAW,OAAO;AAAA,UACnC,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,OAAO,QAAQ,QAAQ;AAAA,YACvB,QAAQ;AAAA,YACR,MAAM,WAAW,MAAM,WAAW,MAAM;AAAA,YACxC;AAAA,YACA,eAAe,oBAAoB,MAAM,oBAAoB,MAAM;AAAA,UACrE;AAAA,QACF,CAAC;AAED,eAAO;AAAA,UACL,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MAEF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,mEAAqC,IAAI,GAAG;AAAA,YACrD,QAAQ;AAAA,UACZ;AAAA,QAAC;AAAA,MACH;AAAA,IACF;AAAA;AACF;","names":["uuid","cloudinary"]}