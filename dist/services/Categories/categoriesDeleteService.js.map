{"version":3,"sources":["../../../src/services/Categories/categoriesDeleteService.ts","../../../src/prisma/index.ts","../../../src/services/Bin/binRegisterMoveItemsService.ts"],"sourcesContent":["import prismaClient from \"../../prisma\";\r\nimport { BinRegisterMoveItemsService } from \"../Bin/binRegisterMoveItemsService\";\r\ninterface DeletarCategoriasType {\r\n    id: string\r\n}\r\n\r\nclass CategoriesDeleteService{\r\n    async execute({id}: DeletarCategoriasType){\r\n\r\n        if(!id){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com esta ação, por favor informe o id da categoria\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const categoriesExists = await prismaClient.categories.findFirst({where: {id: id}})\r\n\r\n        if(!categoriesExists){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com esta ação, essa categoria não existe\",\r\n                    status: 404\r\n                }\r\n            }\r\n        }\r\n\r\n        const binRegisterItemsService = new BinRegisterMoveItemsService() \r\n\r\n        const deletarCategoriasId = await binRegisterItemsService.execute({\r\n            id: id,\r\n            tableName: \"categories\",\r\n            idUserOwner: categoriesExists.idUserOwner\r\n        })  \r\n\r\n        return {\r\n            data: {\r\n                message: deletarCategoriasId.data.message,\r\n                status: deletarCategoriasId.data.status\r\n            }\r\n        }   \r\n     }\r\n\r\n}\r\n\r\nexport {CategoriesDeleteService}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../prisma\";\r\n\r\n\r\n\r\ninterface IBinRegisterItemsService {\r\n    id: string;\r\n    idUserOwner: string;\r\n    tableName: string;\r\n}\r\n\r\nclass BinRegisterMoveItemsService {\r\n    async execute({id, idUserOwner, tableName}: IBinRegisterItemsService){\r\n        if(!idUserOwner){\r\n            return {\r\n                data :{\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n                    status:400\r\n                }\r\n            }\r\n        }\r\n\r\n        if((!id || !tableName)){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const item = await prismaClient.$queryRawUnsafe(`SELECT * FROM ${tableName} WHERE id = '${id}'`)\r\n        \r\n\r\n        try {\r\n            await prismaClient.bin.create({\r\n                data: {\r\n                  tableName,\r\n                  itemId: id,\r\n                  idUserOwner: idUserOwner,\r\n                  data: JSON.stringify(item)   \r\n                }\r\n            })\r\n            await prismaClient.$executeRawUnsafe(`DELETE FROM ${tableName} WHERE id = '${id}'`)\r\n\r\n            return {\r\n                data: {\r\n                   message: `Item movido para a lixeira com sucesso`,\r\n                   status: 200\r\n                }\r\n         \r\n            }\r\n        } catch(err){\r\n            return {\r\n                data: {\r\n                    message: `Ocorreu um erro ao mover item para a lixeira ${err}`,\r\n                    status: 500\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {BinRegisterMoveItemsService}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACMf,IAAM,8BAAN,MAAkC;AAAA,EACxB,QAAQ,IAAuD;AAAA,+CAAvD,EAAC,IAAI,aAAa,UAAS,GAA4B;AACjE,UAAG,CAAC,aAAY;AACZ,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,MAAM,CAAC,WAAW;AACnB,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,OAAO,MAAM,eAAa,gBAAgB,iBAAiB,SAAS,gBAAgB,EAAE,GAAG;AAG/F,UAAI;AACA,cAAM,eAAa,IAAI,OAAO;AAAA,UAC1B,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,MAAM,KAAK,UAAU,IAAI;AAAA,UAC3B;AAAA,QACJ,CAAC;AACD,cAAM,eAAa,kBAAkB,eAAe,SAAS,gBAAgB,EAAE,GAAG;AAElF,eAAO;AAAA,UACH,MAAM;AAAA,YACH,SAAS;AAAA,YACT,QAAQ;AAAA,UACX;AAAA,QAEJ;AAAA,MACJ,SAAQ,KAAI;AACR,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS,gDAAgD,GAAG;AAAA,YAC5D,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IAEJ;AAAA;AAEJ;;;AFxDA,IAAM,0BAAN,MAA6B;AAAA,EACnB,QAAQ,IAA4B;AAAA,+CAA5B,EAAC,GAAE,GAAyB;AAEtC,UAAG,CAAC,IAAG;AACH,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,mBAAmB,MAAM,eAAa,WAAW,UAAU,EAAC,OAAO,EAAC,GAAM,EAAC,CAAC;AAElF,UAAG,CAAC,kBAAiB;AACjB,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,0BAA0B,IAAI,4BAA4B;AAEhE,YAAM,sBAAsB,MAAM,wBAAwB,QAAQ;AAAA,QAC9D;AAAA,QACA,WAAW;AAAA,QACX,aAAa,iBAAiB;AAAA,MAClC,CAAC;AAED,aAAO;AAAA,QACH,MAAM;AAAA,UACF,SAAS,oBAAoB,KAAK;AAAA,UAClC,QAAQ,oBAAoB,KAAK;AAAA,QACrC;AAAA,MACJ;AAAA,IACH;AAAA;AAEL;","names":[]}