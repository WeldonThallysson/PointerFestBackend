{"version":3,"sources":["../../../src/services/TypesCommercials/typeCommercialsGetAllService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ITypeCommercialGetAllService {\r\n  name?: string | null;\r\n  position?: string | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass TypeCommercialGetAllService {\r\n  async execute({ name, position, page, limit }: ITypeCommercialGetAllService) {\r\n    try {\r\n      const where: any = \"\";\r\n\r\n      if (name) where.name = { contains: name, mode: \"insensitive\" };\r\n      if (position)\r\n        where.description = { contains: position, mode: \"insensitive\" };\r\n\r\n      const shouldPaginate = page !== undefined || limit !== undefined;\r\n      const skip = shouldPaginate\r\n        ? ((page ?? 1) - 1) * (limit ?? 10)\r\n        : undefined;\r\n      const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n      const typeCommercials = await prismaClient.typesCommercials.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n        orderBy: { created_At: \"desc\" },\r\n      });\r\n\r\n      const totalTypeCommercials = await prismaClient.typesCommercials.count();\r\n      const totalPages = shouldPaginate\r\n        ? Math.ceil(totalTypeCommercials / (limit ?? 10))\r\n        : 1;\r\n\r\n      return {\r\n        items: typeCommercials,\r\n        totalItems: totalTypeCommercials,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetAllMessageError} ${err}`,\r\n          status: 500,\r\n        }\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { TypeCommercialGetAllService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADMf,IAAM,8BAAN,MAAkC;AAAA,EAC1B,QAAQ,IAA+D;AAAA,+CAA/D,EAAE,MAAM,UAAU,MAAM,MAAM,GAAiC;AAC3E,UAAI;AACF,cAAM,QAAa;AAEnB,YAAI,KAAM,OAAM,OAAO,EAAE,UAAU,MAAM,MAAM,cAAc;AAC7D,YAAI;AACF,gBAAM,cAAc,EAAE,UAAU,UAAU,MAAM,cAAc;AAEhE,cAAM,iBAAiB,SAAS,UAAa,UAAU;AACvD,cAAM,OAAO,mBACP,sBAAQ,KAAK,MAAM,wBAAS,MAC9B;AACJ,cAAM,OAAO,iBAAiB,wBAAS,KAAK;AAE5C,cAAM,kBAAkB,MAAM,eAAa,iBAAiB,SAAS;AAAA,UACnE;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,EAAE,YAAY,OAAO;AAAA,QAChC,CAAC;AAED,cAAM,uBAAuB,MAAM,eAAa,iBAAiB,MAAM;AACvE,cAAM,aAAa,iBACf,KAAK,KAAK,wBAAwB,wBAAS,GAAG,IAC9C;AAEJ,eAAO;AAAA,UACL,OAAO;AAAA,UACP,YAAY;AAAA,UACZ;AAAA,UACA,aAAa,iBAAiB,sBAAQ,IAAI;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,iFAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}