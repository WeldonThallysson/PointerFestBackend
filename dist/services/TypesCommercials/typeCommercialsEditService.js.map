{"version":3,"sources":["../../../src/services/TypesCommercials/typeCommercialsEditService.ts","../../../src/prisma/index.ts","../../../src/utils/validationsServices/validationsTypeCommercials.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validationsTypeCommercialsService } from \"../../utils/validationsServices/validationsTypeCommercials\";\r\n\r\ninterface ITypeCommercialsEditService {\r\n  id: string;\r\n  idUserOwner: string | null;\r\n  name?: string | null;\r\n  position?: string | null;\r\n  status?: boolean | null\r\n}\r\n\r\nclass TypeCommercialsEditService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n    name,\r\n    position,\r\n    status\r\n  }: ITypeCommercialsEditService) {\r\n\r\n    if(!id){\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível prosseguir com esta ação, por favor envio o id do tipo do comercial para prosseguir\",\r\n                status: 403,\r\n            },\r\n        }\r\n    }\r\n    \r\n    const validationsTypeCommercials = validationsTypeCommercialsService({\r\n      idUserOwner,\r\n      name,\r\n      position\r\n    });\r\n\r\n    if (validationsTypeCommercials) {\r\n      return validationsTypeCommercials;\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const typeCommercialExists = await prismaClient.typesCommercials.findFirst({\r\n        where: {\r\n          id: id,\r\n        },\r\n    });\r\n      \r\n    if (!typeCommercialExists) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível prosseguir com esta ação, este tipo do comercial não existe\",\r\n            status: 403,\r\n          },\r\n        };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, usuário responsável não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      await prismaClient.typesCommercials.update({\r\n        where: {\r\n            id: id,\r\n        },\r\n\r\n        data: {\r\n          idUserOwner: idUserOwner,\r\n          name: name,\r\n          position: position ? position : null,\r\n          status: status ? status : null\r\n       \r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.UpdateMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.UpdateMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { TypeCommercialsEditService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","\r\ninterface IParamsTypeCommercialsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  position?: string | null, \r\n}\r\n\r\n \r\nexport const validationsTypeCommercialsService = ({\r\n  name,\r\n  idUserOwner,\r\n  position,\r\n}: IParamsTypeCommercialsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do tipo do comercial.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!position) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe a possição do tipo do comercial\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACIR,IAAM,oCAAoC,CAAC;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AACF,MAAqC;AACnC,MAAI,CAAC,aAAa;AAChB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA,QACF,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;;;AF5BA,IAAM,6BAAN,MAAiC;AAAA,EACzB,QAAQ,IAMkB;AAAA,+CANlB;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAAgC;AAE9B,UAAG,CAAC,IAAG;AACH,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,6BAA6B,kCAAkC;AAAA,QACnE;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,4BAA4B;AAC9B,eAAO;AAAA,MACT;AAEA,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,uBAAuB,MAAM,eAAa,iBAAiB,UAAU;AAAA,QACvE,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACJ,CAAC;AAED,UAAI,CAAC,sBAAsB;AACvB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACJ;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AACF,cAAM,eAAa,iBAAiB,OAAO;AAAA,UACzC,OAAO;AAAA,YACH;AAAA,UACJ;AAAA,UAEA,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,UAAU,WAAW,WAAW;AAAA,YAChC,QAAQ,SAAS,SAAS;AAAA,UAE5B;AAAA,QACF,CAAC;AAED,eAAO;AAAA,UACL,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,SAAS,KAAK;AACZ,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,0EAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}