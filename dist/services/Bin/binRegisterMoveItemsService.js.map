{"version":3,"sources":["../../../src/services/Bin/binRegisterMoveItemsService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import prismaClient from \"../../prisma\";\r\n\r\n\r\n\r\ninterface IBinRegisterItemsService {\r\n    id: string;\r\n    idUserOwner: string;\r\n    tableName: string;\r\n}\r\n\r\nclass BinRegisterMoveItemsService {\r\n    async execute({id, idUserOwner, tableName}: IBinRegisterItemsService){\r\n        if(!idUserOwner){\r\n            return {\r\n                data :{\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n                    status:400\r\n                }\r\n            }\r\n        }\r\n\r\n        if((!id || !tableName)){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const item = await prismaClient.$queryRawUnsafe(`SELECT * FROM ${tableName} WHERE id = '${id}'`)\r\n        \r\n\r\n        try {\r\n            await prismaClient.bin.create({\r\n                data: {\r\n                  tableName,\r\n                  itemId: id,\r\n                  idUserOwner: idUserOwner,\r\n                  data: JSON.stringify(item)   \r\n                }\r\n            })\r\n            await prismaClient.$executeRawUnsafe(`DELETE FROM ${tableName} WHERE id = '${id}'`)\r\n\r\n            return {\r\n                data: {\r\n                   message: `Item movido para a lixeira com sucesso`,\r\n                   status: 200\r\n                }\r\n         \r\n            }\r\n        } catch(err){\r\n            return {\r\n                data: {\r\n                    message: `Ocorreu um erro ao mover item para a lixeira ${err}`,\r\n                    status: 500\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {BinRegisterMoveItemsService}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADMf,IAAM,8BAAN,MAAkC;AAAA,EACxB,QAAQ,IAAuD;AAAA,+CAAvD,EAAC,IAAI,aAAa,UAAS,GAA4B;AACjE,UAAG,CAAC,aAAY;AACZ,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,MAAM,CAAC,WAAW;AACnB,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,OAAO,MAAM,eAAa,gBAAgB,iBAAiB,SAAS,gBAAgB,EAAE,GAAG;AAG/F,UAAI;AACA,cAAM,eAAa,IAAI,OAAO;AAAA,UAC1B,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,MAAM,KAAK,UAAU,IAAI;AAAA,UAC3B;AAAA,QACJ,CAAC;AACD,cAAM,eAAa,kBAAkB,eAAe,SAAS,gBAAgB,EAAE,GAAG;AAElF,eAAO;AAAA,UACH,MAAM;AAAA,YACH,SAAS;AAAA,YACT,QAAQ;AAAA,UACX;AAAA,QAEJ;AAAA,MACJ,SAAQ,KAAI;AACR,eAAO;AAAA,UACH,MAAM;AAAA,YACF,SAAS,gDAAgD,GAAG;AAAA,YAC5D,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IAEJ;AAAA;AAEJ;","names":[]}