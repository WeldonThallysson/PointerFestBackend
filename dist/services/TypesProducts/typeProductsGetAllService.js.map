{"version":3,"sources":["../../../src/services/TypesProducts/typeProductsGetAllService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ITypeProductsGetAllService {\r\n  name?: string | null;\r\n  position?: string | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass TypeProductsGetAllService {\r\n  async execute({ name, position, page, limit }: ITypeProductsGetAllService) {\r\n    try {\r\n      const where: any = \"\";\r\n\r\n      if (name) where.name = { contains: name, mode: \"insensitive\" };\r\n      if (position) where.description = { contains: position, mode: \"insensitive\" };\r\n  \r\n  \r\n     const shouldPaginate = page !== undefined || limit !== undefined;\r\n     const skip = shouldPaginate ? ((page ?? 1) - 1) * (limit ?? 10) : undefined;\r\n     const take = shouldPaginate ? limit ?? 10 : undefined\r\n  \r\n      const typeProducts = await prismaClient.typesProducts.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n        orderBy: { created_At: \"desc\" },\r\n    \r\n      });\r\n  \r\n      const totalTypeProducts = await prismaClient.typesProducts.count()\r\n      const totalPages = shouldPaginate ? Math.ceil(totalTypeProducts / (limit ?? 10)) : 1\r\n  \r\n      return {\r\n        items: typeProducts,\r\n        totalItems: totalTypeProducts,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      }\r\n    }\r\n    catch (err){\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetAllMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n   }\r\n}\r\n\r\nexport { TypeProductsGetAllService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADMf,IAAM,4BAAN,MAAgC;AAAA,EACxB,QAAQ,IAA6D;AAAA,+CAA7D,EAAE,MAAM,UAAU,MAAM,MAAM,GAA+B;AACzE,UAAI;AACF,cAAM,QAAa;AAEnB,YAAI,KAAM,OAAM,OAAO,EAAE,UAAU,MAAM,MAAM,cAAc;AAC7D,YAAI,SAAU,OAAM,cAAc,EAAE,UAAU,UAAU,MAAM,cAAc;AAG7E,cAAM,iBAAiB,SAAS,UAAa,UAAU;AACvD,cAAM,OAAO,mBAAmB,sBAAQ,KAAK,MAAM,wBAAS,MAAM;AAClE,cAAM,OAAO,iBAAiB,wBAAS,KAAK;AAE3C,cAAM,eAAe,MAAM,eAAa,cAAc,SAAS;AAAA,UAC7D;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,EAAE,YAAY,OAAO;AAAA,QAEhC,CAAC;AAED,cAAM,oBAAoB,MAAM,eAAa,cAAc,MAAM;AACjE,cAAM,aAAa,iBAAiB,KAAK,KAAK,qBAAqB,wBAAS,GAAG,IAAI;AAEnF,eAAO;AAAA,UACL,OAAO;AAAA,UACP,YAAY;AAAA,UACZ;AAAA,UACA,aAAa,iBAAiB,sBAAQ,IAAI;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF,SACO,KAAI;AACT,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,iFAAmC,IAAI,GAAG;AAAA,YACnD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACD;AAAA;AACH;","names":[]}