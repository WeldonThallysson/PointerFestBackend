{"version":3,"sources":["../../../src/services/TypesProducts/typeProductsGetDetailsService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ITypeProductsGetDetailsService {\r\n    id: string\r\n    idUserOwner?: string | null\r\n}\r\n\r\nclass TypeProductsGetDetailsService {\r\n    async execute({\r\n        id,\r\n        idUserOwner\r\n    }: ITypeProductsGetDetailsService){\r\n        try {\r\n            if(!id){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id do tipo do produto para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!idUserOwner){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id do responsável para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            const userExists = await prismaClient.users.findFirst({\r\n                where: {\r\n                    id: idUserOwner\r\n                }\r\n            })\r\n    \r\n            const typeProductsExists = await prismaClient.typesProducts.findFirst({\r\n                where: {\r\n                    id: id,\r\n                }\r\n            })\r\n    \r\n            if(!userExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, esse usuário responsável não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!typeProductsExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, esse tipo do produto não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return {\r\n                data: {\r\n                    item: typeProductsExists,\r\n                    status: 200\r\n                }\r\n            }\r\n           \r\n\r\n        } catch (err) {\r\n            return {\r\n                data: {\r\n                  message: `${MessagesError.GetDetailsMessageError} ${err}`,\r\n                  status: 500,\r\n                },\r\n              };\r\n        }\r\n     \r\n    }\r\n}\r\n\r\nexport {TypeProductsGetDetailsService}","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADIf,IAAM,gCAAN,MAAoC;AAAA,EAC1B,QAAQ,IAGoB;AAAA,+CAHpB;AAAA,MACV;AAAA,MACA;AAAA,IACJ,GAAkC;AAC9B,UAAI;AACA,YAAG,CAAC,IAAG;AACH,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,YAAG,CAAC,aAAY;AACZ,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,cAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,UAClD,OAAO;AAAA,YACH,IAAI;AAAA,UACR;AAAA,QACJ,CAAC;AAED,cAAM,qBAAqB,MAAM,eAAa,cAAc,UAAU;AAAA,UAClE,OAAO;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,CAAC;AAED,YAAG,CAAC,YAAW;AACX,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,YAAG,CAAC,oBAAmB;AACnB,iBAAO;AAAA,YACH,MAAM;AAAA,cACF,SAAS;AAAA,cACT,QAAQ;AAAA,YACZ;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO;AAAA,UACH,MAAM;AAAA,YACF,MAAM;AAAA,YACN,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MAGJ,SAAS,KAAK;AACV,eAAO;AAAA,UACH,MAAM;AAAA,YACJ,SAAS,oFAAuC,IAAI,GAAG;AAAA,YACvD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACN;AAAA,IAEJ;AAAA;AACJ;","names":[]}