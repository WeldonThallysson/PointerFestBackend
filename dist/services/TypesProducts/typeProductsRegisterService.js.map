{"version":3,"sources":["../../../src/services/TypesProducts/typeProductsRegisterService.ts","../../../src/prisma/index.ts","../../../src/utils/validationsServices/validationsTypeProducts.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validationsTypeProductsService } from \"../../utils/validationsServices/validationsTypeProducts\";\r\n\r\ninterface ITypeProductsRegisterService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  position: string;\r\n}\r\n\r\nclass TypeProductsRegisterService {\r\n  async execute({\r\n    idUserOwner,\r\n    name,\r\n    position,\r\n  }: ITypeProductsRegisterService) {\r\n    \r\n    const validationsCommercials = validationsTypeProductsService({\r\n      idUserOwner,\r\n      name,\r\n      position\r\n    });\r\n\r\n    if (validationsCommercials) {\r\n      return validationsCommercials;\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const typeProductsExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n          name: name,\r\n        },\r\n    });\r\n\r\n    if (typeProductsExists) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível prosseguir com esta ação, este tipo de produto já existe\",\r\n            status: 403,\r\n          },\r\n        };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      await prismaClient.typesProducts.create({\r\n        data: {\r\n          idUserOwner: idUserOwner,\r\n          name: name,\r\n          position: position ? position : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    }\r\n    \r\n    catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { TypeProductsRegisterService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","\r\ninterface IParamsTypeProductsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  position?: string | null, \r\n}\r\n\r\n \r\nexport const validationsTypeProductsService = ({\r\n  name,\r\n  idUserOwner,\r\n  position,\r\n}: IParamsTypeProductsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do tipo do produto.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!position) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe a posição do tipo do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ACIR,IAAM,iCAAiC,CAAC;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AACF,MAAkC;AAChC,MAAI,CAAC,aAAa;AAChB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SACE;AAAA,QACF,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;;;AF9BA,IAAM,8BAAN,MAAkC;AAAA,EAC1B,QAAQ,IAImB;AAAA,+CAJnB;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAAiC;AAE/B,YAAM,yBAAyB,+BAA+B;AAAA,QAC5D;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,wBAAwB;AAC1B,eAAO;AAAA,MACT;AAEA,YAAM,aAAa,MAAM,eAAa,MAAM,UAAU;AAAA,QACpD,OAAO;AAAA,UACL,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAED,YAAM,qBAAqB,MAAM,eAAa,cAAc,UAAU;AAAA,QAClE,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACJ,CAAC;AAED,UAAI,oBAAoB;AACpB,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACJ;AAEA,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AACF,cAAM,eAAa,cAAc,OAAO;AAAA,UACtC,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,UAAU,WAAW,WAAW;AAAA,UAClC;AAAA,QACF,CAAC;AAED,eAAO;AAAA,UACL,MAAM;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,SAEO,KAAK;AACV,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,SAAS,mEAAqC,IAAI,GAAG;AAAA,YACrD,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}