{"version":3,"sources":["../../../src/services/Purchases/purchasesRegisterService.ts","../../../src/prisma/index.ts","../../../src/utils/formatters/formatterDate.ts","../../../src/utils/formatters/formatterToday.ts"],"sourcesContent":["import { TypesMethodPayment, TypesMethodPaymentResponse } from \"../../keys/typeMethodPayment/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\nimport { IProduct } from \"../../interface/interface.checkoutPaymentMethod\";\r\nimport { todayWithTime } from \"../../utils/formatters/formatterToday\";\r\nimport { Messages, MessagesError } from \"../../constants/messages.api\";\r\n \r\ninterface IRegisterVoucher {\r\n    cpfCnpj: string\r\n    typeMethodPayment: string\r\n    datePayment: string\r\n    codePayment: string\r\n    codeReferencePayment: string\r\n    products: IProduct[]\r\n    totalPrice?: number | null\r\n}\r\n\r\nclass RegisterVoucherService {\r\n  async execute({\r\n    cpfCnpj,\r\n    typeMethodPayment,\r\n    codeReferencePayment,\r\n    codePayment,\r\n    datePayment,\r\n    products,\r\n    totalPrice\r\n  }: IRegisterVoucher) {\r\n    // Verificar se todos os campos obrigatórios foram preenchidos\r\n    if (\r\n      !cpfCnpj ||\r\n      !typeMethodPayment ||\r\n      !codePayment ||\r\n      !codeReferencePayment ||\r\n      !datePayment ||\r\n      !products\r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir, as propriedades estão incorretas\",\r\n          fields: [\r\n            \"cpfUser\",\r\n            \"typeMethodPayment\",\r\n            \"codePayment\",\r\n            \"codeReferencePayment\",\r\n            \"datePayment\",\r\n            \"products\"\r\n          ],\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Verificar se o usuário existe\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { cpfCnpj: cpfCnpj },\r\n    });\r\n\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Usuário não cadastrado no sistema.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Determinar o tipo de pagamento\r\n    let paymentMethod: string;\r\n\r\n    switch (typeMethodPayment) {\r\n      case TypesMethodPaymentResponse.AVISTA:\r\n      case TypesMethodPayment.AVISTA:\r\n        paymentMethod = \"avista\";\r\n        break;\r\n      case TypesMethodPaymentResponse.PIX:\r\n      case TypesMethodPayment.Pix:\r\n        paymentMethod = \"pix\";\r\n        break;\r\n      case TypesMethodPaymentResponse.CREDIT_CARD:\r\n      case TypesMethodPayment.Credit:\r\n        paymentMethod = \"credito\";\r\n        break;\r\n      case TypesMethodPaymentResponse.DEBIT_CARD:\r\n      case TypesMethodPayment.Debit:\r\n        paymentMethod = \"debito\";\r\n        break;\r\n      default:\r\n        return {\r\n          data: {\r\n            message: \"Método de pagamento inválido.\",\r\n            status: 400,\r\n          },\r\n        };\r\n    }\r\n\r\n    const methodPaymentExists = await prismaClient.methodsPayments.findFirst({\r\n      where: { typeMethodPayment: paymentMethod },\r\n    });\r\n\r\n    if (!methodPaymentExists) {\r\n      return {\r\n        data: {\r\n          message: \"Método de pagamento não encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n    \r\n    const todayAt = todayWithTime();\r\n    \r\n    try {\r\n     const responseVoucher = await prismaClient.purchases.create({\r\n        data: {\r\n          products: JSON.stringify(products),\r\n          codePayment: codePayment,\r\n          codeReferencePayment: codeReferencePayment,\r\n          idUser: userExists.id,\r\n          idMethodPayment: methodPaymentExists.id,\r\n          datePayment: formatterDateToIso(datePayment),\r\n          totalPrice: totalPrice ? totalPrice : null,\r\n          created_At: todayAt\r\n        },\r\n      });\r\n      \r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          id: responseVoucher.id,\r\n          userId: userExists.id,\r\n          status: 201,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${error}`,\r\n          error: error?.message,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport {RegisterVoucherService};\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import {DateTime} from 'luxon'\r\n\r\nconst today = new Date();\r\n\r\nexport const todayFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n  })\r\n    .format(today)\r\n    .split(\"/\")\r\n    .reverse()\r\n    .join(\"-\"); // Converte para YYYY-MM-DD\r\n\r\n\r\nexport const todayFormattedWithTime = (dateNow: Date) => {\r\n  new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\", // Inclui as horas no formato de 2 dígitos\r\n    minute: \"2-digit\", // Inclui os minutos no formato de 2 dígitos\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n}).format(dateNow).replace(',', ''); // Remove a vírgula entre data e hora\r\n\r\n\r\n}\r\n  \r\n\r\nexport const todayFormattedWithTimeToIso = (dateNow: Date): string => {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\",\r\n    hour12: false, // Para garantir o formato 24h\r\n  };\r\n\r\n  // Obter a data e hora formatadas no padrão ISO customizado\r\n  const formatted = new Intl.DateTimeFormat(\"pt-BR\", options)\r\n    .format(dateNow)\r\n    .replace(',', ''); // Remove vírgula\r\n\r\n  // Converter \"DD/MM/AAAA HH:MM\" para \"AAAA-MM-DD HH:MM\"\r\n  const [date, time] = formatted.split(' ');\r\n  const [day, month, year] = date.split('/');\r\n  return `${year}-${month}-${day} ${time}`;\r\n};\r\n\r\n\r\n\r\nexport const todayWithTime = (): string => {\r\n\r\n  const now = DateTime.now().setZone('America/Sao_Paulo');\r\n  \r\n  \r\n  return now.toFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n};\r\n\r\n\r\nexport const todayWithTimeAtFormat = (date?: Date | null): string => {\r\n  if (!date) {\r\n    return \"\"; // Retorna uma string vazia se `date` for `null` ou `undefined`.\r\n  }\r\n\r\n  const isoString = date instanceof Date ? date.toISOString() : date; // Garante que seja uma string ISO\r\n  const [datePart, timePart] = isoString.split(\"T\"); // Divide a data em partes (data e hora)\r\n  const [year, month, day] = datePart.split(\"-\"); // Divide a parte da data (YYYY-MM-DD)\r\n  const [hours, minutes] = timePart.split(\":\"); // Divide a parte do tempo (HH:mm:ss)\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};"],"mappings":"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","names":[]}