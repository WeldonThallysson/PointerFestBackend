{"version":3,"sources":["../../../src/services/Purchases/purchasesGetDispatchForEmailsService.ts","../../../src/prisma/index.ts","../../../src/config/nodemailerConfig.ts","../../../src/utils/formatters/formatterDate.ts","../../../src/utils/validators/validatorPermissions.ts","../../../src/services/Purchases/purchesesGetDetailsService.ts","../../../src/utils/formatters/formatterPrice.ts","../../../src/utils/formatters/formatterCPF.ts"],"sourcesContent":["import path from \"path\";\r\nimport fs from \"fs\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { transporter } from \"../../config/nodemailerConfig\";  \r\nimport { GetDetailsVoucherService } from \"./purchesesGetDetailsService\";\r\nimport { formatterCurrency } from \"../../utils/formatters/formatterPrice\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport { formatterDateToString } from \"../../utils/formatters/formatterDate\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\n\r\ninterface IGetDispatchVouchersForEmails {\r\n  idUserLogged?: string | null;\r\n  idVoucher?: string | null;\r\n  idOtherUser?: string | null\r\n}\r\n\r\nclass GetDispatchVouchersForEmailsService {\r\n  async execute({ idUserLogged, idVoucher,idOtherUser }: IGetDispatchVouchersForEmails) {\r\n    if (!idVoucher || !idUserLogged) {\r\n      return {\r\n        data: {\r\n          message: !idVoucher\r\n            ? \"N√£o foi poss√≠vel prosseguir, o id do voucher n√£o foi informado.\"\r\n            : \"N√£o foi poss√≠vel prosseguir, o id do respons√°vel n√£o foi informado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { \r\n        id: idUserLogged, \r\n      },\r\n    });\r\n\r\n    const purchasesExists = await prismaClient.purchases.findFirst({\r\n      where: {\r\n        id: idVoucher,\r\n        //idUser: idUserLogged\r\n      }\r\n    })\r\n\r\n    if(!purchasesExists){\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir, o voucher da compra n√£o foi emitido e n√£o existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir, o usu√°rio respons√°vel n√£o existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const getDetailsVoucher = new GetDetailsVoucherService();\r\n    const dataResponseDetailsVoucher = await getDetailsVoucher.execute({\r\n      id: idVoucher,\r\n      idUserLogged,\r\n      idOtherUser,\r\n    });\r\n\r\n    const seeMyPurchasesLink = `${process.env.FRONTEND_URL}${process.env.LINK_SEE_MY_PURCHASES_URL}`;\r\n    const templatePathClient = path.join(__dirname, \"../../constants/templates/templateVoucherClient.html\");\r\n    const templatePathAdminResort = path.join(__dirname, \"../../constants/templates/templateVoucherAdminResort.html\");\r\n\r\n    const readTemplate = (templatePath: string, replacements: Record<string, string | undefined>) => {\r\n      let content = fs.readFileSync(templatePath, \"utf-8\");\r\n      for (const [key, value] of Object.entries(replacements)) {\r\n        if(value) content = content.replace(`{{${key}}}`, value);\r\n      }\r\n      return content;\r\n    };\r\n\r\n    const replacements = {\r\n      seeMyPurchasesLink: seeMyPurchasesLink,\r\n      userName: userExists.name.split(\" \")[0],\r\n      idUser: userExists.id,\r\n      name: userExists.name,\r\n      methodPayment: dataResponseDetailsVoucher.data.items.dataDetailsVoucherFormated.methodsPayments.name,\r\n      ...(userExists.typePerson === TypePerson.Fisic ? {cpf: formatterCPF(userExists.cpfCnpj)} : { cnpj: formatterCPF(userExists.cpfCnpj),}),\r\n      datePayment: formatterDateToString(dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.datePayment),\r\n      totalPrice: formatterCurrency(dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.totalPrice),\r\n      codeVoucher: dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.id,\r\n      codePayment: dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.codePayment,\r\n      codeReferencePayment: dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.codeReferencePayment,\r\n      products: typeof dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.products === \"string\"\r\n      ? JSON.parse(dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.products)\r\n      : dataResponseDetailsVoucher?.data?.items?.dataDetailsVoucherFormated?.products\r\n    };\r\n\r\n    const htmlContentBuyClient = readTemplate(templatePathClient, replacements);\r\n    const htmlContentResortAdmin = readTemplate(templatePathAdminResort, replacements);\r\n\r\n    const mailOptions = [\r\n      {\r\n        from: `\"Up Point\" <${process.env.EMAIL_USER_PASSPORT}>`,\r\n        to: userExists.email,\r\n        subject: \"üéâ Parab√©ns pela compra! Confira seu comprovante!\",\r\n        html: htmlContentBuyClient,\r\n        messageId: `<${Date.now()}-${Math.random().toString(36).slice(2)}>`,\r\n        headers: { \"X-Entity-Ref-ID\": `${Date.now()}` },\r\n      },\r\n      {\r\n        from: `\"Up Point\" <${process.env.EMAIL_USER_PASSPORT}>`,\r\n        to: process.env.EMAIL_USER_PASSPORT,\r\n        subject: `Confirma√ß√£o de compra para o cliente ${userExists.name}`,\r\n        html: htmlContentResortAdmin,\r\n        messageId: `<${Date.now()}-${Math.random().toString(36).slice(2)}>`,\r\n        headers: { \"X-Entity-Ref-ID\": `${Date.now()}` },\r\n      },\r\n    ];\r\n\r\n    try {\r\n      await Promise.all(mailOptions.map((options) => transporter({\r\n        authEmail: process.env.EMAIL_USER_PASSPORT,\r\n        authPassword: process.env.EMAIL_PASSWORD_PASSPORT\r\n      }).sendMail(options)));\r\n\r\n      return {\r\n        data: {\r\n          message: \"Email de confirma√ß√£o de compra enviado para o cliente e o Up Point!\",\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      console.error(err);\r\n      return {\r\n        data: {\r\n          message: \"Erro ao enviar email de confirma√ß√£o de compra.\",\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { GetDispatchVouchersForEmailsService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import nodemailer from 'nodemailer'\r\n\r\ninterface ITransporter {\r\n    authEmail: string,\r\n    authPassword: string\r\n}\r\n\r\nexport const transporter = ({authEmail, authPassword}: ITransporter) => {\r\n    \r\n    return nodemailer.createTransport({\r\n        host: process.env.SMTP_HOST_NODEMAILER ?? 'smtp.gmail.com',\r\n        port: 465,\r\n        secure: true,\r\n        auth: {\r\n            user: authEmail,\r\n            pass: authPassword\r\n        }\r\n    })\r\n}","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\n\r\ninterface IValidatorPermissions {\r\n    typeAccess: string,\r\n}\r\n\r\n\r\nexport const validatorPermissions = ({typeAccess}: IValidatorPermissions) => {\r\n  return (typeAccess === TypesAccess.Owner || typeAccess === TypesAccess.Developer || typeAccess === TypesAccess.Master || typeAccess === TypesAccess.Admin)\r\n \r\n}\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\n\r\ninterface IGetDetailsVoucher {\r\n  idUserLogged: string;\r\n  id: string;\r\n  idOtherUser?: string | null; // Novo campo opcional\r\n}\r\n\r\nclass GetDetailsVoucherService {\r\n  async execute({\r\n    id,\r\n    idUserLogged,\r\n    idOtherUser,\r\n  }: IGetDetailsVoucher) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir com est√° a√ß√£o, id do voucher n√£o informado\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!idUserLogged) {\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir com est√° a√ß√£o, id do respons√°vel n√£o informado\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Verifica se o voucher existe\r\n    const voucherExists = await prismaClient.purchases.findFirst({\r\n      where: { id },\r\n    });\r\n\r\n    if (!voucherExists) {\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir, o voucher n√£o foi emitido e n√£o existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Verifica se o usu√°rio logado existe\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: idUserLogged },\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"N√£o foi poss√≠vel prosseguir com est√° a√ß√£o, usu√°rio respons√°vel n√£o existe\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Verifica as permiss√µes do usu√°rio\r\n    const responseValidation = validatorPermissions({\r\n      typeAccess: userExists.typeAccess,\r\n    });\r\n\r\n    // Se idOtherUser for fornecido, valida se o usu√°rio logado tem permiss√£o\r\n    if (idOtherUser && responseValidation === false) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta n√£o tem permiss√£o para buscar os detalhes do voucher de outro usu√°rio.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n    // Define o `idUserToQuery` como `idOtherUser` se passado, caso contr√°rio, usa `idUserLogged`\r\n    const idUserToQuery = idOtherUser ?? idUserLogged;\r\n\r\n    try {\r\n      // Busca os detalhes do voucher\r\n      const dataResponseVoucher = await prismaClient.purchases.findFirst({\r\n        where: {\r\n          id,\r\n          idUser: idUserToQuery, \r\n        },\r\n        select: {\r\n          id: true,\r\n          idUser: true,\r\n          idMethodPayment: true,\r\n          codePayment: true,\r\n          methodsPayments:true, \r\n          codeReferencePayment: true,\r\n          datePayment: true,\r\n          totalPrice: true,\r\n          status: true,\r\n          products: true,\r\n          created_At: true,\r\n        },\r\n      });\r\n\r\n      if (!dataResponseVoucher) {\r\n        return {\r\n          data: {\r\n            message: \"N√£o foi poss√≠vel prosseguir com est√° a√ß√£o, essa compra n√£o existe!\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n      \r\n      // Formata os dados do voucher\r\n      const dataDetailsVoucherFormated = {\r\n        ...dataResponseVoucher,\r\n        products: typeof dataResponseVoucher?.products === 'string' ? JSON.parse(dataResponseVoucher.products) : dataResponseVoucher.products,\r\n        datePayment: formatterDateToIso(dataResponseVoucher.datePayment),\r\n      };\r\n\r\n      return {\r\n        data: {\r\n          items: {\r\n            dataDetailsVoucherFormated,\r\n          },\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        data: {\r\n          message: MessagesError.GetDetailsMessageError,\r\n          error: error?.message,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { GetDetailsVoucherService };\r\n","\r\n\r\n\r\nexport const formatterPrice = (value?: number) => {\r\n\r\n    if(value){\r\n        const priceFormated = new Intl.NumberFormat('pt-BR', {\r\n            style: \"currency\",\r\n            currency: \"BRL\"\r\n        }).format(value)\r\n        return priceFormated \r\n    }\r\n  \r\n}\r\n\r\n\r\nexport const formatterCurrency = (value?: number | null) => {\r\n    if (value !== null && value !== undefined) {\r\n        const currency = new Intl.NumberFormat('pt-BR', {\r\n            style: 'currency',\r\n            currency: 'BRL'\r\n        }).format(value / 100); // Divide o valor por 100 para obter o valor real em reais\r\n        return currency;\r\n    }\r\n    return \"R$ 0,00\"; // Valor padr√£o para casos nulos\r\n};","export const formatterCPF = (cpf: string) => {\r\n    const cleanedCPF = cpf.replace(/\\D/g, '');\r\n\r\n\r\n    /*\r\n      if (cleanedCPF.length !== 11) {\r\n        throw new Error('CPF inv√°lido. Deve conter 11 d√≠gitos.');\r\n       }\r\n\r\n    */\r\n\r\n    const formattedCPF = cleanedCPF.replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\r\n\r\n    return formattedCPF;\r\n};\r\n"],"mappings":"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","names":["nodemailer","path","replacements","fs"]}