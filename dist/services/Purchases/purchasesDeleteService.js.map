{"version":3,"sources":["../../../src/services/Purchases/purchasesDeleteService.ts","../../../src/prisma/index.ts","../../../src/services/Bin/binRegisterMoveItemsService.ts"],"sourcesContent":["import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { BinRegisterMoveItemsService } from \"../Bin/binRegisterMoveItemsService\";\r\n\r\ninterface IPurchasesDeleteService {\r\n  id: string;\r\n  idUserLogged: string;\r\n}\r\n\r\nclass PurchasesDeleteService {\r\n  async execute({ id, idUserLogged }: IPurchasesDeleteService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir, envie o id da compra para prosseguir\",\r\n          fields: [\"/purchases/:id\"],\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserLogged,\r\n      },\r\n    });\r\n\r\n    const purchasesExists = await prismaClient.purchases.findFirst({\r\n      where: {\r\n        id: id,\r\n        //idUser: idUserLogged\r\n      },\r\n    });\r\n\r\n    if (!purchasesExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir, sua compra não foi encontrada!\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir, o responsável não foi encontrado!\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userLoggedExists?.typeAccess !== TypesAccess.Owner &&\r\n      userLoggedExists?.typeAccess !== TypesAccess.Developer &&\r\n      userLoggedExists?.typeAccess !== TypesAccess.Master\r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir, sua conta não possui permissão para esta ação apenas contas master!\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const binRegisterItemsService = new BinRegisterMoveItemsService();\r\n      const responseDelete = await binRegisterItemsService.execute({\r\n        id: id,\r\n        tableName: \"purchases\",\r\n        idUserOwner: purchasesExists.idUser,\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: responseDelete.data.message,\r\n          status: responseDelete.data.status,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.DeleteMessageError} ${err}`,\r\n          error: err,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { PurchasesDeleteService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","import prismaClient from \"../../prisma\";\r\n\r\n\r\n\r\ninterface IBinRegisterItemsService {\r\n    id: string;\r\n    idUserOwner: string;\r\n    tableName: string;\r\n}\r\n\r\nclass BinRegisterMoveItemsService {\r\n    async execute({id, idUserOwner, tableName}: IBinRegisterItemsService){\r\n        if(!idUserOwner){\r\n            return {\r\n                data :{\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n                    status:400\r\n                }\r\n            }\r\n        }\r\n\r\n        if((!id || !tableName)){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const item = await prismaClient.$queryRawUnsafe(`SELECT * FROM ${tableName} WHERE id = '${id}'`)\r\n        \r\n\r\n        try {\r\n            await prismaClient.bin.create({\r\n                data: {\r\n                  tableName,\r\n                  itemId: id,\r\n                  idUserOwner: idUserOwner,\r\n                  data: JSON.stringify(item)   \r\n                }\r\n            })\r\n            await prismaClient.$executeRawUnsafe(`DELETE FROM ${tableName} WHERE id = '${id}'`)\r\n\r\n            return {\r\n                data: {\r\n                   message: `Item movido para a lixeira com sucesso`,\r\n                   status: 200\r\n                }\r\n         \r\n            }\r\n        } catch(err){\r\n            return {\r\n                data: {\r\n                    message: `Ocorreu um erro ao mover item para a lixeira ${err}`,\r\n                    status: 500\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {BinRegisterMoveItemsService}"],"mappings":"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","names":[]}