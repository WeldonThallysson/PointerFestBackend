{"version":3,"sources":["../../../src/services/Events/editarEventoService.ts","../../../src/prisma/index.ts"],"sourcesContent":["import prismaClient from \"../../prisma\";\r\n\r\ninterface EditarEventoServiceType {\r\n  id: string;\r\n  idUserOwner: string;\r\n  idProduct: string;\r\n  name: string;\r\n  description: string;\r\n  localityEvent: string;\r\n  urlLocalityEvent: string;\r\n  bannerImageUrl: string;\r\n  dateEvent: string;\r\n  hourEvent: string;\r\n  idCategory: string; \r\n  restrictionsEvent?: string;\r\n  placesPurchaseTicket: string;\r\n  urlPostSocialNetwork: string;\r\n  phoneForContact?: string;\r\n  status?: boolean | null\r\n}\r\n\r\nclass EditarEventosService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n    idProduct,\r\n    name,\r\n    description,\r\n    localityEvent,\r\n    urlLocalityEvent,\r\n    bannerImageUrl,\r\n    dateEvent,\r\n    hourEvent,\r\n    idCategory,\r\n    restrictionsEvent,\r\n    placesPurchaseTicket,\r\n    urlPostSocialNetwork,\r\n    phoneForContact,\r\n    status\r\n  }: EditarEventoServiceType) {\r\n\r\n\r\n    //idUserOwner\r\n\r\n\r\n    const editar = await prismaClient.events.update({\r\n      where: {\r\n        id: id,\r\n      },\r\n\r\n      data: {\r\n      name: name,\r\n      \r\n      description: description,\r\n      idProduct: idProduct,\r\n      idCategory: idCategory,\r\n      localityEvent: localityEvent,\r\n      urlLocalityEvent: urlLocalityEvent,\r\n      bannerImageUrl: \"\", // aqui vai a url do evento,\r\n      dateEvent: dateEvent,\r\n      hourEvent: hourEvent,\r\n      restrictionsEvent: restrictionsEvent,\r\n      placesPurchaseTicket: placesPurchaseTicket,\r\n      urlPostSocialNetwork: urlPostSocialNetwork,\r\n      phoneForContact: phoneForContact,\r\n      status: status ? status : true,\r\n      },\r\n    });\r\n    return editar;\r\n  }\r\n}\r\n\r\nexport { EditarEventosService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,IAAM,eAAe,IAAI,2BAAa;AAEtC,IAAO,iBAAQ;;;ADiBf,IAAM,uBAAN,MAA2B;AAAA,EACnB,QAAQ,IAiBc;AAAA,+CAjBd;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAA4B;AAM1B,YAAM,SAAS,MAAM,eAAa,OAAO,OAAO;AAAA,QAC9C,OAAO;AAAA,UACL;AAAA,QACF;AAAA,QAEA,MAAM;AAAA,UACN;AAAA,UAEA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,gBAAgB;AAAA;AAAA,UAChB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAQ,SAAS,SAAS;AAAA,QAC1B;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAAA;AACF;","names":[]}