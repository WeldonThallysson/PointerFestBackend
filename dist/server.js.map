{"version":3,"sources":["../src/server.ts","../src/routes.ts","../src/services/Users/Auth/usersRegisterService.ts","../src/prisma/index.ts","../src/utils/desformatter/index.ts","../src/utils/formatters/formatterDate.ts","../src/utils/formatters/formatterToday.ts","../src/utils/validators/validatorAge.ts","../src/utils/validators/validatorCNPJ.ts","../src/utils/validators/validatorCPF.ts","../src/utils/validators/validatorDate.ts","../src/utils/validators/validatorEmail.ts","../src/utils/validators/validatorFieldsEmpty.ts","../src/utils/validators/validatorPhone.ts","../src/utils/validationsServices/validationsUserService.ts","../src/controllers/Users/Auth/usersRegisterController.ts","../src/services/Users/Auth/usersLoginService.ts","../src/controllers/Users/Auth/usersLoginController.ts","../src/utils/formatters/formatterCEP.ts","../src/utils/formatters/formatterCNPJ.ts","../src/utils/formatters/formatterCPF.ts","../src/services/Users/usersGetDetailsService.ts","../src/controllers/Users/usersGetDetailsController.ts","../src/middlewares/isLogged.ts","../src/utils/validators/validatorPermissions.ts","../src/services/Users/usersDeleteService.ts","../src/controllers/Users/usersDeleteController.ts","../src/utils/validationsServices/validationsCategories.ts","../src/services/Categories/categoriesRegisterService.ts","../src/controllers/Categories/categoriesRegisterController.ts","../src/services/Categories/categoriesGetAllService.ts","../src/controllers/Categories/categoriesGetAllController.ts","../src/services/Categories/categoriesGetDetailsService.ts","../src/controllers/Categories/categoriesGetDetailsController.ts","../src/services/Categories/categoriesEditService.ts","../src/controllers/Categories/categoriesEditController.ts","../src/services/Bin/binRegisterMoveItemsService.ts","../src/services/Categories/categoriesDeleteService.ts","../src/controllers/Categories/categoriesDeleteController.ts","../src/services/Events/cadastrarEventoService.ts","../src/controllers/Events/cadastrarEventoController.ts","../src/services/Events/listarTodosEventosService.ts","../src/controllers/Events/listarTodosEventosController.ts","../src/services/Events/listarEventoIdService.ts","../src/controllers/Events/listarEventoIdController.ts","../src/config/multer.ts","../src/services/Events/editarEventoService.ts","../src/controllers/Events/editarEventoController.ts","../src/services/Events/deletarEventoService.ts","../src/controllers/Events/deletarEventoController.ts","../src/services/Users/usersEditService.ts","../src/controllers/Users/usersEditController.ts","../src/services/Users/usersGetAllSevice.ts","../src/controllers/Users/usersGetAllController.ts","../src/utils/validationsServices/validationsProducts.ts","../src/services/Products/productsRegisterService.ts","../src/controllers/Products/productsRegisterController.ts","../src/services/Products/productsGetAllService.ts","../src/controllers/Products/productsGetAllController.ts","../src/services/Products/productsDeleteService.ts","../src/controllers/Products/productDeleteController.ts","../src/services/Products/productsGetDetailsSevice.ts","../src/controllers/Products/productsGetDetailsController.ts","../src/services/Products/productEditService.ts","../src/controllers/Products/productsEditController.ts","../src/services/Users/usersGetAllListService.ts","../src/controllers/Users/usersListUsersController.ts","../src/services/Users/PasswordRecover/recoverPasswordUserService.ts","../src/config/nodemailerConfig.ts","../src/controllers/Users/PasswordRecover/recoverPasswordUserController.ts","../src/services/Users/PasswordRecover/redefinePasswordUserService.ts","../src/controllers/Users/PasswordRecover/redefinePasswordUserController.ts","../src/services/Users/Permissions/allowAccessUserServices.ts","../src/controllers/Users/Permissions/allowAccessUserController.ts","../src/services/Users/Permissions/allowUpdateTutorialFirstAccessService.ts","../src/controllers/Users/Permissions/allowUpdateTutorialFirstAccessController.ts","../src/services/Users/Permissions/allowUpdateTermsService.ts","../src/controllers/Users/Permissions/allowUpdateTermsController.ts","../src/services/Users/usersRegisterOtherService.ts","../src/controllers/Users/usersRegisterController.ts","../src/services/Bin/binDeleteItemsService.ts","../src/controllers/Bin/binDeleteItemsController.ts","../src/services/Bin/binEditItemsService.ts","../src/controllers/Bin/binEditItemsController.ts","../src/controllers/Bin/binRegisterMoveItemsController.ts","../src/services/Bin/binGetDetailsItemsService.ts","../src/controllers/Bin/binGetDetailsItemsController.ts","../src/services/Bin/binGetAllItemsService.ts","../src/controllers/Bin/binGetAllItemsController.ts","../src/services/Bin/binRestoreItemsService.ts","../src/controllers/Bin/binRestoreItemsController.ts"],"sourcesContent":["import express,{ Request,Response,NextFunction } from \"express\";\r\nimport { router } from \"./routes\";\r\nimport cors from 'cors'\r\nimport path from 'path'\r\nimport fileUpload from \"express-fileupload\";\r\nimport {v2 as cloudinary} from 'cloudinary'\r\n\r\nconst app = express()\r\n\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_NAME,\r\n    api_key: process.env.CLOUDINARY_KEY,\r\n    api_secret: process.env.CLOUDINARY_SECRET\r\n})\r\n\r\napp.use(cors())\r\n\r\napp.use(fileUpload({\r\n    limits: {\r\n        fileSize: 50 * 1024 * 1024\r\n    }\r\n}))\r\n\r\napp.use(express.json())\r\n\r\n\r\n/*\r\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\r\n    if(err instanceof Error){\r\n        return res.status(400).json({\r\n            err: err.message\r\n        })\r\n    }\r\n\r\n    return res.status(500).json({\r\n        status:\"error\",\r\n        message: \"internal error server\"\r\n    })\r\n}) // esse middleware serve para enviar todos os erros de uma forma amigavel e bonita.\r\n\r\n\r\n*/\r\napp.use(router)\r\napp.use(\"/files\",\r\n  express.static(path.resolve(__dirname,\"..\",\"tmp\"))\r\n)\r\napp.listen({ \r\n    host: '0.0.0.0',\r\n    port: process.env.PORT ? Number(process.env.PORT) : 3333\r\n   }, () => {\r\n   console.log(\"Servidor Online\")\r\n})\r\n\r\n\r\n","import { Router,Request,Response } from \"express\";\r\n\r\nimport { UsersRegisterController } from \"./controllers/Users/Auth/usersRegisterController\";  \r\nimport { UsersLoginController } from \"./controllers/Users/Auth/usersLoginController\"; \r\n\r\nimport { UsersGetDetailsController } from \"./controllers/Users/usersGetDetailsController\";\r\n \r\nimport { isLogged } from \"./middlewares/isLogged\";\r\nimport { UsersDeleteController } from \"./controllers/Users/usersDeleteController\";\r\nimport { CategoriesRegisterController } from \"./controllers/Categories/categoriesRegisterController\";\r\nimport { CategoriesGetAllController } from \"./controllers/Categories/categoriesGetAllController\";\r\nimport { CategoriesGetDetailsController } from \"./controllers/Categories/categoriesGetDetailsController\";\r\nimport { CategoriesEditController } from \"./controllers/Categories/categoriesEditController\";\r\nimport { CategoriesDeleteController } from \"./controllers/Categories/categoriesDeleteController\";\r\n \r\nimport { CadastrarEventoController } from \"./controllers/Events/cadastrarEventoController\";\r\nimport { ListarTodosEventosController } from \"./controllers/Events/listarTodosEventosController\";\r\nimport { ListarEventoIdController } from \"./controllers/Events/listarEventoIdController\";\r\nimport multer from \"multer\";\r\nimport uploadConfig from '../src/config/multer';\r\nimport { EditarEventoController } from \"./controllers/Events/editarEventoController\";\r\nimport { DeletarEventoController } from \"./controllers/Events/deletarEventoController\";\r\nimport { UsersEditController } from \"./controllers/Users/usersEditController\";\r\nimport { UsersGetAllController } from \"./controllers/Users/usersGetAllController\";\r\nimport { ProductRegisterController } from \"./controllers/Products/productsRegisterController\";\r\n\r\nimport { ProductGetAllController } from \"./controllers/Products/productsGetAllController\";\r\nimport { ProductsDeleteController } from \"./controllers/Products/productDeleteController\";\r\nimport { ProductGetDetailsController } from \"./controllers/Products/productsGetDetailsController\";\r\nimport { ProductsEditController } from \"./controllers/Products/productsEditController\";\r\nimport { UsersGetAllListController } from \"./controllers/Users/usersListUsersController\";\r\nimport { RecoverPasswordController } from \"./controllers/Users/PasswordRecover/recoverPasswordUserController\";\r\nimport { RedefinePasswordController } from \"./controllers/Users/PasswordRecover/redefinePasswordUserController\";\r\nimport { AllowAccessUserController } from \"./controllers/Users/Permissions/allowAccessUserController\";\r\nimport { AllowUpdateTutorialFirstAccessController } from \"./controllers/Users/Permissions/allowUpdateTutorialFirstAccessController\";\r\nimport { AllowUpdateTermsController } from \"./controllers/Users/Permissions/allowUpdateTermsController\";\r\nimport { UsersRegisterOtherController } from \"./controllers/Users/usersRegisterController\";\r\nimport { BinDeleteItemsController } from \"./controllers/Bin/binDeleteItemsController\";\r\nimport { BinEditItemsController } from \"./controllers/Bin/binEditItemsController\";\r\nimport { BinRegisterMoveItemsController } from \"./controllers/Bin/binRegisterMoveItemsController\";\r\nimport { BinGetDetailsItemsController } from \"./controllers/Bin/binGetDetailsItemsController\";\r\nimport { BinGetAllItemsController } from \"./controllers/Bin/binGetAllItemsController\";\r\nimport { BinRestoreItemsController } from \"./controllers/Bin/binRestoreItemsController\";\r\n\r\nconst router = Router()\r\n\r\nconst upload = multer(uploadConfig.upload(\"./tmp\")) \r\n//rotas para criar um cadastro, login e detalhes do usuario\r\n\r\nrouter.get(\"/\", (req: Request, res: Response) => {\r\n    return res.status(200).json({\r\n        status: 200,\r\n        message: 'API disponível e online'\r\n    })\r\n})\r\n\r\n\r\nrouter.post(\"/auth/login\", new UsersLoginController().handle); // endpoint para login\r\nrouter.post(\"/auth/register\", new UsersRegisterController().handle); // endpoint para cadastrar uma conta cliente normal\r\nrouter.post(\"/auth/recoverpassword\", new RecoverPasswordController().handle) // endpoint para requerir a recuperação de senha com email\r\nrouter.post(\"/auth/redefinepassword\", new RedefinePasswordController().handle) // endpoint para redefinir a senha com token gerado pelo sistema.\r\n\r\n// rotas para os usuários\r\n\r\n \r\nrouter.post(\"/users\", new UsersRegisterOtherController().handle); \r\nrouter.get(\"/users/list\", isLogged, new UsersGetAllListController().handle)\r\nrouter.get(\"/users/:id\", isLogged, new UsersGetDetailsController().handle)\r\nrouter.delete(\"/users/:id\", isLogged, new UsersDeleteController().handle)\r\nrouter.put(\"/users\", isLogged, new UsersEditController().handle)\r\nrouter.get(\"/users\", isLogged, new UsersGetAllController().handle)\r\n\r\nrouter.put(\"/users/permissions\", isLogged, new AllowAccessUserController().handle); // endpoint para contas master poderem tornar outras contas master\r\nrouter.put(\"/users/firstAcess\", isLogged, new AllowUpdateTutorialFirstAccessController().handle)\r\n \r\nrouter.put(\"/users/terms\", isLogged, new AllowUpdateTermsController().handle);//atualiza\r\n\r\n// endpoint para a lixeira\r\nrouter.post(\"/bin\", isLogged, new BinRegisterMoveItemsController().handle);\r\nrouter.get(\"/bin/:id\", isLogged, new BinRestoreItemsController().handle)\r\nrouter.put(\"/bin\", isLogged, new BinEditItemsController().handle);\r\nrouter.get(\"/bin\", isLogged, new BinGetAllItemsController().handle);\r\nrouter.get(\"/bin\", isLogged, new BinGetDetailsItemsController().handle);\r\nrouter.delete(\"/bin/:id\", isLogged, new BinDeleteItemsController().handle);\r\n\r\n\r\n// rotas para cadastrar categorias \r\nrouter.post(\"/categories\", isLogged, new CategoriesRegisterController().handle) // essa rota vai ser chamada no Aplicativo front end( admin )\r\nrouter.get(\"/categories\", isLogged, new CategoriesGetAllController().handle)  // essa rota vai ser chamada no Aplicativo front end( usuario )\r\nrouter.get(\"/categories/:id\", isLogged, new CategoriesGetDetailsController().handle) // essa rota vai ser chamada no Aplicativo front end( admin )\r\nrouter.put(\"/categories\", isLogged, new CategoriesEditController().handle) // essa rota vai ser chamada no Aplicativo front end( admin )\r\nrouter.delete(\"/categories/:id\", isLogged, new CategoriesDeleteController().handle) // essa rota vai ser chamada no Aplicativo front end( admin )\r\n\r\n// rotas para cadastrar Eventos\r\n\r\nrouter.post(\"/eventos\", isLogged, new CadastrarEventoController().handle)   // essa rota vai ser chamada no Aplicativo front end( usuario )\r\nrouter.get(\"/eventos\", isLogged, new ListarTodosEventosController().handle)   // essa rota vai ser chamada no Aplicativo front end( usuario)\r\nrouter.get(\"/eventos/:id\", isLogged, new ListarEventoIdController().handle)   // essa rota vai ser chamada no Aplicativo front end( usuario)\r\nrouter.put(\"/eventos\", isLogged, upload.single('bannerEvento'), new EditarEventoController().handle)   // essa rota vai ser chamada no Aplicativo front end( usuario)\r\nrouter.delete(\"/eventos/:id\", isLogged,new DeletarEventoController().handle)   // essa rota vai ser chamada no Aplicativo front end( usuario)\r\n\r\n\r\n// rotas para cadastrar os produtos da Up Point \r\nrouter.post(\"/produtos\", isLogged, new ProductRegisterController().handle)\r\nrouter.put(\"/produtos\", isLogged, new ProductsEditController().handle)\r\nrouter.get(\"/produtos\", isLogged, new ProductGetAllController().handle)\r\nrouter.get(\"/produtos/:id\", isLogged, new ProductGetDetailsController().handle)\r\nrouter.delete(\"/produtos/:id\", isLogged, new ProductsDeleteController().handle)\r\n\r\nexport {router}","import { hash } from \"bcryptjs\";\r\nimport prismaClient from \"../../../prisma\";\r\nimport { deformatter } from \"../../../utils/desformatter\";\r\nimport { formatterDateToIso } from \"../../../utils/formatters/formatterDate\";\r\nimport { todayWithTime } from \"../../../utils/formatters/formatterToday\";\r\nimport { TypePerson } from \"../../../keys/typePerson/typePerson\";\r\nimport { validationsUserService } from \"../../../utils/validationsServices/validationsUserService\";\r\n\r\ninterface IUsersRegisterService {\r\n  name: string;\r\n  companyName?: string | null;\r\n  cpfCnpj:  string;\r\n  typePerson: TypePerson\r\n  email: string;\r\n  birthDate: string;\r\n  gender: string;\r\n  phone: string;\r\n  password: string;\r\n  termsUsePlatform?: boolean | null;\r\n  termsUseLGPD?: boolean | null;\r\n  termsPrivacyPolicy?: boolean | null;\r\n  termsReceiptNews?: boolean | null\r\n}\r\n\r\nclass UsersRegisterService {\r\n  async execute({\r\n    name,\r\n    companyName,\r\n    email,\r\n    cpfCnpj,\r\n    typePerson,\r\n    password,\r\n    birthDate,\r\n    gender,\r\n    phone,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    termsReceiptNews\r\n  }: IUsersRegisterService) {\r\n \r\n    const verifyValidations = validationsUserService({\r\n      name,\r\n      companyName,\r\n      email,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      typePerson,\r\n      password: password ? password : null,\r\n    });\r\n    \r\n    if(verifyValidations){\r\n      return verifyValidations\r\n    };\r\n\r\n    const verifyAccountExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        cpfCnpj: cpfCnpj,\r\n      },\r\n    });\r\n\r\n    if (verifyAccountExists) {\r\n      return {\r\n        data: {\r\n          message: `Não foi possível realizar está ação, esse ${typePerson === TypePerson.Fisic ? \"CPF\" : \"CNPJ\"} está em uso.`,\r\n          status: 403,\r\n        },\r\n      };\r\n    };\r\n\r\n  \r\n    const passwordHash = await hash(password, 8);\r\n    const todayAt = todayWithTime();\r\n\r\n     await prismaClient.users.create({\r\n      data: {\r\n        name: name,\r\n        companyName: companyName !== null ? companyName : null,\r\n        email: email,\r\n        password: passwordHash,\r\n        cpfCnpj: deformatter(cpfCnpj),\r\n        birthDate: formatterDateToIso(birthDate),\r\n        gender: gender,\r\n        phone: deformatter(phone),\r\n        typePerson: typePerson,\r\n        termsUsePlatform: termsUsePlatform !== null ? termsUsePlatform : null,\r\n        termsUseLGPD: termsUseLGPD !== null ? termsUseLGPD : null, \r\n        termsPrivacyPolicy: termsPrivacyPolicy !== null ? termsPrivacyPolicy : null,\r\n        termsReceiptNews: termsReceiptNews !== null ? termsReceiptNews : null,\r\n        created_At: todayAt,\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Cadastro realizado com sucesso!\",\r\n        status: 200,\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersRegisterService };\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClient = new PrismaClient()\r\n\r\nexport default prismaClient;\r\n","export const deformatter = (item: string) => {\r\n    \r\n    // Remove todos os caracteres não numéricos\r\n    return item.replace(/\\D/g, \"\");\r\n  };\r\n  ","import { format, parseISO } from \"date-fns\";\r\n\r\nexport const formatterDate = (date: string) => {\r\n    // Parseia a data no formato ISO\r\n    const formattedBirthDate = parseISO(date);\r\n    return formattedBirthDate; // Retorna o objeto Date\r\n}\r\n\r\nexport const formatterDateToIso = (date: Date | string) => {\r\n    const dateObject = typeof date === \"string\" ? parseISO(date) : date;\r\n    const formattedBirthDate = format(dateObject, \"yyyy-MM-dd\"); \r\n    return formattedBirthDate;\r\n};\r\n\r\nexport const formatterDateToString = (item: string | null) => {\r\n    if (item) {\r\n        // Divide a string de data no formato \"YYYY-MM-DD\"\r\n        const [year, month, day] = item.split('-'); \r\n        // Retorna a data formatada no formato \"DD/MM/YYYY\"\r\n        return `${day}/${month}/${year}`;\r\n    }\r\n    // Retorna null se o item for nulo\r\n    return null; \r\n};\r\n\r\n","import {DateTime} from 'luxon'\r\n\r\nconst today = new Date();\r\n\r\nexport const todayFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n  })\r\n    .format(today)\r\n    .split(\"/\")\r\n    .reverse()\r\n    .join(\"-\"); // Converte para YYYY-MM-DD\r\n\r\n\r\nexport const todayFormattedWithTime = (dateNow: Date) => {\r\n  new Intl.DateTimeFormat(\"pt-BR\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\", // Inclui as horas no formato de 2 dígitos\r\n    minute: \"2-digit\", // Inclui os minutos no formato de 2 dígitos\r\n    timeZone: \"America/Sao_Paulo\", // Garante o horário do Brasil\r\n}).format(dateNow).replace(',', ''); // Remove a vírgula entre data e hora\r\n\r\n\r\n}\r\n  \r\n\r\nexport const todayFormattedWithTimeToIso = (dateNow: Date): string => {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    timeZone: \"America/Sao_Paulo\",\r\n    hour12: false, // Para garantir o formato 24h\r\n  };\r\n\r\n  // Obter a data e hora formatadas no padrão ISO customizado\r\n  const formatted = new Intl.DateTimeFormat(\"pt-BR\", options)\r\n    .format(dateNow)\r\n    .replace(',', ''); // Remove vírgula\r\n\r\n  // Converter \"DD/MM/AAAA HH:MM\" para \"AAAA-MM-DD HH:MM\"\r\n  const [date, time] = formatted.split(' ');\r\n  const [day, month, year] = date.split('/');\r\n  return `${year}-${month}-${day} ${time}`;\r\n};\r\n\r\n\r\n\r\nexport const todayWithTime = (): string => {\r\n\r\n  const now = DateTime.now().setZone('America/Sao_Paulo');\r\n  \r\n  \r\n  return now.toFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n};\r\n\r\n\r\nexport const todayWithTimeAtFormat = (date?: Date | null): string => {\r\n  if (!date) {\r\n    return \"\"; // Retorna uma string vazia se `date` for `null` ou `undefined`.\r\n  }\r\n\r\n  const isoString = date instanceof Date ? date.toISOString() : date; // Garante que seja uma string ISO\r\n  const [datePart, timePart] = isoString.split(\"T\"); // Divide a data em partes (data e hora)\r\n  const [year, month, day] = datePart.split(\"-\"); // Divide a parte da data (YYYY-MM-DD)\r\n  const [hours, minutes] = timePart.split(\":\"); // Divide a parte do tempo (HH:mm:ss)\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};","export const validatorAge = (birthDate: string) => {\r\n    const today = new Date(); // Data atual\r\n    const birth = new Date(birthDate); // Data de nascimento do payload\r\n  \r\n    // Calcula a diferença de anos\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n  \r\n    // Ajusta a idade se o aniversário ainda não aconteceu este ano\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n  \r\n    return age < 18; // Retorna true se maior ou igual a 18, caso contrário false\r\n  };","\r\n\r\nexport const validatorCNPJ = (value: string) => {\r\n    const cnpjRegex = /^\\d{14}$/;\r\n    return cnpjRegex.test(value);\r\n};\r\n\r\n\r\n","\r\n\r\n\r\n\r\nexport const validatorCPF = (value:string) => {\r\n    const cpfRegex = /^\\d{11}$/;\r\n    const isCPF = cpfRegex.test(value)\r\n\r\n    return isCPF\r\n}\r\n","import { isValid, parseISO } from \"date-fns\";\r\n\r\nexport const validateBirthDate = (dateString: string) => {\r\n    const date = parseISO(dateString); \r\n    return isValid(date); \r\n  }\r\n  ","\r\n\r\nexport const validatorEmail = (value:string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const isEmail = emailRegex.test(value)\r\n\r\n    return isEmail\r\n}","\r\n\r\n\r\nexport const validatorFieldsEmpty = (...fields: (string | number | null)[]): boolean => {\r\n    return fields.some(field => !field ||  field === \"\" || field === null)\r\n}","export const isValidPhoneNumber = (phoneNumber: string) => {\r\n\r\n    const phoneRegex = /^(\\d{1,3})(\\d{1,4})(\\d{6,10})$/;\r\n\r\n    const match = phoneRegex.exec(phoneNumber);\r\n\r\n    if (!match) return false;\r\n\r\n    const countryCode = match[1]; \r\n    const areaCode = match[2];     \r\n    const number = match[3];      \r\n\r\n  \r\n    if (countryCode === '55') {\r\n      \r\n        const isValidBrazilAreaCode = areaCode.length >= 2 && areaCode.length <= 4;\r\n      \r\n        const isValidBrazilNumber = number.length >= 8 && number.length <= 9;\r\n\r\n        return isValidBrazilAreaCode && isValidBrazilNumber;\r\n    } else {\r\n    \r\n        const isValidAreaCode = areaCode.length >= 1 && areaCode.length <= 4;\r\n\r\n      \r\n        const isValidNumber = number.length >= 6 && number.length <= 10;\r\n\r\n        return isValidAreaCode && isValidNumber;\r\n    }\r\n}\r\n\r\n","import { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { validatorAge } from \"../validators/validatorAge\";\r\nimport { validatorCNPJ } from \"../validators/validatorCNPJ\";\r\nimport { validatorCPF } from \"../validators/validatorCPF\";\r\nimport { validateBirthDate } from \"../validators/validatorDate\";\r\nimport { validatorEmail } from \"../validators/validatorEmail\";\r\nimport { validatorFieldsEmpty } from \"../validators/validatorFieldsEmpty\";\r\nimport { isValidPhoneNumber } from \"../validators/validatorPhone\";\r\n\r\ninterface IParamsUserService {\r\n  name: string; // nome do cliente ou administrador\r\n  companyName?: string | null\r\n  email: string; // email\r\n  password?: string; // senha\r\n  cpfCnpj: string; // cpf\r\n  phone: string; // numero de telefone\r\n  birthDate?: string | null; // Data de nascimento\r\n  residence?: string; // casa ou detalhe da morada\r\n  neighborhood?: string; // bairro\r\n  address?: string; // endereço\r\n  city?: string; // cidade\r\n  cep?: string,\r\n  region_code?: string,\r\n  number_address?: string,\r\n  typePerson?: TypePerson,\r\n  gender?: string; // é o genero ele pode mandar masculino, feminino ou prefiro não dizer\r\n}\r\n\r\nexport const validationsUserService = ({\r\n  name,\r\n  companyName,\r\n  email,\r\n  cpfCnpj,\r\n  phone,\r\n  birthDate,\r\n  gender,\r\n  typePerson,\r\n  password\r\n}: IParamsUserService) => {\r\n\r\n  const validatorEmpty = validatorFieldsEmpty(\r\n    name,\r\n    email,\r\n    cpfCnpj,\r\n    phone,\r\n    gender,\r\n    typePerson\r\n  );\r\n\r\n  if (validatorEmpty) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha todos os campos obrigatórios.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        fields: ['name','email','cpf','phone','typePerson','gender'],\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if (!validatorEmail(email)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, E-mail inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if(!isValidPhoneNumber(phone)){\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Número de telefone inválido.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length < 8 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  \r\n  if(password && password?.length > 14 ){\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if(!companyName && typePerson === TypePerson.Juridic){\r\n     return {\r\n      data: {\r\n        message: \"Não foi possível prosseguir, por favor informe o Nome Fantasia sua Empresa\",\r\n        status: 400\r\n      }\r\n     }\r\n  }\r\n\r\n  if (typePerson !== TypePerson.Fisic && typePerson !== TypePerson.Juridic) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar esta ação, o tipo da pessoa deve ser Física ou Jurídica\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Fisic && !validatorCPF(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CPF inválido. Deve conter 11 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (typePerson === TypePerson.Juridic && !validatorCNPJ(cpfCnpj)) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, CNPJ inválido. Deve conter 14 dígitos.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && birthDate === '') {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, é necessário informar sua data de nascimento !\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (birthDate && !validateBirthDate(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, É necessário ter pelo menos 18 anos para se cadastrar!\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (birthDate && validatorAge(birthDate)) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"A ação não pode ser realizada. É necessário ter pelo menos 18 anos para prosseguir.\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n\r\n};\r\n","import { Request,Response } from \"express\";\r\nimport { UsersRegisterService } from \"../../../services/Users/Auth/usersRegisterService\";\r\n\r\n\r\nclass UsersRegisterController {\r\n    async handle(req: Request, res: Response){\r\n        const {\r\n            name,\r\n            companyName,\r\n            email,\r\n            cpfCnpj,\r\n            typePerson,\r\n            password,\r\n            birthDate,\r\n            gender,\r\n            phone,\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        } = req.body;\r\n\r\n        const usersRegister = new UsersRegisterService()\r\n        const responseUsersRegister = await usersRegister.execute({\r\n            name,\r\n            companyName,\r\n            email,\r\n            cpfCnpj,\r\n            typePerson,\r\n            password,\r\n            birthDate,\r\n            gender,\r\n            phone,\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        });\r\n\r\n         res.status(responseUsersRegister.data.status).json(responseUsersRegister.data)      \r\n    }\r\n\r\n}\r\n\r\nexport {UsersRegisterController};\r\n","import prismaClient from \"../../../prisma\";\r\nimport { compare } from \"bcryptjs\";\r\nimport { sign } from \"jsonwebtoken\";\r\n\r\ninterface IUsersLoginService {\r\n  account: string;\r\n  password: string;\r\n}\r\n\r\nclass UsersLoginService {\r\n  async execute({ account, password }: IUsersLoginService) {\r\n    if (!account) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor, informe seu e-mail, CPF ou CNPJ para continuar.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!password) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor, informe sua senha para continuar.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const users = await prismaClient.users.findFirst({\r\n      where: {\r\n        OR: [\r\n          {\r\n            cpfCnpj: account,\r\n          },\r\n          {\r\n            email: account\r\n          },\r\n        ]\r\n    \r\n    \r\n      },\r\n    });\r\n\r\n    if (!users) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir, este E-mail, CPF ou CNPJ não existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const verifyPassword = await compare(password, users.password);\r\n\r\n    if (!verifyPassword) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir, sua senha está incorreta.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    const token = sign(\r\n      {\r\n        id: users.id,\r\n        name: users.name,\r\n        password: users.password,\r\n      },\r\n      process.env.JWT_SECRET,\r\n      {\r\n        subject: users.id,\r\n        expiresIn: \"30d\",\r\n      }\r\n    );\r\n\r\n    return {\r\n      data: {\r\n        message: `Bem Vindo ${users.name.split(\" \")[0].charAt(0).toUpperCase()}${users.name.split(\" \")[0].slice(1).toLocaleLowerCase()}`,\r\n        token: token,\r\n        status: 200\r\n      }\r\n\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersLoginService };\r\n","import { Request, Response } from \"express\";\r\nimport { UsersLoginService } from \"../../../services/Users/Auth/usersLoginService\";\r\n\r\nclass UsersLoginController {\r\n  async handle(req: Request, res: Response) {\r\n    const { account, password } = req.body;\r\n\r\n    const usersLogin = new UsersLoginService();\r\n    const responseUsersLogin = await usersLogin.execute({\r\n      account,\r\n      password,\r\n    });\r\n\r\n    return res.status(responseUsersLogin?.data?.status).json(responseUsersLogin?.data);\r\n  }\r\n}\r\n\r\nexport { UsersLoginController };\r\n","export const formatterCEP = (cep: string) => {\r\n    if(cep){\r\n        const cleanedCEP = cep.replace(/\\D/g, '');\r\n        /*\r\n         if (cleanedCEP.length !== 8) {\r\n            throw new Error('CEP inválido. Deve conter 8 dígitos.');\r\n        }\r\n    \r\n        */\r\n        const formattedCEP = cleanedCEP.replace(/(\\d{5})(\\d{3})/, '$1-$2');\r\n    \r\n        return formattedCEP;\r\n    }\r\n\r\n    return null\r\n   \r\n};","\r\n\r\n\r\n\r\nexport const formatterCNPJ = (cnpj: string) => {\r\n  const cleanedCNPJ = cnpj.replace(/\\D/g, '');  \r\n\r\n  const formattedCNPJ = cleanedCNPJ.replace(/^(\\d{2})(\\d)/, '$1.$2')\r\n                                   .replace(/^(\\d{2})\\.(\\d{3})(\\d)/, '$1.$2.$3')\r\n                                   .replace(/\\.(\\d{3})(\\d)/, '.$1/$2')\r\n                                   .replace(/(\\d{4})(\\d{2})$/, '$1-$2');\r\n\r\n  return formattedCNPJ;\r\n};\r\n","export const formatterCPF = (cpf: string) => {\r\n    const cleanedCPF = cpf.replace(/\\D/g, '');\r\n\r\n\r\n    /*\r\n      if (cleanedCPF.length !== 11) {\r\n        throw new Error('CPF inválido. Deve conter 11 dígitos.');\r\n       }\r\n\r\n    */\r\n\r\n    const formattedCPF = cleanedCPF.replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n                                    .replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\r\n\r\n    return formattedCPF;\r\n};\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { formatterCEP } from \"../../utils/formatters/formatterCEP\";\r\nimport { formatterCNPJ } from \"../../utils/formatters/formatterCNPJ\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\n\r\ninterface IUsersGetDetailsService {\r\n  id: string;\r\n  idUserLogged: string;\r\n}\r\n\r\nclass UsersGetDetailsService {\r\n  async execute({ id, idUserLogged }: IUsersGetDetailsService) {\r\n\r\n    if (!id) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível realizar esta ação, por favor informe o (id) do usuário.\",\r\n            status: 400,\r\n          },\r\n         \r\n        };\r\n    }\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n        where: { id: idUserLogged },\r\n        select: {\r\n            id: true,\r\n            name: true,\r\n            companyName: true,\r\n            email: true,\r\n            phone: true,\r\n            cpfCnpj: true,\r\n            birthDate: true,\r\n            gender: true,\r\n            city: true,\r\n            neighborhood: true, \r\n            cep: true,\r\n            number_address: true,\r\n            region_code: true,\r\n            typeAccess: true,\r\n      \r\n            status: true, \r\n            created_At: true\r\n        }\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n                status: 404,  \r\n            },\r\n         \r\n        };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n        where: {  \r\n         id: {\r\n           contains: id,\r\n         }, \r\n       },\r\n        select: {\r\n            id: true,\r\n            name: true,\r\n            companyName: true,\r\n            email: true,\r\n            cpfCnpj: true,\r\n            birthDate: true,\r\n            phone: true,\r\n            gender: true,\r\n            \r\n            city: true,\r\n            neighborhood: true, \r\n            cep: true,\r\n            number_address: true,\r\n            region_code: true,\r\n            street: true,\r\n            complement: true,\r\n\r\n            typeAccess: true,\r\n            typePerson: true,\r\n\r\n            profileAvatar: true,\r\n            profileSocialUrl: true,\r\n\r\n            termsUsePlatform: true,\r\n            termsUseLGPD: true,\r\n            termsPrivacyPolicy: true,\r\n            termsReceiptNews: true,\r\n            registeredBy: true, \r\n            typeAccessRegisteredBy: true,\r\n\r\n            cpfRegisteredBy: true,\r\n            dateRegisteredBy: true,\r\n\r\n            editedBy: true,\r\n            typeAccessEditedBy: true, \r\n            cpfEditedBy: true, \r\n            dateEditedBy: true, \r\n            \r\n            tutorialFirstAccess: true,\r\n            status: true, \r\n            created_At: true,\r\n            \r\n\r\n        },\r\n    });\r\n\r\n    if (!userExists) {\r\n        return {\r\n            data: {\r\n              message: \"Não foi possível realizar esta ação, o usuário não existe.\",\r\n            },\r\n            status: 404,\r\n        };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Admin) {\r\n        return {\r\n            data: {\r\n                message: \"Acesso negado. Administradores não podem visualizar dados de contas master.\",\r\n                status: 403,\r\n            },\r\n        };\r\n    }\r\n\r\n    return {\r\n        data: {\r\n            items: {\r\n                ...userExists,\r\n                cpfCnpj: userExists.typePerson === TypePerson.Fisic \r\n                 ? formatterCPF(userExists.cpfCnpj) \r\n                 : formatterCNPJ(userExists.cpfCnpj),\r\n                cep: formatterCEP(userExists.cep),\r\n                birthDate: formatterDateToIso(userExists.birthDate),\r\n            },\r\n            status: 200,\r\n        },\r\n   \r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport { UsersGetDetailsService };\r\n","import { Request, Response } from \"express\";\r\nimport { UsersGetDetailsService } from \"../../services/Users/usersGetDetailsService\";\r\n\r\nclass UsersGetDetailsController {\r\n  async handle(req: Request, res: Response) {\r\n    const idUserLogged = req.user_id;\r\n    const { id } = req.params;\r\n\r\n    const usersGetDetails = new UsersGetDetailsService();\r\n\r\n    const responseUsersGetDetails = await usersGetDetails.execute({\r\n      id: id,\r\n      idUserLogged: idUserLogged,\r\n    });\r\n\r\n    return res.status(responseUsersGetDetails?.data?.status).json(responseUsersGetDetails.data);\r\n  }\r\n}\r\n\r\nexport { UsersGetDetailsController };\r\n","import {Request, Response, NextFunction} from 'express'\r\nimport { verify } from 'jsonwebtoken'\r\n\r\n\r\ninterface IVerificationToken {\r\n    sub: string;\r\n}\r\n\r\n\r\nexport const isLogged = (req: Request, res: Response, next: NextFunction) => {\r\n    const loggedToken = req.headers.authorization;\r\n\r\n    if(!loggedToken){\r\n        return res.status(401).json({\r\n            status: 401,\r\n            message: \"Solicitação necessita do token de autenticação, faça o login.\"\r\n        }).end()\r\n    }\r\n\r\n    const [, token] = loggedToken.split(\" \");\r\n\r\n    try {\r\n        const {sub} = verify(token, process.env.JWT_SECRET) as IVerificationToken\r\n        req.user_id = sub;\r\n        console.log(\"Verificação de token concluída\")\r\n    }\r\n    \r\n    \r\n    catch(err){\r\n        res.status(401).json({\r\n            status: 401,\r\n            message: \"Solicitação falhou, ocorreu algum erro na verificação do token.\"\r\n        }).end();\r\n\r\n    }\r\n\r\n    return next()\r\n}","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\n\r\ninterface IValidatorPermissions {\r\n    typeAccess: string,\r\n}\r\n\r\n\r\nexport const validatorPermissions = ({typeAccess}: IValidatorPermissions) => {\r\n  return (typeAccess === TypesAccess.Owner || typeAccess === TypesAccess.Developer || typeAccess === TypesAccess.Master || typeAccess === TypesAccess.Admin)\r\n \r\n}\r\n","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\n\r\ninterface IUsersDeleteService {\r\n  id: string;\r\n  id_user_logged: string;\r\n}\r\n\r\nclass UsersDeleteService {\r\n  async execute({ id, id_user_logged }: IUsersDeleteService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor informe o (id) do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: id },\r\n    });\r\n\r\n    const responsePermission = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess,\r\n    });\r\n\r\n    if (!responsePermission) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta não possui permissão para realizar esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível deletar, o usuário não existe.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userExists.id === id_user_logged &&\r\n      userExistsLogged.typeAccess === TypesAccess.Admin\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não é possível como administrador deletar a própria conta, está ação está disponível somente para contas master\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n    \r\n    await prismaClient.$transaction(async (tx) => {\r\n      if (userExists.typeAccess === TypesAccess.Promoter) {\r\n        await tx.coupon.updateMany({\r\n          where: { idPromoter: id },\r\n          data: { idPromoter: null, commissionPromoter: null },\r\n        });\r\n      }\r\n\r\n      await tx.couponUsage.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.coupon.deleteMany({\r\n        where: { idUserOwner: id },\r\n      });\r\n\r\n      await tx.couponUsage.deleteMany({ where: { idUserOwner: id } });\r\n\r\n      await tx.events.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.methodsPayments.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.typesCommercials.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.typesProducts.deleteMany({ where: { idUserOwner: id } });\r\n\r\n      await tx.users.delete({ where: { id: id } });\r\n\r\n      await tx.categories.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.commercials.deleteMany({ where: { idUserOwner: id } });\r\n      await tx.purchases.deleteMany({ where: { idUser: id } });\r\n      await tx.bin.deleteMany({ where: { idUserOwner: id } });\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Usuário deletado com sucesso!\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersDeleteService };\r\n","import { Request,Response } from \"express\";\r\nimport { UsersDeleteService } from \"../../services/Users/usersDeleteService\";\r\n\r\nclass UsersDeleteController {\r\n    async handle(req: Request, res: Response){\r\n        const {id} = req.params\r\n        const id_user_logged = req.user_id\r\n\r\n        const usersDelete = new UsersDeleteService();\r\n\r\n        const responseUsersDelete = await usersDelete.execute({\r\n            id: id,\r\n            id_user_logged: id_user_logged\r\n            \r\n        });\r\n\r\n        return res.json(responseUsersDelete);\r\n    }\r\n}\r\n\r\nexport {UsersDeleteController}","import { UploadedFile } from \"express-fileupload\";\r\n\r\ninterface IParamsCategoriesService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  icon?: UploadedFile | null;\r\n}\r\n\r\nexport const validationsCategoriesService = ({\r\n\r\n  name,\r\n  icon,\r\n  idUserOwner,\r\n}: IParamsCategoriesService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, Preencha o nome da categoria.\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!icon) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, por favor envie um icone para prosseguir\", //  (nome, e-mail, senha, cpf, telefone, data de nascimento, residencia, bairro, endereço, cidade e genero)\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n","import { UploadedFile } from \"express-fileupload\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { validationsCategoriesService } from \"../../utils/validationsServices/validationsCategories\";\r\nimport {v2 as cloudinary, UploadApiResponse} from 'cloudinary'\r\nimport {v6 as uuid} from 'uuid'\r\nimport { Messages, MessagesError } from \"../../constants/messages.api\";\r\n \r\ninterface ICategoriesRegister {\r\n  idUserOwner: string;\r\n  name: string;\r\n  label?: string | null;\r\n  icon?: UploadedFile | null;\r\n  themeImageUrl?: UploadedFile | null;\r\n}\r\n\r\nclass CategoriesRegisterService {\r\n  async execute({\r\n    idUserOwner,\r\n    name,\r\n    label,\r\n    icon,\r\n    themeImageUrl,\r\n  }: ICategoriesRegister) {\r\n\r\n    const validationsCategories = validationsCategoriesService({\r\n      idUserOwner,\r\n      name,\r\n      icon,\r\n    });\r\n\r\n    if (validationsCategories) {\r\n      return validationsCategories;\r\n    } \r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner\r\n      }\r\n    })\r\n\r\n    const categoryExists = await prismaClient.categories.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n\r\n    if (categoryExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está categoria já existe\",\r\n          status: 403,\r\n        }\r\n     \r\n      };\r\n    }\r\n\r\n    if(!userExists){\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      const iconId = uuid()\r\n      const idThemeImageUrl = uuid()\r\n\r\n      const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n          cloudinary.uploader.upload_stream({\r\n            public_id: `icons/${iconId}`,\r\n            folder: \"icons\"\r\n          }, (err,result) => {\r\n            if(err){\r\n              return {\r\n                data: {\r\n                 message: err,\r\n                 status:500 \r\n              \r\n                }\r\n              }\r\n            }\r\n            resolve(result)\r\n          }).end(icon.data)\r\n\r\n      })\r\n\r\n      const resultThemeImageUrl: UploadApiResponse = await new Promise((resolve) => {\r\n        cloudinary.uploader.upload_stream({\r\n          public_id: `themesCategories/${idThemeImageUrl}`,\r\n          folder: \"themesCategories\"\r\n        }, (err, result) => {\r\n          if(err){\r\n            return {\r\n              data: {\r\n                 message: err,\r\n                 status: 500\r\n              }\r\n            }\r\n          }\r\n          resolve(result)\r\n        }).end(themeImageUrl.data)\r\n      })\r\n\r\n      await prismaClient.categories.create({\r\n        data: {\r\n          idUserOwner: idUserOwner,\r\n          name: name,\r\n          label: label ? label : null,\r\n          idIcon: iconId,\r\n          icon: resultFile.url ? resultFile.url : null, \r\n          idThemeImageUrl: idThemeImageUrl,\r\n          themeImageUrl: resultThemeImageUrl.url ? resultThemeImageUrl.url : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n      }};\r\n    }\r\n  }\r\n}\r\n\r\nexport { CategoriesRegisterService };\r\n","import { Request, Response } from \"express\";\r\nimport { CategoriesRegisterService } from \"../../services/Categories/categoriesRegisterService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\nclass CategoriesRegisterController {\r\n  async handle(req: Request, res: Response) {\r\n    const id_user_logged = req.user_id\r\n    const { name,  label,  } = req.body;\r\n\r\n    const icon = req.files.icon as UploadedFile\r\n    const themeImageUrl = req.files.themeImageUrl as UploadedFile\r\n \r\n    const categoriesRegister = new CategoriesRegisterService();\r\n    const responseCategoriesRegister = await categoriesRegister.execute({\r\n      idUserOwner: id_user_logged,\r\n      name, \r\n      label,\r\n      icon,\r\n      themeImageUrl,\r\n    })  \r\n\r\n\r\n     return res.status(responseCategoriesRegister.data.status).json(responseCategoriesRegister.data);\r\n\r\n \r\n  }\r\n}\r\n\r\nexport { CategoriesRegisterController };\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ICategoriesGetAllService {\r\n  name?: string | null;\r\n  label?: string | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass CategoriesGetAllService {\r\n  async execute({ name, label,page, limit }: ICategoriesGetAllService) {\r\n    try {\r\n      const where: any = \"\";\r\n\r\n      if (name) where.name = { contains: name, mode: \"insensitive\" };\r\n      if (label) where.label = { contains: label, mode: \"insensitive\" };\r\n  \r\n  \r\n     const shouldPaginate = page !== undefined || limit !== undefined;\r\n     const skip = shouldPaginate ? ((page ?? 1) - 1) * (limit ?? 10) : undefined;\r\n     const take = shouldPaginate ? limit ?? 10 : undefined\r\n  \r\n      const categories = await prismaClient.categories.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n        orderBy: { created_At: \"desc\" },\r\n    \r\n      });\r\n  \r\n      const totalCategories = await prismaClient.categories.count()\r\n      const totalPages = shouldPaginate ? Math.ceil(totalCategories / (limit ?? 10)) : 1\r\n  \r\n      return {\r\n        items: categories,\r\n        totalItems: totalCategories,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      }\r\n     \r\n    } catch(err){\r\n      return {\r\n            data: {\r\n              message: `${MessagesError.GetAllMessageError} ${err}`,\r\n              status: 500,\r\n            },\r\n          };\r\n    }\r\n  \r\n    \r\n   }\r\n}\r\n\r\nexport { CategoriesGetAllService };\r\n","import { Request,Response } from \"express\";\r\nimport { CategoriesGetAllService,  } from \"../../services/Categories/categoriesGetAllService\";\r\n\r\n\r\nclass CategoriesGetAllController {\r\n    async handle(req: Request, res: Response){\r\n        const {\r\n            label,\r\n            limit,\r\n            name,\r\n            page\r\n        } = req.body\r\n                \r\n        const categoriesGetAllController = new CategoriesGetAllService()\r\n        const responseCategoriesGetAllController = await categoriesGetAllController.execute({\r\n            label,\r\n            limit,\r\n            name,\r\n            page\r\n        })\r\n\r\n        return res.json(responseCategoriesGetAllController)\r\n    }\r\n\r\n}\r\n\r\nexport {CategoriesGetAllController}","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface ICategoriesGetDetailsService {\r\n    id: string\r\n    idUserOwner?: string | null\r\n}\r\n\r\nclass CategoriesGetDetailsService {\r\n    async execute({\r\n        id,\r\n        idUserOwner\r\n    }: ICategoriesGetDetailsService){\r\n        try {   \r\n\r\n            if(!id){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id da categoria para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!idUserOwner){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, por favor envio o id do responsável para prosseguir\",\r\n                        status: 400\r\n                    }\r\n                }\r\n            }\r\n    \r\n            const userExists = await prismaClient.users.findFirst({\r\n                where: {\r\n                    id: idUserOwner\r\n                }\r\n            })\r\n    \r\n            const categoryExists = await prismaClient.categories.findFirst({\r\n                where: {\r\n                    id: id,\r\n                    idUserOwner: idUserOwner\r\n                }\r\n            })\r\n    \r\n            if(!userExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, esse usuário responsável não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if(!categoryExists){\r\n                return {\r\n                    data: {\r\n                        message: \"Não foi possível prosseguir com esta ação, essa categoria não existe\",\r\n                        status: 404\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return {\r\n                data: {\r\n                    item: categoryExists,\r\n                    status: 200\r\n                }\r\n            }\r\n\r\n        } catch(err){\r\n           return {\r\n            data: {\r\n              message: `${MessagesError.GetDetailsMessageError} ${err}`,\r\n              status: 500,\r\n            },\r\n          };\r\n        }\r\n      \r\n       \r\n    }\r\n}\r\n\r\nexport {CategoriesGetDetailsService}","import { Request, Response } from \"express\";\r\nimport { CategoriesGetDetailsService,  } from \"../../services/Categories/categoriesGetDetailsService\";\r\n\r\n\r\nclass CategoriesGetDetailsController {\r\n    async handle(req: Request, res: Response){\r\n         const {id} = req.params\r\n\r\n         const categoriesGetDetails = new CategoriesGetDetailsService()\r\n         const responseCategoriesGetDetails = await categoriesGetDetails.execute({id})\r\n\r\n         return res.status(responseCategoriesGetDetails.data.status).json(responseCategoriesGetDetails.data)\r\n        \r\n        }\r\n    \r\n}\r\n\r\n\r\nexport {CategoriesGetDetailsController}","import prismaClient from \"../../prisma\";\r\nimport { validationsCategoriesService } from \"../../utils/validationsServices/validationsCategories\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport { v2 as cloudinary, UploadApiResponse } from \"cloudinary\";\r\nimport { Messages, MessagesError } from \"../../constants/messages.api\";\r\n\r\ninterface ICategoriesEditService {\r\n  id: string;\r\n  name: string;\r\n  idUserOwner: string;\r\n  label?: string | null;\r\n  icon?: UploadedFile | null;\r\n  themeImageUrl?: UploadedFile | null;\r\n}\r\n\r\nclass CategoriesEditService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n    name,\r\n    label,\r\n    icon,\r\n    themeImageUrl,\r\n  }: ICategoriesEditService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, por favor envie o id da categoria para prosseguir.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const validationsCategories = validationsCategoriesService({\r\n      idUserOwner,\r\n      name,\r\n      icon,\r\n    });\r\n\r\n    if (validationsCategories) {\r\n      return validationsCategories;\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const categoryExists = await prismaClient.categories.findFirst({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, o usuário responsável não existe\",\r\n          status: 404,\r\n        }\r\n      };\r\n    }\r\n\r\n    if (!categoryExists) {\r\n      return {\r\n        data: {\r\n         message: \"Não foi possível prosseguir com esta ação, essa categoria não existe\",\r\n         status: 404,\r\n        }\r\n      };\r\n    }\r\n\r\n    try {\r\n      let idIcon = categoryExists.idIcon;\r\n      let idThemeImageUrl = categoryExists.idThemeImageUrl\r\n\r\n\r\n      const resultFile: UploadApiResponse = await new Promise(\r\n        (resolve, reject) => {\r\n          cloudinary.uploader\r\n            .upload_stream(\r\n              {\r\n                public_id: `icons/${idIcon}`,\r\n                overwrite: true,\r\n                folder: \"icons\",\r\n              },\r\n              (err, result) => {\r\n                if (err) {\r\n                  reject(err);\r\n                  return;\r\n                }\r\n\r\n                resolve(result);\r\n              }\r\n            )\r\n            .end(icon.data);\r\n        }\r\n      );\r\n\r\n      const resultThemeImageUrl: UploadApiResponse = await new Promise((resolve) => {\r\n        cloudinary.uploader.upload_stream({\r\n          public_id: `themesCategories/${idThemeImageUrl}`,\r\n          folder: \"themesCategories\"\r\n        }, (err, result) => {\r\n          if(err){\r\n            return {\r\n              data: {\r\n                 message: err,\r\n                 status: 500\r\n              }\r\n            }\r\n          }\r\n          resolve(result)\r\n        }).end(themeImageUrl.data)\r\n      })\r\n\r\n      await prismaClient.categories.update({\r\n        where: {\r\n          id: id,\r\n        },\r\n\r\n        data: {\r\n          name: name,\r\n          label: label,\r\n          icon: resultFile.url ? resultFile.url : null,\r\n          themeImageUrl: resultThemeImageUrl.url ? resultThemeImageUrl.url : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.UpdateMessageSuccess,\r\n          status: 500,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.UpdateMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { CategoriesEditService };\r\n","import { Request, Response } from \"express\";\r\nimport { CategoriesEditService } from \"../../services/Categories/categoriesEditService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\n\r\nclass CategoriesEditController {\r\n  async handle(req: Request, res: Response) {\r\n    const { \r\n      id, \r\n      idUserOwner,\r\n      name, \r\n      label,\r\n    } = req.body;\r\n\r\n    //const files = req.files as { [fieldname: string]: Express.Multer.File[] };\r\n    //const iconeCategoria = files[\"iconeCategoria\"]?.[0].filename;\r\n    //const urlBannerCategoria = files[\"urlBannerCategoria\"]?.[0]?.filename;\r\n    const icon = req.files.icon as UploadedFile\r\n    const themeImageUrl = req.files.themeImageUrl as UploadedFile\r\n\r\n    const categoriesEditController = new CategoriesEditService();\r\n    const responseCategoriesEditController = await categoriesEditController.execute({\r\n      id,\r\n      idUserOwner,\r\n      name, \r\n      label,\r\n      icon,\r\n      themeImageUrl,\r\n \r\n    });\r\n\r\n    return res.status(responseCategoriesEditController.data.status).json(responseCategoriesEditController.data);\r\n  }\r\n}\r\n\r\nexport { CategoriesEditController };\r\n","import prismaClient from \"../../prisma\";\r\n\r\n\r\n\r\ninterface IBinRegisterItemsService {\r\n    id: string;\r\n    idUserOwner: string;\r\n    tableName: string;\r\n}\r\n\r\nclass BinRegisterMoveItemsService {\r\n    async execute({id, idUserOwner, tableName}: IBinRegisterItemsService){\r\n        if(!idUserOwner){\r\n            return {\r\n                data :{\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n                    status:400\r\n                }\r\n            }\r\n        }\r\n\r\n        if((!id || !tableName)){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const item = await prismaClient.$queryRawUnsafe(`SELECT * FROM ${tableName} WHERE id = '${id}'`)\r\n        \r\n\r\n        try {\r\n            await prismaClient.bin.create({\r\n                data: {\r\n                  tableName,\r\n                  itemId: id,\r\n                  idUserOwner: idUserOwner,\r\n                  data: JSON.stringify(item)   \r\n                }\r\n            })\r\n            await prismaClient.$executeRawUnsafe(`DELETE FROM ${tableName} WHERE id = '${id}'`)\r\n\r\n            return {\r\n                data: {\r\n                   message: `Item movido para a lixeira com sucesso`,\r\n                   status: 200\r\n                }\r\n         \r\n            }\r\n        } catch(err){\r\n            return {\r\n                data: {\r\n                    message: `Ocorreu um erro ao mover item para a lixeira ${err}`,\r\n                    status: 500\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {BinRegisterMoveItemsService}","import prismaClient from \"../../prisma\";\r\nimport { BinRegisterMoveItemsService } from \"../Bin/binRegisterMoveItemsService\";\r\ninterface DeletarCategoriasType {\r\n    id: string\r\n}\r\n\r\nclass CategoriesDeleteService{\r\n    async execute({id}: DeletarCategoriasType){\r\n\r\n        if(!id){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com esta ação, por favor informe o id da categoria\",\r\n                    status: 400\r\n                }\r\n            }\r\n        }\r\n\r\n        const categoriesExists = await prismaClient.categories.findFirst({where: {id: id}})\r\n\r\n        if(!categoriesExists){\r\n            return {\r\n                data: {\r\n                    message: \"Não foi possível prosseguir com esta ação, essa categoria não existe\",\r\n                    status: 404\r\n                }\r\n            }\r\n        }\r\n\r\n        const binRegisterItemsService = new BinRegisterMoveItemsService() \r\n\r\n        const deletarCategoriasId = await binRegisterItemsService.execute({\r\n            id: id,\r\n            tableName: \"categories\",\r\n            idUserOwner: categoriesExists.idUserOwner\r\n        })  \r\n\r\n        return {\r\n            data: {\r\n                message: deletarCategoriasId.data.message,\r\n                status: deletarCategoriasId.data.status\r\n            }\r\n        }   \r\n     }\r\n\r\n}\r\n\r\nexport {CategoriesDeleteService}","import { Response,Request } from \"express\";\r\nimport { CategoriesDeleteService } from \"../../services/Categories/categoriesDeleteService\";\r\n\r\nclass CategoriesDeleteController {\r\n    async handle(req:Request,res: Response){\r\n        const {id} = req.params\r\n\r\n        const categoriesDelete = new CategoriesDeleteService()\r\n        const responseCategoriesDelete = await categoriesDelete.execute({id})\r\n\r\n\r\n        return res.status(responseCategoriesDelete.data.status).json(responseCategoriesDelete.data)\r\n    }\r\n}\r\n\r\nexport {CategoriesDeleteController}","import prismaClient from \"../../prisma\";\r\n\r\ninterface CadastrarEventoType {\r\n  idUserOwner: string;\r\n  idProduct: string;\r\n  name: string;\r\n  description: string;\r\n  localityEvent: string;\r\n  urlLocalityEvent: string;\r\n  bannerImageUrl: string;\r\n  dateEvent: string;\r\n  hourEvent: string;\r\n  idCategory: string; \r\n  restrictionsEvent?: string;\r\n  placesPurchaseTicket: string;\r\n  urlPostSocialNetwork: string;\r\n  phoneForContact?: string;\r\n}\r\n\r\nclass CadastrarEventoService {\r\n  async execute({\r\n    idUserOwner,\r\n    idProduct,\r\n    idCategory,\r\n    name,\r\n    description,\r\n    localityEvent,\r\n    urlLocalityEvent,\r\n    bannerImageUrl,\r\n    dateEvent,\r\n    hourEvent,\r\n    restrictionsEvent,\r\n    placesPurchaseTicket,\r\n    urlPostSocialNetwork,\r\n    phoneForContact,\r\n  }: CadastrarEventoType) {\r\n\r\n\r\n    //idUserOwner\r\n\r\n\r\n\r\n    const eventoExiste = await prismaClient.events.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n    if (eventoExiste) {\r\n      return {\r\n        message: \"Essa evento já existe\",\r\n        status: 400,\r\n      };\r\n    }\r\n    const cadastrarEvento = await prismaClient.events.create({\r\n      data: {\r\n        idUserOwner: idUserOwner,\r\n        name: name,\r\n        description: description,\r\n        idProduct: idProduct,\r\n        idCategory: idCategory,\r\n        localityEvent: localityEvent,\r\n        urlLocalityEvent: urlLocalityEvent,\r\n        bannerImageUrl: bannerImageUrl,\r\n        dateEvent: dateEvent,\r\n        hourEvent: hourEvent,\r\n\r\n        restrictionsEvent: restrictionsEvent,\r\n        placesPurchaseTicket: placesPurchaseTicket,\r\n        urlPostSocialNetwork: urlPostSocialNetwork,\r\n        phoneForContact: phoneForContact,\r\n      },\r\n    });\r\n    return cadastrarEvento;\r\n  }\r\n}\r\n\r\nexport { CadastrarEventoService };\r\n","import { Request,Response } from \"express\";\r\nimport { CadastrarEventoService } from \"../../services/Events/cadastrarEventoService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport { v2 as cloudinary } from \"cloudinary\";\r\nimport { UploadApiResponse } from \"cloudinary\";\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_NAME,\r\n    api_key: process.env.CLOUDINARY_KEY,\r\n    api_secret: process.env.CLOUDINARY_SECRET\r\n})\r\ninterface IResponseCadastrarEventoController {\r\n    status?: number\r\n    message?: string\r\n  }\r\n\r\n\r\nclass CadastrarEventoController {\r\n    async handle(req: Request, res: Response){\r\n        const id_user_logged = req.url\r\n        const { \r\n          idProduct,\r\n          idCategory,\r\n          name,\r\n          description,\r\n          localityEvent,\r\n          urlLocalityEvent,\r\n          bannerImageUrl,\r\n          dateEvent,\r\n          hourEvent,\r\n          restrictionsEvent,\r\n          placesPurchaseTicket,\r\n          urlPostSocialNetwork,\r\n          phoneForContact,\r\n        } = req.body;\r\n\r\n        const cadastrarEvento = new CadastrarEventoService()\r\n       \r\n            const file = req.files['bannerEvento'];\r\n\r\n            if (Array.isArray(file)) {\r\n              // Se for um array, use o primeiro arquivo ou faça o que for necessário\r\n              throw new Error(\"Only one file is allowed for 'bannerEvento'\");\r\n            } else {\r\n              const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n                cloudinary.uploader.upload_stream({}, (error, result) => {\r\n                  if (error) {\r\n                    reject(error);\r\n                  }\r\n                  resolve(result);\r\n                }).end(file.data);\r\n              });\r\n              \r\n            const eventoCadastrado = await cadastrarEvento.execute({ \r\n              idUserOwner: id_user_logged,\r\n              idProduct,\r\n              idCategory,\r\n              name,\r\n              description,\r\n              localityEvent,\r\n              urlLocalityEvent,\r\n              bannerImageUrl,\r\n              dateEvent,\r\n              hourEvent,\r\n              restrictionsEvent,\r\n              placesPurchaseTicket,\r\n              urlPostSocialNetwork,\r\n              phoneForContact,\r\n             }) as IResponseCadastrarEventoController\r\n             \r\n             if(eventoCadastrado.status === 403){\r\n                return res.status(403).json(eventoCadastrado)\r\n             }\r\n\r\n            return res.json(eventoCadastrado)\r\n\r\n        }\r\n   \r\n    }\r\n\r\n}\r\n\r\nexport {CadastrarEventoController}","import prismaClient from \"../../prisma\";\r\n\r\ninterface IListarTodosEventosService {\r\n    nome: string\r\n}\r\nclass ListarTodosEventosService {\r\n    async execute({nome}: IListarTodosEventosService){\r\n        const listarTodosEventos = await prismaClient.events.findMany({\r\n            where: {\r\n                name: {\r\n                    contains: nome,\r\n                    mode: \"insensitive\",\r\n                }\r\n            },\r\n            include: { \r\n                categories: true,\r\n            }\r\n \r\n        })\r\n\r\n        return listarTodosEventos \r\n\r\n        \r\n    }\r\n}\r\n\r\nexport {ListarTodosEventosService}","import { Request,Response } from \"express\";\r\nimport { ListarTodosEventosService } from \"../../services/Events/listarTodosEventosService\";\r\n\r\n\r\n\r\nclass ListarTodosEventosController {\r\n    async handle(req: Request,res: Response){\r\n           const nome = req.query.nome as string;\r\n\r\n            const listarTodosEventos = new ListarTodosEventosService();\r\n            const listarEventos = await listarTodosEventos.execute({nome});\r\n\r\n            return res.json(listarEventos);\r\n    }\r\n\r\n}\r\n\r\nexport {ListarTodosEventosController}","import prismaClient from \"../../prisma\";\r\n\r\ninterface listarEventosIdType {\r\n    id: string;\r\n   \r\n}\r\n\r\nclass ListarEventoIdService {\r\n    async execute({id}: listarEventosIdType){\r\n        const listarEventoId = await prismaClient.events.findFirst({\r\n            where: {\r\n                id: id,\r\n            },\r\n            include: { \r\n               categories: true,\r\n           }\r\n        })\r\n\r\n        return listarEventoId\r\n\r\n    }\r\n}\r\n\r\nexport {ListarEventoIdService}","import { Request, Response } from \"express\";\r\nimport { ListarEventoIdService } from \"../../services/Events/listarEventoIdService\";\r\n\r\nclass ListarEventoIdController {\r\n     async handle(req: Request, res: Response ){\r\n        const {id} = req.params;\r\n        \r\n        const listarEventoId = new ListarEventoIdService();\r\n        const listarEvento = await listarEventoId.execute({id});\r\n        return res.json(listarEvento)\r\n     }\r\n\r\n}\r\n\r\nexport { ListarEventoIdController }","import crypto from 'crypto'\r\nimport multer from 'multer'\r\nimport {extname,resolve} from 'path'\r\n\r\nexport default {\r\n    upload(folder: string){ \r\n       return {\r\n          storage: multer.diskStorage({\r\n             destination: resolve(__dirname, \"..\", \"..\", folder),\r\n             filename: (request,file,callback) => {\r\n                const fileHash = crypto.randomBytes(16).toString(\"hex\");\r\n                const fileName = `${fileHash}-${file.originalname}`\r\n                \r\n                return callback(null,fileName)\r\n            } \r\n          })\r\n       }\r\n    }\r\n}\r\n","import prismaClient from \"../../prisma\";\r\n\r\ninterface EditarEventoServiceType {\r\n  id: string;\r\n  idUserOwner: string;\r\n  idProduct: string;\r\n  name: string;\r\n  description: string;\r\n  localityEvent: string;\r\n  urlLocalityEvent: string;\r\n  bannerImageUrl: string;\r\n  dateEvent: string;\r\n  hourEvent: string;\r\n  idCategory: string; \r\n  restrictionsEvent?: string;\r\n  placesPurchaseTicket: string;\r\n  urlPostSocialNetwork: string;\r\n  phoneForContact?: string;\r\n  status?: boolean | null\r\n}\r\n\r\nclass EditarEventosService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n    idProduct,\r\n    name,\r\n    description,\r\n    localityEvent,\r\n    urlLocalityEvent,\r\n    bannerImageUrl,\r\n    dateEvent,\r\n    hourEvent,\r\n    idCategory,\r\n    restrictionsEvent,\r\n    placesPurchaseTicket,\r\n    urlPostSocialNetwork,\r\n    phoneForContact,\r\n    status\r\n  }: EditarEventoServiceType) {\r\n\r\n\r\n    //idUserOwner\r\n\r\n\r\n    const editar = await prismaClient.events.update({\r\n      where: {\r\n        id: id,\r\n      },\r\n\r\n      data: {\r\n      name: name,\r\n      \r\n      description: description,\r\n      idProduct: idProduct,\r\n      idCategory: idCategory,\r\n      localityEvent: localityEvent,\r\n      urlLocalityEvent: urlLocalityEvent,\r\n      bannerImageUrl: \"\", // aqui vai a url do evento,\r\n      dateEvent: dateEvent,\r\n      hourEvent: hourEvent,\r\n      restrictionsEvent: restrictionsEvent,\r\n      placesPurchaseTicket: placesPurchaseTicket,\r\n      urlPostSocialNetwork: urlPostSocialNetwork,\r\n      phoneForContact: phoneForContact,\r\n      status: status ? status : true,\r\n      },\r\n    });\r\n    return editar;\r\n  }\r\n}\r\n\r\nexport { EditarEventosService };\r\n","import { Request, Response } from \"express\";\r\nimport { EditarEventosService } from \"../../services/Events/editarEventoService\";\r\n\r\nclass EditarEventoController {\r\n  async handle(req: Request, res: Response) {\r\n    const id_user_logged = req.url\r\n  \r\n    const {\r\n      id,\r\n      idProduct,\r\n      idCategory,\r\n      name,\r\n      description,\r\n      localityEvent,\r\n      urlLocalityEvent,\r\n      bannerImageUrl,\r\n      dateEvent,\r\n      hourEvent,\r\n      restrictionsEvent,\r\n      placesPurchaseTicket,\r\n      urlPostSocialNetwork,\r\n      phoneForContact,\r\n    } = req.body;\r\n\r\n    const editarEvento = new EditarEventosService();\r\n\r\n    const eventoEditado = await editarEvento.execute({\r\n      id,\r\n      idUserOwner: id_user_logged,\r\n      idProduct,\r\n      idCategory,\r\n      name,\r\n      description,\r\n      localityEvent,\r\n      urlLocalityEvent,\r\n      bannerImageUrl,\r\n      dateEvent,\r\n      hourEvent,\r\n      restrictionsEvent,\r\n      placesPurchaseTicket,\r\n      urlPostSocialNetwork,\r\n      phoneForContact,\r\n    });\r\n\r\n    return res.json(eventoEditado);\r\n  }\r\n}\r\n\r\nexport { EditarEventoController };\r\n","import prismaClient from \"../../prisma\";\r\n\r\n\r\ninterface DeletarEventoIdType {\r\n   id: string\r\n}\r\n\r\n\r\nclass DeletarEventoService {\r\n    async execute({id}: DeletarEventoIdType){\r\n        const deletarEvento = await prismaClient.events.delete({\r\n            where: {\r\n                id: id\r\n            }\r\n        })    \r\n        return {\r\n            message: `Evento deletado com sucesso`,\r\n            evento: deletarEvento.id,\r\n            status: 200\r\n        }\r\n    }\r\n}\r\n\r\nexport {DeletarEventoService}","import { Response,Request } from \"express\";\r\nimport { DeletarEventoService } from \"../../services/Events/deletarEventoService\";\r\n\r\nclass DeletarEventoController {\r\n    async handle(req: Request,res: Response){\r\n\r\n        const {id} = req.params\r\n        const deletarEvento = new DeletarEventoService();\r\n\r\n        const eventoDeletado = await deletarEvento.execute({id})\r\n\r\n        return res.json(eventoDeletado)\r\n    }\r\n}\r\n\r\nexport { DeletarEventoController}","import { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { deformatter } from \"../../utils/desformatter\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\nimport { todayWithTime } from \"../../utils/formatters/formatterToday\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\nimport { hash } from \"bcryptjs\";\r\n\r\nimport prismaClient from \"../../prisma\";\r\nimport { v2 as cloudinary, UploadApiResponse } from \"cloudinary\";\r\n\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport { validationsUserService } from \"../../utils/validationsServices/validationsUserService\";\r\n\r\ninterface IEditUserService {\r\n  id: string;\r\n  id_user_logged: string;\r\n\r\n  email: string;\r\n  password: string;\r\n  cpfCnpj: string;\r\n  name?: string | null;\r\n  companyName?: string | null;\r\n  complement?: string | null;\r\n  typePerson?: TypePerson | null;\r\n  phone?: string | null;\r\n  birthDate?: string | null;\r\n  residence?: string | null;\r\n  neighborhood?: string | null;\r\n  address?: string | null;\r\n  city?: string | null;\r\n  gender?: string | null;\r\n  cep?: string | null;\r\n  profileSocialUrl?: string | null;\r\n  number_address?: string | null;\r\n  region_code?: string | null;\r\n  street?: string | null;\r\n  status?: boolean;\r\n  profileAvatar?: UploadedFile | null;\r\n  typeAccess?: string | null;\r\n\r\n  termsReceiptNews?: boolean | null;\r\n  termsUsePlatform?: boolean | null;\r\n  termsUseLGPD?: boolean | null;\r\n  termsPrivacyPolicy?: boolean | null;\r\n}\r\n\r\nclass UsersEditService {\r\n  async execute({\r\n    id,\r\n    id_user_logged,\r\n    complement,\r\n    street,\r\n    termsReceiptNews,\r\n    typePerson,\r\n    name,\r\n    companyName,\r\n    email,\r\n    password,\r\n    cpfCnpj,\r\n    phone,\r\n    birthDate,\r\n    neighborhood,\r\n    profileSocialUrl,\r\n    profileAvatar,\r\n    city,\r\n    cep,\r\n    region_code,\r\n    number_address,\r\n    typeAccess,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    gender,\r\n    status,\r\n  }: IEditUserService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar está ação, por favor informe o (id) do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const verifyValidations = validationsUserService({\r\n      name,\r\n      companyName,\r\n      email,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      typePerson,\r\n      password: password ? password : null,\r\n    });\r\n\r\n    if (verifyValidations) {\r\n      return verifyValidations;\r\n    }\r\n\r\n    const isUserLogged = id === id_user_logged;\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: id },\r\n    });\r\n\r\n    const userEmailExists = await prismaClient.users.findFirst({\r\n      where: { email: email, NOT: { id: id } },\r\n    });\r\n\r\n    const userCPFOrCNPJExists = await prismaClient.users.findFirst({\r\n      where: { cpfCnpj: cpfCnpj, NOT: { id: id, cpfCnpj: cpfCnpj } },\r\n    });\r\n\r\n    const CPFOrCNPJ =\r\n      userCPFOrCNPJExists?.typePerson === TypePerson.Fisic ? \"CPF\" : \"CNPJ\";\r\n\r\n    const validationPermission = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess || \"\",\r\n    });\r\n\r\n    if (id !== id_user_logged && !validationPermission) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Sua conta não possui permissão para realizar esta ação, sua conta pode editar apenas o seus dados.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (userExists !== null && !userExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar o esta ação, o usuário não existe.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (email && userEmailExists) {\r\n      return {\r\n        data: {\r\n          message: `Não foi possível realizar está ação, esse e-mail está em uso.`,\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (cpfCnpj && userCPFOrCNPJExists) {\r\n      return {\r\n        data: {\r\n          message: `Não foi possível realizar está ação, esse ${CPFOrCNPJ} está em uso.`,\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length < 8) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length > 14) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    const todayAt = todayWithTime();\r\n\r\n    if (password && password?.length < 8) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter no mínimo 8 caracteres para garantir maior segurança.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (password && password.length > 14) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      typeAccess &&\r\n      (userExistsLogged.typeAccess === TypesAccess.User ||\r\n        userExistsLogged.typeAccess === TypesAccess.Promoter ||\r\n        userExistsLogged.typeAccess === TypesAccess.Worker)\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, sua conta não tem permissão para alterar o status do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      (userExistsLogged.typeAccess === TypesAccess.User ||\r\n        userExistsLogged.typeAccess === TypesAccess.Promoter ||\r\n        userExistsLogged.typeAccess === TypesAccess.Worker)\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, sua conta não tem permissão para alterar o status do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      let idProfileAvatar = isUserLogged\r\n        ? userExistsLogged.idProfileAvatar\r\n        : userExists.idProfileAvatar;\r\n\r\n      const resultFile: UploadApiResponse = await new Promise(\r\n        (resolve, reject) => {\r\n          cloudinary.uploader\r\n            .upload_stream(\r\n              {\r\n                public_id: `users/${idProfileAvatar}`,\r\n                overwrite: true,\r\n                folder: \"users\",\r\n              },\r\n              (err, result) => {\r\n                if (err) {\r\n                  reject(err);\r\n                  return;\r\n                }\r\n                resolve(result);\r\n              }\r\n            )\r\n            .end(profileAvatar.data);\r\n        }\r\n      );\r\n\r\n      const profileAvatarUpdated = resultFile.secure_url;\r\n\r\n      const updateUser = async (\r\n        user: typeof userExistsLogged,\r\n        isLoggedUser = false\r\n      ) => {\r\n        return await prismaClient.users.update({\r\n          where: { id: isLoggedUser ? id_user_logged : id },\r\n          data: {\r\n            name: name ? name : null,\r\n            companyName: companyName !== null ? companyName : null,\r\n            email: email ? email : null,\r\n            password: password ? await hash(password, 8) : user.password,\r\n            cpfCnpj: cpfCnpj ? deformatter(cpfCnpj) : null,\r\n            phone: phone ? deformatter(phone) : null,\r\n            birthDate: birthDate ? formatterDateToIso(birthDate) : null,\r\n\r\n            street: street ? street : null,\r\n            complement: complement ? complement : null,\r\n            profileAvatar: profileAvatarUpdated, // Será atualizado pelo controller\r\n            profileSocialUrl: profileSocialUrl ? profileSocialUrl : null,\r\n            typePerson: typePerson ? typePerson : null,\r\n            neighborhood: neighborhood ? neighborhood : null,\r\n            city: city ? city : null,\r\n\r\n            gender: gender ? gender : null,\r\n            cep: cep ? deformatter(cep) : null,\r\n            region_code: region_code ? region_code : null,\r\n            number_address: number_address ? number_address : null,\r\n\r\n            typeAccess: typeAccess ? typeAccess : user.typeAccess,\r\n\r\n            termsUsePlatform:\r\n              termsUsePlatform !== null\r\n                ? termsUsePlatform\r\n                : user.termsUsePlatform,\r\n            termsUseLGPD:\r\n              termsUseLGPD !== null ? termsUseLGPD : user.termsUseLGPD,\r\n            termsReceiptNews:\r\n              termsReceiptNews !== null\r\n                ? termsReceiptNews\r\n                : user.termsReceiptNews,\r\n            termsPrivacyPolicy:\r\n              termsPrivacyPolicy !== null\r\n                ? termsPrivacyPolicy\r\n                : user.termsPrivacyPolicy,\r\n\r\n            status:\r\n              status !== null &&\r\n              userExistsLogged.typeAccess !== TypesAccess.User\r\n                ? status\r\n                : user.status,\r\n            updated_At: todayAt,\r\n\r\n            editedBy: userExistsLogged?.name ?? null,\r\n            typeAccessEditedBy: userExistsLogged?.typeAccess ?? null,\r\n            cpfEditedBy: userExistsLogged?.cpfCnpj ?? null,\r\n            dateEditedBy: todayAt ?? null,\r\n          },\r\n        });\r\n      };\r\n\r\n      if (isUserLogged) {\r\n        await updateUser(userExistsLogged, true);\r\n        return {\r\n          data: {\r\n            message: \"Sua conta foi atualizada com sucesso!\",\r\n            status: 200,\r\n          },\r\n        };\r\n      } else {\r\n        await updateUser(userExists);\r\n        return {\r\n          data: {\r\n            message: \"Usuário atualizado com sucesso!\",\r\n            status: 200,\r\n          },\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `Erro ao atualizar usuário: ${err.message}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { UsersEditService };\r\n","import { Request,Response } from \"express\";\r\nimport { UsersEditService } from \"../../services/Users/usersEditService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\n\r\n\r\n\r\nclass UsersEditController {\r\n    async handle(req: Request, res:Response){\r\n        const id_user_logged = req.user_id\r\n        const {\r\n            id,\r\n            name,\r\n            companyName,\r\n            email,\r\n            password,\r\n            cpfCnpj,\r\n            typePerson,\r\n            birthDate,\r\n            phone,\r\n            gender,\r\n            complement,\r\n            street,\r\n            city,\r\n            cep,\r\n            region_code,\r\n            number_address,\r\n            neighborhood,\r\n            profileSocialUrl,\r\n            status\r\n        } = req.body\r\n\r\n        const profileAvatar = req.files.profileAvatar as UploadedFile\r\n        //const files = req.files as {[filename: string]: Express.Multer.File[]}\r\n         //const urlLogoUsuario = files['urlLogoUsuario']?.[0].filename;\r\n\r\n        const usersEdit = new UsersEditService()\r\n \r\n        const responseEdit = await usersEdit.execute({\r\n            id,\r\n            id_user_logged,\r\n            name,\r\n            companyName,\r\n            email,\r\n            password,\r\n            cpfCnpj,\r\n            typePerson,\r\n            birthDate,\r\n            phone,\r\n            gender,\r\n\r\n            complement,\r\n            street,\r\n            city,\r\n            cep,\r\n            region_code,\r\n            number_address,\r\n            neighborhood,\r\n            profileSocialUrl,\r\n            profileAvatar,\r\n            ...(status !== null && {status: status !== 'false' ? true : false})\r\n            //urlLogoUsuario,\r\n            \r\n        })\r\n\r\n        res.status(responseEdit?.data?.status).json(responseEdit?.data?.message)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {UsersEditController}","import { stat } from \"fs\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\nimport {\r\n  formatterDate,\r\n  formatterDateToIso,\r\n} from \"../../utils/formatters/formatterDate\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport { formatterCEP } from \"../../utils/formatters/formatterCEP\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { formatterCNPJ } from \"../../utils/formatters/formatterCNPJ\";\r\n\r\ninterface IGetAllUserService {\r\n  id_user_logged: string;\r\n  idOtherUser: string | null;\r\n  name?: string | null;\r\n  companyName?: string | null;\r\n  email?: string | null;\r\n  cpfCnpj?: string | null;\r\n  complement?: string | null;\r\n  phone?: string | null;\r\n  birthDate?: string | null;\r\n  residence?: string | null;\r\n  neighborhood?: string | null;\r\n  address?: string | null;\r\n  city?: string | null;\r\n  gender?: string | null;\r\n  cep?: string | null;\r\n  typeAccess?: string | null;\r\n  typePerson?: string | null;\r\n  number_address?: string | null;\r\n  region_code?: string | null;\r\n  street?: string | null;\r\n  status?: boolean;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass UsersGetAllService {\r\n  async execute({\r\n    id_user_logged,\r\n    idOtherUser,\r\n    name,\r\n    companyName,\r\n    email,\r\n    cpfCnpj,\r\n    complement,\r\n    phone,\r\n    birthDate,\r\n    residence,\r\n    neighborhood,\r\n    address,\r\n    city,\r\n    gender,\r\n    cep,\r\n    typeAccess,\r\n    typePerson,\r\n    number_address,\r\n    region_code,\r\n    street,\r\n    status,\r\n    page,\r\n    limit,\r\n  }: IGetAllUserService) {\r\n    \r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: { id: id_user_logged },\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const responseValidation = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess,\r\n    });\r\n\r\n    if (!responseValidation) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta não possui permissão para realizar esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      (typeAccess && userExistsLogged.typeAccess === TypesAccess.User) ||\r\n      userExistsLogged.typeAccess === TypesAccess.Promoter\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Sua conta não possui permissão para buscar pelos parâmetros de tipo do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    const where: any = { id: { not: id_user_logged } };\r\n\r\n    if (\r\n      userExistsLogged?.typeAccess === TypesAccess.Owner ||\r\n      userExistsLogged?.typeAccess === TypesAccess.Developer\r\n    ) {\r\n      where.typeAccess = { contains: typeAccess, mode: \"insensitive\" };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Master) {\r\n      where.typeAccess = {\r\n        notIn: [TypesAccess.Master, TypesAccess.Owner, TypesAccess.Developer],\r\n      };\r\n    }\r\n\r\n    if (userExistsLogged.typeAccess === TypesAccess.Admin) {\r\n      where.typeAccess = {\r\n        notIn: [\r\n          TypesAccess.Admin,\r\n          TypesAccess.Master,\r\n          TypesAccess.Owner,\r\n          TypesAccess.Developer,\r\n        ],\r\n      };\r\n    } else if (userExistsLogged.typeAccess === TypesAccess.Worker) {\r\n      where.typeAccess = {\r\n        notIn: [\r\n          TypesAccess.Admin,\r\n          TypesAccess.Owner,\r\n          TypesAccess.Developer,\r\n          TypesAccess.Master,\r\n          TypesAccess.Worker,\r\n        ],\r\n      };\r\n    }\r\n\r\n    if (idOtherUser) where.id = { contains: idOtherUser, mode: \"insensitive\" };\r\n    if (name)\r\n      where.name = {\r\n        contains: name,\r\n        mode: \"insensitive\",\r\n      };\r\n    if (companyName)\r\n        where.companyName = {\r\n          contains: companyName,\r\n          mode: \"insensitive\",\r\n    };\r\n    if (email) where.email = { contains: email, mode: \"insensitive\" };\r\n\r\n    if (cpfCnpj) where.cpfCnpj = { contains: cpfCnpj, mode: \"insensitive\" };\r\n\r\n    if (phone) where.phone = { contains: phone, mode: \"insensitive\" };\r\n    if (complement)\r\n      where.complement = { contains: complement, mode: \"insensitive\" };\r\n    if (birthDate) where.birthDate = formatterDate(birthDate);\r\n    if (residence)\r\n      where.residence = { contains: residence, mode: \"insensitive\" };\r\n    if (neighborhood)\r\n      where.neighborhood = { contains: neighborhood, mode: \"insensitive\" };\r\n    if (address) where.address = { contains: address, mode: \"insensitive\" };\r\n    if (cep) where.cep = { contains: address, mode: \"insensitive\" };\r\n    if (city) where.city = { contains: city, mode: \"insensitive\" };\r\n    if (gender) where.gender = gender;\r\n    if (status !== null) where.status = status;\r\n    if (typeAccess)\r\n      where.typeAccess = { contains: typeAccess, mode: \"insensitive\" };\r\n    if (typePerson)\r\n      where.typePerson = { contains: typePerson, mode: \"insensitive\" };\r\n    if (street) where.street = { contains: street, mode: \"insensitive\" };\r\n    if (number_address)\r\n      where.number_address = { contains: number_address, mode: \"insensitive\" };\r\n    if (region_code)\r\n      where.region_code = { contains: region_code, mode: \"insensitive\" };\r\n    // Configurar paginação\r\n    const shouldPaginate = page !== undefined || limit !== undefined;\r\n    const skip = shouldPaginate ? ((page ?? 1) - 1) * (limit ?? 10) : undefined;\r\n    const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n    const users = await prismaClient.users.findMany({\r\n      where,\r\n      skip,\r\n      take,\r\n      orderBy: { created_At: \"desc\" },\r\n      select: {\r\n        id: true,\r\n        idPlan: true,\r\n        name: true,\r\n        companyName: true,\r\n        email: true,\r\n        cpfCnpj: true,\r\n        phone: true,\r\n        birthDate: true,\r\n        gender: true,\r\n        typePerson: true,\r\n\r\n        city: true,\r\n        street: true,\r\n        neighborhood: true,\r\n        complement: true,\r\n        cep: true,\r\n        number_address: true,\r\n        region_code: true,\r\n        typeAccess: true,\r\n        profileAvatar: true, // essa é a logo que o usuário ira enviar apenas a url do banco de fotos\r\n        profileSocialUrl: true,\r\n\r\n        termsUsePlatform: true,\r\n        termsUseLGPD: true,\r\n        termsPrivacyPolicy: true,\r\n        termsReceiptNews: true,\r\n\r\n        registeredBy: true,\r\n        typeAccessRegisteredBy: true,\r\n        cpfRegisteredBy: true,\r\n        dateRegisteredBy: true,\r\n\r\n        editedBy: true,\r\n        typeAccessEditedBy: true, // para quando o admin ou master cadastrar um novo cliente saber quem cadastrou esse novo usuário\r\n        cpfEditedBy: true,\r\n        dateEditedBy: true,\r\n\r\n        tutorialFirstAccess: true,\r\n        status: true,\r\n\r\n        planSubscription: true,\r\n\r\n        created_At: true,\r\n        updated_At: true,\r\n      },\r\n    });\r\n\r\n    const totalUsers = await prismaClient.users.count({ where });\r\n    const totalPages = shouldPaginate\r\n      ? Math.ceil(totalUsers / (limit ?? 10))\r\n      : 1;\r\n\r\n    const formattedUsers = users.map((user) => ({\r\n      ...user,\r\n      cpfCnpj:\r\n        user.typePerson === TypePerson.Fisic\r\n          ? formatterCPF(user.cpfCnpj)\r\n          : formatterCNPJ(user.cpfCnpj),\r\n      cep: formatterCEP(user.cep),\r\n      birthDate: user.birthDate ? formatterDateToIso(user.birthDate) : null,\r\n    }));\r\n\r\n    return {\r\n      data: {\r\n        items: formattedUsers,\r\n        totalItems: totalUsers,\r\n        totalPages: totalPages,\r\n        currentPage: shouldPaginate ? page ?? 1 : 1,\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersGetAllService };\r\n","import {Request,Response } from 'express'\r\nimport { UsersGetAllService } from '../../services/Users/usersGetAllSevice'\r\n \r\n\r\nclass UsersGetAllController {\r\n    async handle(req: Request, res: Response){\r\n      const id_user_logged = req.user_id;\r\n      const idOtherUser = req.query.idOtherUser as string;\r\n      const name = req.query.name as string;\r\n      const companyName = req.query.companyName as string;\r\n      const email = req.query.email as string;\r\n      const cpfCnpj = req.query.cpfCnpj as string;\r\n      const phone = req.query.phone as string;\r\n      const birthDate = req.query.birthDate as string;\r\n      const gender = req.query.gender as string;\r\n      const typePerson = req.query.typePerson as string;\r\n      const city = req.query.city as string;\r\n      const street = req.query.street as string;\r\n      const neighborhood = req.query.neighborhood as string;\r\n      const complement = req.query.complement as string; \r\n      const cep = req.query.cep as string;\r\n      const number_address = req.query.number_address as string;\r\n      const region_code = req.query.region_code as string;\r\n      const typeAccess = req.query.typeAccess as string;\r\n      const status = req.query.status as string;\r\n      const page = req.query.page as string;\r\n      const limit = req.query.limit as string\r\n \r\n       const usersGetAll = new UsersGetAllService()\r\n\r\n       const responseUsersGetAll = await usersGetAll.execute({\r\n          id_user_logged: id_user_logged,\r\n          idOtherUser: idOtherUser,\r\n          name: name,\r\n          companyName: companyName,\r\n          email: email,\r\n          cpfCnpj: cpfCnpj,\r\n          phone: phone,\r\n          birthDate: birthDate,\r\n          gender: gender,\r\n          typeAccess: typeAccess,\r\n          typePerson: typePerson,\r\n          city: city,\r\n          street: street,\r\n          neighborhood: neighborhood,\r\n          complement: complement,\r\n          cep: cep,\r\n          number_address: number_address,\r\n          region_code: region_code,\r\n          ...(status !== null && {status: status !== 'false' ? true : false}),\r\n          page: Number(page),\r\n          limit: Number(limit)\r\n\r\n       })\r\n       return res.status(responseUsersGetAll.data.status).json(responseUsersGetAll.data)\r\n    }\r\n\r\n}\r\n\r\nexport {UsersGetAllController}","\r\ninterface IParamsProductsService {\r\n  idUserOwner: string;\r\n  name: string;\r\n  description?: string | null, \r\n  idCategory: string,\r\n  idTypeProduct:string\r\n  price: number\r\n  allowAddCoupon: boolean\r\n  available: boolean\r\n}\r\n\r\n \r\nexport const validationsProductsService = ({\r\n  name,\r\n  idUserOwner,\r\n  description,\r\n  allowAddCoupon,\r\n  available,\r\n  idCategory,\r\n  idTypeProduct,\r\n  price\r\n}: IParamsProductsService) => {\r\n  if (!idUserOwner) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o id do usuário responsável\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!idCategory) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe a categoria do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n \r\n  \r\n  if (!idTypeProduct) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe o tipo do produto\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (available === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se o produto está disponível para venda\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (allowAddCoupon === null) {\r\n    return {\r\n      data: {\r\n        message:\r\n          \"Não foi possível realizar está ação, informe se pode haver uso de cupom para os produtos\",\r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n  if (!name) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, Preencha o nome do produto.\", \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!description) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe a descrição do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (!price) {\r\n    return {\r\n      data: {\r\n        message: \"Não foi possível realizar está ação, por favor informe preço do produto\",  \r\n        status: 400,\r\n      },\r\n    };\r\n  }\r\n};\r\n","import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { todayWithTimeAtFormat } from \"../../utils/formatters/formatterToday\";\r\nimport { validationsProductsService } from \"../../utils/validationsServices/validationsProducts\";\r\n\r\ninterface IProductRegister {\r\n  idCategory: string;\r\n  idTypeProduct: string;\r\n  idUserOwner: string;\r\n  name: string;\r\n  description: string;\r\n\r\n  labelPrice: string; // é a label que pode ir ao lado do preço se é a entrada,inteira,meia,promoção.\r\n  price: number;\r\n\r\n  expirationDate: string;\r\n\r\n  positionOrder: number;\r\n\r\n  available: boolean;\r\n  allowAddCoupon: boolean;\r\n}\r\n\r\nclass ProductsRegisterService {\r\n  async execute({\r\n    name,\r\n    allowAddCoupon,\r\n    available,\r\n    description,\r\n    expirationDate,\r\n    idCategory,\r\n    idTypeProduct,\r\n    idUserOwner,\r\n    labelPrice,\r\n    positionOrder,\r\n    price,\r\n  }: IProductRegister) {\r\n    const validationsProducts = validationsProductsService({\r\n      name,\r\n      idUserOwner,\r\n      idCategory,\r\n      idTypeProduct,\r\n      description,\r\n      price,\r\n      allowAddCoupon,\r\n      available,\r\n    });\r\n\r\n    if (validationsProducts) {\r\n      return validationsProducts;\r\n    }\r\n\r\n    const productExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        name: name,\r\n      },\r\n    });\r\n\r\n    if (productExists) {\r\n      return {\r\n         data: {\r\n            status: 400,\r\n            message: \"Não foi possível prosseguir, esse produto já existe\",\r\n         }\r\n    \r\n      };\r\n    }\r\n\r\n    const categoryExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idCategory,\r\n      },\r\n    });\r\n\r\n    const typesProductsExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idTypeProduct,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.typesProducts.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    if (!categoryExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message: \"Não foi possível prosseguir, esse categoria não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!typesProductsExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message:\r\n            \"Não foi possível prosseguir, esse tipo do produto não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          status: 400,\r\n          message: \"Não foi possível prosseguir, esse usuário não existe\",\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const todayAt = todayWithTimeAtFormat(new Date());\r\n      await prismaClient.products.create({\r\n        data: {\r\n          name: name,\r\n          allowAddCoupon: allowAddCoupon !== null ? allowAddCoupon : null,\r\n          available: available !== null ? available : null,\r\n          description: description,\r\n          expirationDate: expirationDate ? expirationDate : null,\r\n          idCategory: idCategory,\r\n          idTypeProduct: idTypeProduct,\r\n          idUserOwner: idUserOwner,\r\n          labelPrice: labelPrice,\r\n          dateRegistered: todayAt,\r\n          positionOrder: positionOrder ? positionOrder : null,\r\n          price: price ? price : null,\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.RegisterMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.RegisterMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsRegisterService };\r\n","import { Request,Response } from \"express\";\r\nimport { ProductsRegisterService } from \"../../services/Products/productsRegisterService\";\r\n\r\nclass ProductRegisterController {\r\n  async handle(req: Request, res: Response) {\r\n    const {\r\n      name,\r\n      description,\r\n      expirationDate,\r\n      idCategory,\r\n      idTypeProduct,\r\n      price,\r\n      allowAddCoupon,\r\n      available,\r\n      labelPrice,\r\n      positionOrder,\r\n    } = req.body\r\n      \r\n     const idUserOwner = req.user_id\r\n     const productsRegister = new ProductsRegisterService()\r\n     \r\n     const responseProductsRegister = await productsRegister.execute({\r\n      name,\r\n      description,\r\n      expirationDate,\r\n      idCategory,\r\n      idTypeProduct,\r\n      idUserOwner,\r\n      labelPrice,\r\n      positionOrder,\r\n      price,\r\n      allowAddCoupon,\r\n      available,\r\n     })\r\n \r\n     return res.status(responseProductsRegister.data.status).json(responseProductsRegister.data)\r\n  }\r\n}\r\n\r\n\r\nexport {ProductRegisterController}","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IProductsGetAllService {\r\n  name?: string | null;\r\n  idUserLogged?: string | null;\r\n  idUserOwner?: string | null;\r\n  idTypeProduct?: string | null;\r\n  available?: string | null;\r\n  status?: boolean | null;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass ProductsGetAllService {\r\n  async execute({\r\n    available,\r\n    idTypeProduct,\r\n    idUserLogged,\r\n    idUserOwner,\r\n    name,\r\n    status,\r\n    page,\r\n    limit,\r\n  }: IProductsGetAllService) {\r\n    const userIDSend = idUserLogged ?? idUserOwner;\r\n    // Verificar se o usuário existe\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: { id: idUserOwner ?? idUserLogged },\r\n    });\r\n\r\n    const typesProductsExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        id: idTypeProduct,\r\n      },\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n         message: \"Não foi possível prosseguir, este usuário não existe!\",\r\n         status: 404,\r\n        }\r\n      };\r\n    }\r\n    if (!typesProductsExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n          \"Não foi possível prosseguir com está ação, o tipo do produto não existe!\",\r\n         status: 404,\r\n        }\r\n      };\r\n    }\r\n\r\n    const where: any = {};\r\n\r\n    if (name)\r\n      where.id = {\r\n        contains: name,\r\n        mode: \"insensitive\",\r\n      };\r\n    if (userIDSend) {\r\n      where.idUserOwner = {\r\n        contains: userIDSend,\r\n        mode: \"insensitive\",\r\n      };\r\n    }\r\n    if (idTypeProduct)\r\n      where.idTypeProduct = { contains: idTypeProduct, mode: \"insensitive\" };\r\n    if (available)\r\n      where.available = { contains: available, mode: \"insensitive\" };\r\n\r\n    if (status !== null)\r\n      where.status = {\r\n        contains: status,\r\n      };\r\n\r\n    try {\r\n      const shouldPaginate = page !== undefined || limit !== undefined;\r\n      const skip = shouldPaginate\r\n        ? ((page ?? 1) - 1) * (limit ?? 10)\r\n        : undefined;\r\n      const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n      const products = await prismaClient.products.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n      });\r\n\r\n      const totalProducts = await prismaClient.products.count({ where });\r\n      const totalPages = shouldPaginate\r\n        ? Math.ceil(totalProducts / (limit ?? 10))\r\n        : 1;\r\n\r\n      return {\r\n        data: {\r\n          items: products,\r\n          totalItems: totalProducts,\r\n          totalPages: totalPages,\r\n          currentPage: shouldPaginate ? page ?? 1 : 1,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: MessagesError.GetAllMessageError,\r\n          error: err?.message,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsGetAllService };\r\n","import { Request,Response } from \"express\";\r\nimport { ProductsGetAllService } from \"../../services/Products/productsGetAllService\";\r\n\r\nclass ProductGetAllController {\r\n  async handle(req: Request, res: Response) {\r\n     const name = req.query.name as string\r\n     const page = req.query.page as string\r\n     const limit = req.query.limit as string\r\n     const idUserLogged = req.query.idUserLogged as string;\r\n     const idUserOwner = req.query.idUserOwner as string;\r\n     const idTypeProduct = req.query.idTypeProduct as string;\r\n     const available = req.query.available as string\r\n     const status = req.query.status as string\r\n\r\n\r\n     const productGetAll = new ProductsGetAllService()\r\n     const responseProductGetAll = await productGetAll.execute({\r\n      available,\r\n      idTypeProduct,\r\n      idUserLogged,\r\n      idUserOwner,\r\n      limit: Number(limit),\r\n      name,\r\n      page: Number(page),\r\n      ...(status !== null && {status: status !== 'false' ? true : false}),\r\n     })\r\n\r\n     return res.status(responseProductGetAll.data.status).json(responseProductGetAll.data)\r\n  }\r\n}\r\n\r\nexport {ProductGetAllController}","import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { BinRegisterMoveItemsService } from \"../Bin/binRegisterMoveItemsService\";\r\n\r\ninterface IProductsDeleteService {\r\n  id: string;\r\n  idUserOwner: string;\r\n}\r\n\r\nclass ProductsDeleteService {\r\n  async execute({\r\n    id,\r\n    idUserOwner,\r\n  }: IProductsDeleteService) {\r\n    if(!id){\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível prosseguir com esta ação, por favor envio o id do comercial para prosseguir\",\r\n                status: 403,\r\n            },\r\n        }\r\n    }\r\n\r\n    if(!idUserOwner){\r\n        return {\r\n            data: {\r\n                message: \"Não foi possível prosseguir com esta ação, por favor envie o id do responsável\",\r\n                status: 403,\r\n            },\r\n        }\r\n    }\r\n  \r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n\r\n    const commercialsExists = await prismaClient.products.findFirst({\r\n      where: {\r\n        id: id,\r\n        idUserOwner: idUserOwner,\r\n      }\r\n    });\r\n\r\n    if (!commercialsExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, este produto não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, está usuário responsável não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n\r\n      const binRegisterItemsService = new BinRegisterMoveItemsService() \r\n\r\n      const responseDelete = await binRegisterItemsService.execute({\r\n          id: id,\r\n          tableName: \"commercials\",\r\n          idUserOwner: commercialsExists.idUserOwner\r\n      })  \r\n\r\n      return {\r\n          data: {\r\n              message: responseDelete.data.message,\r\n              status: responseDelete.data.status\r\n          }\r\n      }   \r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.DeleteMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsDeleteService };\r\n","import { Request, Response } from \"express\";\r\nimport { ProductsDeleteService } from \"../../services/Products/productsDeleteService\";\r\n\r\nclass ProductsDeleteController {\r\n  async handle(req: Request, res: Response) {\r\n    const { id } = req.params;\r\n    const idUserOwner = req.user_id\r\n    const productsDelete = new ProductsDeleteService();\r\n    const responseProductsDelete = await productsDelete.execute({ id, idUserOwner });\r\n\r\n    return res.status(responseProductsDelete.data.status).json(responseProductsDelete.data);\r\n  }\r\n}\r\n\r\nexport { ProductsDeleteController };\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IListarDetalhesProdutosService {\r\n  id: string;\r\n  idUserLogged?: string | null;\r\n  idUserOwner?: string | null;\r\n}\r\n\r\nclass ProductsGetDetailsSevice {\r\n  async execute({\r\n    id,\r\n    idUserLogged,\r\n    idUserOwner,\r\n  }: IListarDetalhesProdutosService) {\r\n    const userIDSend = idUserLogged ?? idUserOwner;\r\n    const products = await prismaClient.products.findFirst({\r\n      where: {\r\n        id: id,\r\n        idUserOwner: userIDSend,\r\n      },\r\n    });\r\n\r\n    if (!products) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir, o produto não existe!\",\r\n          status: 404,\r\n        }\r\n      };\r\n    }\r\n\r\n    try {\r\n      return {\r\n        data: {\r\n          items: products,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        data: {\r\n          message: MessagesError.GetDetailsMessageError,\r\n          error: error?.message,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProductsGetDetailsSevice };\r\n","import { Request,Response } from \"express\";\r\nimport { ProductsGetDetailsSevice } from \"../../services/Products/productsGetDetailsSevice\";\r\n\r\nclass ProductGetDetailsController {\r\n  async handle(req: Request, res: Response) {\r\n     const {id} = req.params\r\n     const productsGetDetails = new ProductsGetDetailsSevice()\r\n     const responseProductsGetDetails = await productsGetDetails.execute({id})\r\n\r\n     return res.status(responseProductsGetDetails.data.status).json(responseProductsGetDetails.data)\r\n  }\r\n}\r\n\r\n\r\nexport {ProductGetDetailsController}","import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { todayWithTimeAtFormat } from \"../../utils/formatters/formatterToday\";\r\nimport { validationsProductsService } from \"../../utils/validationsServices/validationsProducts\";\r\n\r\n\r\ninterface IProductsEdit {\r\n    id: string\r\n    idCategory: string,\r\n    idTypeProduct:string\r\n    idUserOwner: string\r\n    name: string\r\n    description: string\r\n  \r\n    labelPrice: string // é a label que pode ir ao lado do preço se é a entrada,inteira,meia,promoção.\r\n    price: number\r\n  \r\n    expirationDate: string\r\n  \r\n    positionOrder: number\r\n  \r\n    available: boolean \r\n    allowAddCoupon: boolean \r\n  \r\n    status: boolean\r\n}\r\n \r\nclass ProductsEditService {\r\n  async execute ({ \r\n    id,\r\n   name,\r\n   allowAddCoupon,\r\n   available,\r\n   description,\r\n   expirationDate,\r\n   idCategory,\r\n   idTypeProduct,\r\n   idUserOwner,\r\n   labelPrice,\r\n   positionOrder,\r\n   price,\r\n   status\r\n  }: IProductsEdit) {\r\n\r\n      const validationsProducts = validationsProductsService({\r\n         name,\r\n         idUserOwner,\r\n         idCategory,\r\n         idTypeProduct,\r\n         description,\r\n         price,\r\n         allowAddCoupon,\r\n         available,\r\n      })\r\n\r\n      if(validationsProducts){\r\n         return validationsProducts\r\n      }\r\n\r\n      const productExists = await prismaClient.products.findFirst({\r\n         where: {\r\n            id: id\r\n         } \r\n      })\r\n\r\n      const categoryExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idCategory\r\n        } \r\n     })\r\n\r\n     const typesProductsExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idTypeProduct\r\n        } \r\n     })\r\n\r\n     const userExists = await prismaClient.typesProducts.findFirst({\r\n        where: {\r\n           id: idUserOwner\r\n        } \r\n     })\r\n      if(!productExists){\r\n         return {\r\n            data: {\r\n             status: 400,\r\n             message: \"Não foi possível prosseguir, esse produto não existe\"\r\n           }\r\n         }\r\n      }\r\n\r\n      if(!categoryExists){\r\n        return {\r\n          data: {\r\n           status: 400,\r\n           message: \"Não foi possível prosseguir, esse categoria não existe\"\r\n          }  \r\n         }\r\n     }\r\n     \r\n     if(!typesProductsExists){\r\n        return {\r\n          data: {\r\n           status: 400,\r\n           message: \"Não foi possível prosseguir, esse tipo do produto não existe\"\r\n          }\r\n         }\r\n     }\r\n\r\n     if(!userExists){\r\n        return {\r\n           data: {\r\n            status: 400,\r\n            message: \"Não foi possível prosseguir, esse usuário não existe\"\r\n           }\r\n         }\r\n     }\r\n \r\n      try {\r\n         \r\n         await prismaClient.products.update({\r\n            where: {\r\n                id: id\r\n            },\r\n            data: {\r\n               name: name,\r\n               allowAddCoupon: allowAddCoupon !== null ? allowAddCoupon : null,\r\n               available: available !== null ? available : null,\r\n               description: description,\r\n               expirationDate: expirationDate ? expirationDate : null,\r\n               idCategory: idCategory,\r\n               idTypeProduct: idTypeProduct,\r\n               idUserOwner: idUserOwner,\r\n               labelPrice: labelPrice, \r\n               positionOrder: positionOrder ? positionOrder : null,\r\n               price: price ? price : null,\r\n               status: status ? status : null\r\n            }\r\n         })  \r\n        \r\n         return {\r\n            data: {\r\n            status: 200,\r\n            message: Messages.UpdateMessageSuccess,\r\n         }    \r\n         }\r\n      } catch(err) {\r\n         return {\r\n          data: {\r\n            status: 500,\r\n            message:  `${MessagesError.UpdateMessageError} ${err}`,\r\n          } \r\n         }\r\n      }\r\n    \r\n  }\r\n}\r\n\r\n\r\nexport {ProductsEditService}","\r\nimport { Request,Response } from \"express\"\r\nimport { ProductsEditService } from \"../../services/Products/productEditService\"\r\n\r\nclass ProductsEditController {\r\n    async handle(req: Request,res: Response){\r\n        const {\r\n            id,\r\n            idCategory,\r\n            name,\r\n            allowAddCoupon,\r\n            available,\r\n            description,\r\n            expirationDate, \r\n            idTypeProduct,\r\n            labelPrice,\r\n            positionOrder,\r\n            price,\r\n            status\r\n        } = req.body\r\n        \r\n        const idUserOwner = req.user_id\r\n        \r\n        const productsEdit = new ProductsEditService()\r\n        const responseProductsEdit = await productsEdit.execute({\r\n            id,\r\n            idCategory,\r\n            name,\r\n            allowAddCoupon,\r\n            available,\r\n            description,\r\n            expirationDate, \r\n            idTypeProduct,\r\n            idUserOwner,\r\n            labelPrice,\r\n            positionOrder,\r\n            price,\r\n            status\r\n\r\n        })\r\n    \r\n        return res.status(responseProductsEdit.data.status).json(responseProductsEdit.data)\r\n    }\r\n}\r\n\r\nexport {ProductsEditController}","import { formatterCEP } from \"../../utils/formatters/formatterCEP\";\r\nimport { formatterCPF } from \"../../utils/formatters/formatterCPF\";\r\nimport {\r\n  formatterDate,\r\n  formatterDateToIso,\r\n} from \"../../utils/formatters/formatterDate\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { validatorPermissions } from \"../../utils/validators/validatorPermissions\";\r\n\r\nimport prismaClient from \"../../prisma\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { formatterCNPJ } from \"../../utils/formatters/formatterCNPJ\";\r\n \r\ninterface IUsersGetAllListService {\r\n  id_user_logged: string;\r\n  idOtherUser: string | null;\r\n  name?: string | null;\r\n  companyName?: string | null;\r\n  email?: string | null;\r\n  cpfCnpj?: string | null;\r\n  phone?: string | null;\r\n  birthDate?: string | null;\r\n  residence?: string | null;\r\n  neighborhood?: string | null;\r\n  address?: string | null;\r\n  city?: string | null;\r\n  gender?: string | null;\r\n  cep?: string | null;\r\n  typeAccess?: string | null;\r\n  masterAccess?: boolean | null;\r\n  status?: boolean;\r\n  page?: number | null;\r\n  limit?: number | null;\r\n}\r\n\r\nclass UsersGetAllListService {\r\n  async execute({\r\n    id_user_logged,\r\n    idOtherUser,\r\n    name,\r\n    companyName,\r\n    email,\r\n    cpfCnpj,\r\n    phone,\r\n    birthDate,\r\n    residence,\r\n    neighborhood,\r\n    address,\r\n    city,\r\n    gender,\r\n    cep,\r\n    typeAccess,\r\n    status,\r\n  }: IUsersGetAllListService) {\r\n    \r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: { id: id_user_logged },\r\n    });\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar a ação, o usuário responsável não foi encontrado.\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const responseValidation = validatorPermissions({\r\n      typeAccess: userExistsLogged.typeAccess,\r\n    });\r\n\r\n    if (!responseValidation) {\r\n      return {\r\n        data: {\r\n          message: \"Sua conta não possui permissão para realizar esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      (typeAccess && userExistsLogged.typeAccess === TypesAccess.User) ||\r\n      userExistsLogged.typeAccess === TypesAccess.Promoter\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Sua conta não possui permissão para buscar pelos parâmetros de tipo do usuário\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    const where: any = { id: { not: id_user_logged } };\r\n\r\n    if (idOtherUser) where.id = { contains: idOtherUser, mode: \"insensitive\" };\r\n    if (name) where.name = { contains: name, mode: \"insensitive\" };\r\n    if (companyName) where.companyName = { contains: companyName, mode: \"insensitive\"}\r\n    if (email) where.email = { contains: email, mode: \"insensitive\" };\r\n    if (cpfCnpj) where.cpfCnpj = { contains: cpfCnpj, mode: \"insensitive\" };\r\n    if (phone) where.phone = { contains: phone };\r\n    if (birthDate) where.birthDate = formatterDate(birthDate);\r\n    if (residence)\r\n      where.residence = { contains: residence, mode: \"insensitive\" };\r\n    if (neighborhood)\r\n      where.neighborhood = { contains: neighborhood, mode: \"insensitive\" };\r\n    if (address) where.address = { contains: address, mode: \"insensitive\" };\r\n    if (cep) where.cep = { contains: cep, mode: \"insensitive\" };\r\n    if (city) where.city = { contains: city, mode: \"insensitive\" };\r\n    if (gender) where.gender = gender;\r\n    if (status !== null) where.status = status;\r\n    if (typeAccess) where.typeAccess = { not: typeAccess, mode: \"insensitive\" };\r\n\r\n    const users = await prismaClient.users.findMany({\r\n      where,\r\n      orderBy: { created_At: \"desc\" },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        companyName: true,\r\n        email: true,\r\n        cpfCnpj: true,\r\n        phone: true,\r\n        birthDate: true,\r\n        gender: true,\r\n        city: true,\r\n        street: true,\r\n        neighborhood: true,\r\n        complement: true,\r\n        cep: true,\r\n        number_address: true,\r\n        region_code: true,\r\n        typeAccess: true,\r\n        typePerson:true,\r\n        termsUsePlatform: true,\r\n        termsUseLGPD: true,\r\n        termsPrivacyPolicy: true,\r\n        termsReceiptNews: true,\r\n        \r\n        profileSocialUrl: true,\r\n        profileAvatar: true,\r\n\r\n        registeredBy: true,\r\n        typeAccessRegisteredBy: true,\r\n        cpfRegisteredBy: true,\r\n        dateRegisteredBy: true,\r\n        \r\n        editedBy: true,\r\n        typeAccessEditedBy: true,\r\n        cpfEditedBy: true,\r\n        dateEditedBy: true,\r\n\r\n        tutorialFirstAccess: true,\r\n        status: true,\r\n        created_At: true,\r\n      },\r\n    });\r\n\r\n    const formattedUsers = users.map((user) => ({\r\n      ...user,\r\n      cpfCnpj:\r\n        user.typePerson === TypePerson.Fisic\r\n          ? formatterCPF(user.cpfCnpj)\r\n          : formatterCNPJ(user.cpfCnpj),\r\n      cep: formatterCEP(user.cep),\r\n      birthDate: user.birthDate ? formatterDateToIso(user.birthDate) : null,\r\n    }));\r\n\r\n    return {\r\n      data: {\r\n        items: formattedUsers,\r\n        status: 200,\r\n      },\r\n      status: 200,\r\n    };\r\n  }\r\n}\r\n\r\nexport { UsersGetAllListService };\r\n","import { Request, Response } from 'express';\r\nimport { deformatter } from '../../utils/desformatter';\r\nimport { UsersGetAllListService } from '../../services/Users/usersGetAllListService';\r\n \r\nclass UsersGetAllListController {\r\n  async handle(req: Request,res: Response){\r\n    const id_user_logged = req.user_id\r\n    const idOtherUser = req.query.idOtherUser as string\r\n    const name = req.query.name as string\r\n    const companyName = req.query.companyName as string\r\n    const email = req.query.email as string\r\n    const cpfCnpj = req.query.cpfCnpj as string\r\n    const cep = req.query.cep as string\r\n    const phone = req.query.phone as string\r\n    const birthDate = req.query.birthDate as string\r\n    const residence = req.query.residence as string\r\n    const neighborhood = req.query.neighborhood as string\r\n    const address = req.query.address as string\r\n    const city = req.query.city as string;\r\n    const gender = req.query.gender as string;\r\n    const typeAccess = req.query.typeAccess as string; \r\n    const status = req.query.status as string\r\n    \r\n    const getListUsers = new UsersGetAllListService()\r\n    const responseGetListUsers = await getListUsers.execute({\r\n      id_user_logged,\r\n      idOtherUser,\r\n      name,\r\n      companyName: companyName,\r\n      email,\r\n      cpfCnpj: cpfCnpj ? deformatter(cpfCnpj) : null,\r\n      phone: phone ? deformatter(phone) : null,\r\n      birthDate,\r\n      residence,\r\n      neighborhood,\r\n      address,\r\n      city,\r\n      gender,\r\n      typeAccess,\r\n      cep: cep ? deformatter(cep) : null,\r\n      ...(status !== null && {status: status !== 'false' ? true : false})\r\n    })\r\n\r\n    return res.status(responseGetListUsers.data.status).json(responseGetListUsers.data)\r\n\r\n  }\r\n}\r\n\r\nexport { UsersGetAllListController };\r\n","import prismaClient from \"../../../prisma\";\r\nimport jsonwebtoken from \"jsonwebtoken\";\r\nimport { transporter } from \"../../../config/nodemailerConfig\"; \r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { validatorEmail } from \"../../../utils/validators/validatorEmail\";\r\n\r\ninterface IRecoverPasswordService {\r\n  email: string;\r\n}\r\n\r\nclass RecoverPasswordService {\r\n  async execute({ email }: IRecoverPasswordService) {\r\n\r\n    if (!email) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor informe seu email para prosseguir.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    \r\n    if(!validatorEmail(email)){\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com a ação, E-mail inválido.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const userExists = await prismaClient.users.findFirst({\r\n        where: {\r\n          email: email,\r\n        },\r\n      });\r\n\r\n      if (!userExists) {\r\n        return {\r\n          data: {\r\n            message: \"Não foi possível prosseguir com a ação, E-mail do usuário não encontrado!\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      const tokenRecoverPassword = jsonwebtoken.sign(\r\n        { userId: userExists.id },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: \"30min\" }\r\n      );\r\n\r\n      const resetLink = `${process.env.FRONTEND_URL}${process.env.LINK_REDEFINE_PASSWORD_URL}/${tokenRecoverPassword}`;\r\n      const filePath = path.join(__dirname, \"../../../config/templates/templateRecoverPassword.html\");\r\n      let htmlContent = fs.readFileSync(filePath, \"utf-8\");\r\n\r\n      htmlContent = htmlContent\r\n        .replace(\"{{resetLink}}\", resetLink)\r\n        .replace(\"{{userName}}\", userExists.name.split(\" \")[0]);\r\n\r\n      const mailOptions = {\r\n          from: `Suporte Up Point <${process.env.EMAIL_USER_RECOVERPASSWORD}>`,\r\n          to: userExists.email,\r\n          subject: \"Redefinição de Senha\",\r\n          html: htmlContent,\r\n          messageId: `<${Date.now()}-${Math.random().toString(36).slice(2)}>`,\r\n          headers: { 'X-Entity-Ref-ID': `${Date.now()}` },\r\n        };\r\n\r\n      await transporter({\r\n        authEmail: process.env.EMAIL_USER_RECOVERPASSWORD,\r\n        authPassword: process.env.EMAIL_PASSWORD_RECOVERPASSWORD\r\n      }).sendMail(mailOptions);\r\n\r\n      return {\r\n        data: {\r\n          message: \"E-mail de recuperação enviado, confira sua caixa de entrada.\",\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      console.log(err);\r\n      return {\r\n        data: {\r\n          err: err,\r\n          message: \"Erro ao enviar e-mail para recuperação de senha.\",\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { RecoverPasswordService };\r\n","import nodemailer from 'nodemailer'\r\n\r\ninterface ITransporter {\r\n    authEmail: string,\r\n    authPassword: string\r\n}\r\n\r\nexport const transporter = ({authEmail, authPassword}: ITransporter) => {\r\n    \r\n    return nodemailer.createTransport({\r\n        host: process.env.SMTP_HOST_NODEMAILER ?? 'smtp.gmail.com',\r\n        port: 465,\r\n        secure: true,\r\n        auth: {\r\n            user: authEmail,\r\n            pass: authPassword\r\n        }\r\n    })\r\n}","\r\nimport { Request, Response } from 'express'\r\nimport { RecoverPasswordService } from '../../../services/Users/PasswordRecover/recoverPasswordUserService'\r\n\r\n\r\n\r\nclass RecoverPasswordController {\r\n    async handle(req: Request, res: Response){   \r\n\r\n        const {\r\n            email,\r\n        } = req.body\r\n\r\n        const recoverPassword = new RecoverPasswordService()\r\n        const responseRecoverPassword = await recoverPassword.execute({\r\n            email\r\n        })\r\n\r\n        return res.status(responseRecoverPassword.data.status).json(responseRecoverPassword.data)\r\n    }\r\n}\r\n\r\n\r\nexport { RecoverPasswordController }","import jsonwebtoken from \"jsonwebtoken\";\r\nimport prismaClient from \"../../../prisma\";\r\nimport { hash } from \"bcryptjs\";\r\ninterface IRefinePasswordService {\r\n  tokenPassword: string;\r\n  newPassword: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nclass RedefinePasswordService {\r\n  async execute({ tokenPassword, newPassword,confirmPassword }: IRefinePasswordService) {\r\n    if (!tokenPassword) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Por favor informe o token de recuperação de senha enviado no seu email\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n    if (!newPassword) {\r\n      return {\r\n        data: {\r\n          message: \"Por favor informe sua nova senha para prosseguir.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if(newPassword.length < 8 ){\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    \r\n    if(newPassword.length > 14 ){\r\n      return {\r\n        data: {\r\n          message:\r\n            \"A senha deve ter de 8 a 14 caracteres para garantir maior segurança. você ultrapassou o limite de caracteres\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if(newPassword !== confirmPassword ){\r\n      return {\r\n        data: {\r\n          message: \"As credenciais informadas não coincidem. Confirme a senha corretamente para continuar\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n    \r\n    try {\r\n      const decoded = jsonwebtoken.verify(\r\n        tokenPassword,\r\n        process.env.JWT_SECRET\r\n      );\r\n      const { userId } = decoded as { userId: string };\r\n\r\n      const userExists = await prismaClient.users.findFirst({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      });\r\n\r\n      if (!userExists) {\r\n        return {\r\n          data: {\r\n            message:\r\n              \"Não foi possível prosseguir com a ação, dados do token inválidos.\",\r\n            status: 404,\r\n          },\r\n        };\r\n      }\r\n\r\n      const newPasswordHash = await hash(newPassword, 8);\r\n\r\n      await prismaClient.users.update({\r\n        where: {\r\n          id: userExists.id,\r\n        },\r\n        data: {\r\n          password: newPasswordHash,\r\n        },\r\n      });\r\n      \r\n      return {\r\n        data: {\r\n          message: \"Sua senha foi redefinida com sucesso\",\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      if (err.name === \"TokenExpiredError\") {\r\n        return {\r\n          data: {\r\n            message: \"Link para redefinição de senha expirado (token).\",\r\n            status: 401,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        data: {\r\n          message: \"Erro ao redefinir senha\",\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { RedefinePasswordService };\r\n","\r\nimport { Request, Response } from \"express\"\r\nimport { RedefinePasswordService } from \"../../../services/Users/PasswordRecover/redefinePasswordUserService\"\r\n\r\n\r\n\r\nclass RedefinePasswordController {\r\n    async handle(req: Request, res: Response){   \r\n\r\n        const {\r\n            tokenPassword, \r\n            newPassword,\r\n            confirmPassword\r\n        } = req.body\r\n\r\n        const recoverPassword = new RedefinePasswordService()\r\n        const responseRecoverPassword = await recoverPassword.execute({\r\n            tokenPassword, \r\n            newPassword,\r\n            confirmPassword\r\n        })\r\n\r\n        return res.status(responseRecoverPassword.data.status).json(responseRecoverPassword.data)\r\n    }\r\n}\r\n\r\n\r\nexport { RedefinePasswordController }","import { TypesAccess } from \"../../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  cpfCnpj: string;\r\n  id_user_logged: string;\r\n  typeAccess?: string | null;\r\n}\r\n\r\nclass AllowAccessUserService {\r\n  async execute({\r\n    cpfCnpj,\r\n    id_user_logged,\r\n    typeAccess,\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, por favor envie o id do responsável pela alteração\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!cpfCnpj) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, por favor envie o CPF ou CNPJ do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      typeAccess !== TypesAccess.Owner &&\r\n      typeAccess !== TypesAccess.Developer &&\r\n      typeAccess !== TypesAccess.Master &&\r\n      typeAccess !== TypesAccess.Admin &&\r\n      typeAccess !== TypesAccess.Promoter &&\r\n      typeAccess !== TypesAccess.User\r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, tipo de acesso não reconhecido pelo sistema.\",\r\n          typesAccessAccepts: [\r\n            TypesAccess.Owner,\r\n            TypesAccess.Developer,\r\n            TypesAccess.Master,\r\n            TypesAccess.Admin,\r\n            TypesAccess.Promoter,\r\n            TypesAccess.User,\r\n          \r\n          ],\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        cpfCnpj: cpfCnpj,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, usuário responsavel não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar esta ação, usuário não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userLoggedExists?.typeAccess !== TypesAccess.Owner &&\r\n      userLoggedExists?.typeAccess !== TypesAccess.Developer &&\r\n      userLoggedExists.typeAccess !== TypesAccess.Master \r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Você não tem permissão de autorização para esta ação.\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (userExists.id === id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não é possível alterar o próprio tipo de acesso, para está ação entre em contato com o suporte\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: userExists.id,\r\n      },\r\n      data: {\r\n        typeAccess: typeAccess ? typeAccess : TypesAccess.User,\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Permissão de autorizações alteradas com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowAccessUserService };\r\n","import { Request, Response} from 'express'\r\nimport { AllowAccessUserService } from '../../../services/Users/Permissions/allowAccessUserServices';\r\n\r\n\r\nclass AllowAccessUserController {\r\n    async handle(req: Request, res: Response){\r\n         const id_user_logged = req.user_id;\r\n\r\n        const {\r\n            cpfCnpj,\r\n            typeAccess, \r\n        } = req.body;\r\n\r\n        const allowAccessUser = new AllowAccessUserService()\r\n        const responseAllowAccessUser = await allowAccessUser.execute({\r\n            cpfCnpj,\r\n            id_user_logged,\r\n            typeAccess\r\n        })\r\n\r\n        return res.status(responseAllowAccessUser.data.status).json(responseAllowAccessUser.data)\r\n    }\r\n}\r\n\r\n\r\nexport {AllowAccessUserController}","import prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  id_user_logged: string;\r\n  tutorialFirstAccess?: boolean | null;\r\n}\r\n\r\nclass AllowUpdateTutorialFirstAccessService {\r\n  async execute({\r\n    id_user_logged,\r\n    tutorialFirstAccess\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor envie o id_user_logged do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, usuário responsável não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n      data: {\r\n        tutorialFirstAccess: tutorialFirstAccess\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Tutorial de primeiro acesso atualizado com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowUpdateTutorialFirstAccessService };\r\n","import { Request, Response} from 'express'\r\nimport { AllowUpdateTutorialFirstAccessService } from '../../../services/Users/Permissions/allowUpdateTutorialFirstAccessService';\r\n\r\n\r\nclass AllowUpdateTutorialFirstAccessController {\r\n    async handle(req: Request, res: Response){\r\n         const id_user_logged = req.user_id;\r\n\r\n        const {\r\n            tutorialFirstAccess\r\n        } = req.body;\r\n\r\n        const allowUpdateTutorialFirstAccess = new AllowUpdateTutorialFirstAccessService()\r\n        const responseAllowUpdateTutorialFirstAccess = await allowUpdateTutorialFirstAccess.execute({\r\n            id_user_logged,\r\n            tutorialFirstAccess\r\n        })\r\n\r\n        return res.status(responseAllowUpdateTutorialFirstAccess.data.status).json(responseAllowUpdateTutorialFirstAccess.data)\r\n    }\r\n}\r\n\r\n\r\nexport {AllowUpdateTutorialFirstAccessController}","\r\nimport prismaClient from \"../../../prisma\";\r\n\r\ninterface IAllowAccessUserService {\r\n  id_user_logged: string;  \r\n  termsUsePlatform?: boolean | null\r\n  termsUseLGPD?: boolean | null\r\n  termsUsePark?: boolean | null\r\n  termsReceiptNews?: boolean | null;\r\n  termsPrivacyPolicy?: boolean | null\r\n}\r\n\r\nclass AllowUpdateTermsService {\r\n  async execute({\r\n    id_user_logged,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    termsReceiptNews\r\n  }: IAllowAccessUserService) {\r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, por favor envie o id_user_logged do usuário.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userLoggedExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    if (!userLoggedExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar esta ação, usuário responsável não encontrado.\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    await prismaClient.users.update({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n      data: {\r\n        termsPrivacyPolicy: termsPrivacyPolicy !== null ? termsPrivacyPolicy : userLoggedExists.termsPrivacyPolicy,\r\n        termsUseLGPD: termsUseLGPD !== null ? termsUseLGPD : userLoggedExists.termsUseLGPD,\r\n        termsUsePlatform: termsUsePlatform !== null ? termsUsePlatform : userLoggedExists.termsUsePlatform,\r\n        termsReceiptNews: termsReceiptNews !== null ? termsReceiptNews: userLoggedExists.termsReceiptNews\r\n      },\r\n    });\r\n\r\n    return {\r\n      data: {\r\n        message: \"Termo(s) atualizado(s) com sucesso.\",\r\n        status: 200,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport { AllowUpdateTermsService };\r\n","import { Request, Response} from 'express'\r\nimport { AllowUpdateTermsService } from '../../../services/Users/Permissions/allowUpdateTermsService';\r\n\r\n\r\nclass AllowUpdateTermsController {\r\n    async handle(req: Request, res: Response){\r\n         const id_user_logged = req.user_id;\r\n\r\n        const {\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        } = req.body;\r\n\r\n        const AllowUpdateTerms = new AllowUpdateTermsService()\r\n        const responseAllowAccessUser = await AllowUpdateTerms.execute({\r\n            id_user_logged,\r\n            termsUsePlatform,\r\n            termsUseLGPD,\r\n            termsPrivacyPolicy,\r\n            termsReceiptNews\r\n        })\r\n\r\n        return res.status(responseAllowAccessUser.data.status).json(responseAllowAccessUser.data)\r\n    }\r\n}\r\n\r\n\r\nexport {AllowUpdateTermsController}","import { hash } from \"bcryptjs\";\r\nimport prismaClient from \"../../prisma\";\r\nimport { formatterDateToIso } from \"../../utils/formatters/formatterDate\";\r\nimport { validationsUserService } from \"../../utils/validationsServices/validationsUserService\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport { todayWithTime } from \"../../utils/formatters/formatterToday\";\r\nimport { deformatter } from \"../../utils/desformatter\";\r\nimport { TypePerson } from \"../../keys/typePerson/typePerson\";\r\nimport { v2 as cloudinary,  UploadApiResponse } from \"cloudinary\";\r\nimport { v6 as uuid} from \"uuid\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\n\r\n\r\n\r\n\r\ninterface IUsersRegisterService {\r\n  id_user_logged?: string;\r\n  name: string;\r\n  companyName?: string | null\r\n  email: string; \r\n  password: string; \r\n  cpfCnpj: string; \r\n  phone: string;\r\n  birthDate: string;\r\n  residence?: string; \r\n  neighborhood?: string; \r\n  address?: string; \r\n  city?: string; \r\n  cep?: string;\r\n  region_code?: string;\r\n  number_address: string;\r\n  gender?: string; // gênero\r\n  status?: boolean | null;\r\n  street?: string | null;\r\n  complement?: string | null;\r\n  profileAvatar?: UploadedFile,\r\n  profileSocialUrl?: string | null;\r\n\r\n  typeAccess?: string | null\r\n  typePerson: TypePerson;\r\n  termsUsePlatform?: boolean | null\r\n  termsUseLGPD?: boolean | null\r\n  termsPrivacyPolicy?: boolean | null\r\n  termsReceiptNews?: boolean | null\r\n}\r\n\r\nclass UsersRegisterOtherService {\r\n  async execute({\r\n    id_user_logged,\r\n    name,\r\n    companyName,\r\n    email,\r\n    password,\r\n    cpfCnpj,\r\n    phone,\r\n    birthDate,\r\n    street,\r\n    complement,\r\n    neighborhood,\r\n    city,\r\n    cep,\r\n    region_code,\r\n    number_address,\r\n    gender,\r\n    profileSocialUrl,\r\n    profileAvatar,\r\n    termsUsePlatform,\r\n    termsUseLGPD,\r\n    termsPrivacyPolicy,\r\n    termsReceiptNews,\r\n    typeAccess,\r\n    typePerson,\r\n\r\n    status,\r\n  }: IUsersRegisterService) {\r\n    \r\n    if (!id_user_logged) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação,informe o id do responsável\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const verifyValidations = validationsUserService({\r\n      name,\r\n      companyName,\r\n      email,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      typePerson,\r\n      password: password ? password : null,\r\n    });\r\n\r\n    if (verifyValidations) {\r\n      return verifyValidations;\r\n    }\r\n\r\n\r\n    const userExistsLogged = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: id_user_logged,\r\n      },\r\n    });\r\n\r\n    const userCPFOrCNPJExists = await prismaClient.users.findFirst({\r\n      where: { cpfCnpj: deformatter(cpfCnpj) },\r\n    });\r\n\r\n    const CPFOrCNPJ = userCPFOrCNPJExists.typePerson === TypePerson.Fisic ? \"CPF\" : \"CNPJ\"\r\n    \r\n    if(userCPFOrCNPJExists){\r\n      return {\r\n        data: {\r\n          message: `Não foi possível prosseguir com esta ação, ${CPFOrCNPJ} já está em uso`,\r\n          status: 404,\r\n        },\r\n      }\r\n    }\r\n\r\n    if (!userExistsLogged) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, usuário responsável não existe\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n      userExistsLogged.typeAccess === TypesAccess.User ||\r\n      userExistsLogged.typeAccess === TypesAccess.Promoter ||\r\n      userExistsLogged.typeAccess === TypesAccess.Worker\r\n    ) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível prosseguir com esta ação, sua conta não possui permissão para está ação apenas (Master e Admin)\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n    \r\n    const validationError = validationsUserService({\r\n      name,\r\n      companyName,\r\n      email,\r\n      password,\r\n      cpfCnpj,\r\n      phone,\r\n      gender,\r\n    });\r\n\r\n    if (validationError) {\r\n     return validationError;\r\n    }\r\n\r\n    if (password.length < 8) {\r\n      return {\r\n        data: {\r\n          message: \"A senha deve ter no mínimo 8 caracteres para garantir maior segurança.\",\r\n          status: 401,\r\n        },\r\n      };\r\n    }\r\n\r\n\r\n    try {\r\n      \r\n    const todayAt = todayWithTime();\r\n\r\n    const passwordHash = await hash(password, 8);\r\n    const dateRegisteredBy = new Date();\r\n    const idProfileAvatar = uuid()\r\n\r\n    const resultFile: UploadApiResponse = await new Promise((resolve, reject) => {\r\n         cloudinary.uploader.upload_stream({\r\n               public_id: `users/${idProfileAvatar}`,\r\n               folder: \"users\"\r\n         }, (err, result) => {\r\n           if(err) {\r\n            return {\r\n              message: err,\r\n              status: 500,\r\n            }\r\n           }\r\n           resolve(result)\r\n         }\r\n        \r\n        ).end(profileAvatar.data)\r\n    })\r\n\r\n      const responseRegisterUser = await prismaClient.users.create({\r\n        data: {\r\n          name,\r\n          companyName,\r\n          email,\r\n          password: passwordHash,\r\n          cpfCnpj: deformatter(cpfCnpj),\r\n          phone: deformatter(phone),\r\n          birthDate: formatterDateToIso(birthDate),\r\n          gender,\r\n          street,\r\n          neighborhood,\r\n          complement,\r\n          city,\r\n          cep: cep ? deformatter(cep) : null, \r\n          region_code,\r\n          number_address,\r\n          status,        \r\n          idProfileAvatar: idProfileAvatar,\r\n          profileAvatar: resultFile.url ? resultFile.url : null,\r\n          profileSocialUrl: profileSocialUrl !== null ? profileSocialUrl : null,\r\n          termsUsePlatform: termsUsePlatform !== null ? termsUsePlatform : true,\r\n          termsUseLGPD: termsUseLGPD !== null ? termsUseLGPD : true,\r\n          termsReceiptNews: termsReceiptNews !== null ? termsReceiptNews : true,\r\n          termsPrivacyPolicy: termsPrivacyPolicy !== null ? termsPrivacyPolicy : true,\r\n          typePerson: typePerson ? typePerson : TypePerson.Fisic,\r\n          typeAccess: typeAccess ? typeAccess : TypesAccess.User,\r\n         \r\n          registeredBy: userExistsLogged?.name ? userExistsLogged?.name : null,\r\n          typeAccessRegisteredBy: userExistsLogged?.typeAccess ? userExistsLogged?.typeAccess : null,\r\n          cpfRegisteredBy: userExistsLogged?.cpfCnpj ? userExistsLogged?.cpfCnpj : null,\r\n          dateRegisteredBy: dateRegisteredBy ? formatterDateToIso(dateRegisteredBy) : null,\r\n          \r\n          tutorialFirstAccess: true,\r\n         \r\n          created_At: todayAt,\r\n        },\r\n      });\r\n      return {\r\n        data: {\r\n          id: responseRegisterUser.id,\r\n          message: \"Usuário cadastrado com sucesso!\",\r\n          status: 201,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `Erro ao registrar usuário: ${err.message}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  \r\n\r\n   \r\n  }\r\n}\r\n\r\nexport { UsersRegisterOtherService };\r\n","import { Request, Response } from \"express\";\r\nimport { UsersRegisterOtherService } from \"../../services/Users/usersRegisterOtherService\";\r\nimport { UploadedFile } from \"express-fileupload\";\r\n\r\n\r\n\r\nclass UsersRegisterOtherController {\r\n  async handle(req: Request, res: Response) {\r\n    const id_user_logged = req.user_id\r\n    const {\r\n      name,\r\n      companyName,\r\n      email,\r\n      password,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      street,\r\n      neighborhood,\r\n      complement, \r\n      city, \r\n      cep,       \r\n      region_code,  \r\n      number_address, \r\n      typeAccess,\r\n      typePerson,\r\n      status,\r\n      termsUsePlatform,\r\n      termsUseLGPD,\r\n      termsPrivacyPolicy,\r\n      termsReceiptNews\r\n    } = req.body;\r\n\r\n    \r\n    const profileAvatar = req.files.profileAvatar as UploadedFile\r\n    //const profile \r\n    const usersRegisterOtherService = new UsersRegisterOtherService();\r\n    const responseRegisterUser = await usersRegisterOtherService.execute({\r\n      id_user_logged,\r\n      name,\r\n      companyName,\r\n      email,\r\n      password,\r\n      cpfCnpj,\r\n      phone,\r\n      birthDate,\r\n      gender,\r\n      street,\r\n      neighborhood,\r\n      complement, \r\n      city, \r\n      cep,       \r\n      region_code,  \r\n      number_address, \r\n      typeAccess,\r\n      typePerson,\r\n      status,\r\n      termsUsePlatform,\r\n      termsUseLGPD,\r\n      termsPrivacyPolicy,\r\n      termsReceiptNews,\r\n      profileAvatar\r\n      \r\n    });\r\n\r\n    return res\r\n      .status(responseRegisterUser.data.status)\r\n      .json(responseRegisterUser.data);\r\n  }\r\n}\r\n\r\nexport { UsersRegisterOtherController };\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IBinDeleteItemsService {\r\n  id?: string | null;\r\n  idUserOwner?: string | null;\r\n}\r\n\r\nclass BinDeleteItemsService {\r\n  async execute({ id }: IBinDeleteItemsService) {\r\n    if (!id) {\r\n      return {\r\n        data: {\r\n          message: \"Informe o ID do item na lixeira\",\r\n          status: 400,\r\n        }\r\n      };\r\n    }\r\n\r\n    const itemBinExists = await prismaClient.bin.findUnique({\r\n      where: {\r\n        id: id, \r\n      },\r\n    });\r\n\r\n    if (!itemBinExists) {\r\n      return {\r\n        message:\r\n          \"Não foi possível prosseguir com a ação, item não encontrado na lixeira\",\r\n        status: 404,\r\n      };\r\n    }\r\n\r\n    try {\r\n      await prismaClient.bin.delete({\r\n        where: { id },\r\n      });\r\n\r\n      return {\r\n        message: \"Item deletado permanentemente com sucesso\",\r\n        status: 200,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        message: `${MessagesError.DeleteMessageError} ${err}`,\r\n        status: 500,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { BinDeleteItemsService };\r\n","import { Request, Response } from \"express\";\r\nimport { BinDeleteItemsService } from \"../../services/Bin/binDeleteItemsService\";\r\n\r\nclass BinDeleteItemsController {\r\n  async handle(req: Request, res: Response) {\r\n     \r\n    const { \r\n        id,\r\n    } = req.params;\r\n\r\n    const binDeleteItemsService= new BinDeleteItemsService();\r\n\r\n    const responseBinGetAllItemsService = await binDeleteItemsService.execute({\r\n          id: id,\r\n    });\r\n\r\n    return res\r\n      .status(responseBinGetAllItemsService.data.status)\r\n      .json(responseBinGetAllItemsService.data);\r\n  }\r\n}\r\n\r\nexport { BinDeleteItemsController };\r\n","import { Messages, MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IBinEditItemsService {\r\n  id: string;\r\n  tableName: string;\r\n  idUserOwner: string;\r\n  data: JSON | null;\r\n}\r\n\r\nclass BinEditItemsService {\r\n  async execute({ id, idUserOwner, tableName, data }: IBinEditItemsService) {\r\n    if (!idUserOwner) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, Informe o ID do responsável\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!id || !tableName) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, Informe o ID e o nome da tabela\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    const itemBinExists = await prismaClient.$queryRawUnsafe(\r\n      `SELECT * FROM ${tableName} WHERE id = '${id}'`\r\n    );\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, usuário não existe\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!itemBinExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível prosseguir com está ação, item não existe na lixeira\",\r\n          status: 400,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      await prismaClient.bin.update({\r\n        where: {\r\n          id: id,\r\n        },\r\n        data: {\r\n          tableName,\r\n          itemId: id,\r\n          idUserOwner: idUserOwner,\r\n          data: JSON.stringify(data),\r\n        },\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          message: Messages.UpdateMessageSuccess,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.UpdateMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { BinEditItemsService };\r\n","import { Request, Response } from \"express\";\r\n \r\nimport { BinEditItemsService } from \"../../services/Bin/binEditItemsService\";\r\n\r\nclass BinEditItemsController {\r\n  async handle(req: Request, res: Response) {\r\n     \r\n    const { \r\n        id,\r\n        idUserOwner,\r\n        tableName,\r\n        data\r\n    } = req.body;\r\n\r\n    const binEditItemsService = new BinEditItemsService();\r\n\r\n    const responseBinGetAllItemsService = await binEditItemsService.execute({\r\n         id: id,\r\n         idUserOwner: idUserOwner,\r\n         tableName: tableName, \r\n         data: data\r\n    });\r\n\r\n    return res\r\n      .status(responseBinGetAllItemsService.data.status)\r\n      .json(responseBinGetAllItemsService.data);\r\n  }\r\n}\r\n\r\nexport { BinEditItemsController };\r\n","import {Request, Response} from 'express'\r\nimport { BinRegisterMoveItemsService } from '../../services/Bin/binRegisterMoveItemsService'\r\n\r\n\r\n\r\nclass BinRegisterMoveItemsController {\r\n    async handle(req: Request, res: Response){\r\n        const idUserLogged = req.user_id\r\n        const {\r\n            id,\r\n            tableName\r\n\r\n        } = req.body\r\n\r\n        const binRegisterMoveItems = new BinRegisterMoveItemsService()\r\n\r\n        const responseBinRegisterMoveItems = await binRegisterMoveItems.execute({\r\n            id,\r\n            idUserOwner: idUserLogged,\r\n            tableName\r\n        })\r\n\r\n        return res.status(responseBinRegisterMoveItems.data.status).json(responseBinRegisterMoveItems.data)\r\n \r\n    }\r\n}\r\n\r\nexport {BinRegisterMoveItemsController}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IBinGetDetailsItemsService {\r\n  id: string;\r\n  idUserOwner?: string | null;\r\n}\r\n\r\nclass BinGetDetailsItemsService {\r\n  async execute({ id, idUserOwner }: IBinGetDetailsItemsService) {\r\n    const where: any = null;\r\n\r\n    if (id) where.id = { contains: id, mode: \"insensitive\" };\r\n    if (idUserOwner) where.idUserOwner = { contains: idUserOwner, mode: \"insensitive\" };\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n    \r\n    const binExists = await prismaClient.bin.findFirst({\r\n      where,\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, esse usuário responsável pelo item não existe!\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (!binExists) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, o item não existe na lixeira!\",\r\n          status: 404,\r\n        },\r\n      };\r\n    }\r\n\r\n    try {\r\n      return {\r\n        data: {\r\n          items: binExists,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetDetailsMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { BinGetDetailsItemsService };\r\n","import {Request, Response} from 'express'\r\nimport { BinGetDetailsItemsService } from '../../services/Bin/binGetDetailsItemsService'\r\n\r\n\r\n\r\nclass BinGetDetailsItemsController {\r\n    async handle(req: Request, res: Response){\r\n        const id = req.query.id as string;\r\n        const idUserOwner = req.query.idUserOwner as string\r\n\r\n        const binGetDetailsItems = new BinGetDetailsItemsService()\r\n\r\n        const responseBinGetDetailsItems = await binGetDetailsItems.execute({\r\n            id: id,\r\n            idUserOwner: idUserOwner\r\n        })\r\n\r\n        return res.status(responseBinGetDetailsItems.data.status).json(responseBinGetDetailsItems.data)\r\n \r\n    }\r\n}\r\n\r\nexport {BinGetDetailsItemsController}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { MessagesError } from \"../../constants/messages.api\";\r\nimport { TypesAccess } from \"../../keys/typeAccess/typesAccess\";\r\nimport prismaClient from \"../../prisma\";\r\n\r\ninterface IBinGetAllItemsService {\r\n  tableName?: string;\r\n  idUserOwner?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\nclass BinGetAllItemsService {\r\n  async execute({\r\n    tableName,\r\n    idUserOwner,\r\n    page,\r\n    limit,\r\n  }: IBinGetAllItemsService) {\r\n    const where: any = null;\r\n\r\n    const userExists = await prismaClient.users.findFirst({\r\n      where: {\r\n        id: idUserOwner,\r\n      },\r\n    });\r\n\r\n    if (!userExists) {\r\n      return {\r\n        data: {\r\n          message: \"Não foi possível realizar essa ação, o usuário não existe\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (\r\n        idUserOwner !== userExists.id &&\r\n      (userExists.typeAccess === TypesAccess.User ||\r\n        userExists.typeAccess === TypesAccess.Promoter ||\r\n        userExists.typeAccess === TypesAccess.Worker)\r\n    ) {\r\n      return {\r\n        data: {\r\n          message:\r\n            \"Não foi possível realizar essa ação, sua conta não tem permissão para realizar essa ação\",\r\n          status: 403,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (tableName) where.tableName = { contains: tableName, mode: \"insensitive\" };\r\n    if (idUserOwner) where.idUserOwner = { contains: idUserOwner, mode: \"insensitive\" };\r\n\r\n    const shouldPaginate = page !== undefined || limit !== undefined;\r\n    const skip = shouldPaginate ? (page ?? 1) - 1 + (limit ?? 10) : undefined;\r\n    const take = shouldPaginate ? limit ?? 10 : undefined;\r\n\r\n    try {\r\n      const binItems = await prismaClient.bin.findMany({\r\n        where,\r\n        skip,\r\n        take,\r\n        orderBy: { created_At: \"desc\" },\r\n        select: {\r\n          id: true,\r\n          tableName: true,\r\n          data: true,\r\n          created_At: true,\r\n          updated_At: true,\r\n          itemId: true,\r\n        },\r\n      });\r\n\r\n      const binItemsCount = await prismaClient.bin.count();\r\n      const totalPages = shouldPaginate\r\n        ? Math.ceil(binItemsCount / (limit ?? 10))\r\n        : 1;\r\n\r\n      return {\r\n        data: {\r\n          items: binItems,\r\n          totalItems: binItemsCount,\r\n          totalPages: totalPages,\r\n          currentPage: shouldPaginate ? page ?? 1 : 1,\r\n          status: 200,\r\n        },\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        data: {\r\n          message: `${MessagesError.GetAllMessageError} ${err}`,\r\n          status: 500,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport { BinGetAllItemsService };\r\n","import { Request, Response } from \"express\";\r\n\r\nimport { BinGetAllItemsService } from \"../../services/Bin/binGetAllItemsService\";\r\n\r\nclass BinGetAllItemsController {\r\n  async handle(req: Request, res: Response) {\r\n    const { tableName, idUserOwner, page, limit } = req.body;\r\n\r\n    const binGetAllItemsService = new BinGetAllItemsService();\r\n\r\n    const responseBinGetAllItemsService = await binGetAllItemsService.execute({\r\n      idUserOwner: idUserOwner,\r\n      tableName: tableName,\r\n      page: Number(page),\r\n      limit: Number(limit),\r\n    });\r\n\r\n    return res\r\n      .status(responseBinGetAllItemsService.data.status)\r\n      .json(responseBinGetAllItemsService.data);\r\n  }\r\n}\r\n\r\nexport { BinGetAllItemsController };\r\n","import prismaClient from \"../../prisma\";\r\n\r\ninterface IBinRestoreItemsService {\r\n    id?: string | null;\r\n\r\n}\r\n\r\nclass BinRestoreItemsService {\r\n    async execute({id}: IBinRestoreItemsService){\r\n        if(!id){\r\n            return {\r\n                message: \"Informe o ID do item na lixeira\",\r\n                status: 400\r\n            }\r\n        }  \r\n\r\n        const itemBinExists = await prismaClient.bin.findUnique({\r\n            where: {\r\n                id: id,\r\n            }\r\n        })\r\n    \r\n        if(!itemBinExists){\r\n            return {\r\n                message: \"Não foi possível prosseguir com a ação, item não encontrado na lixeira\",\r\n                status: 404\r\n            }\r\n        } \r\n\r\n        try {\r\n             await prismaClient.$executeRawUnsafe(`\r\n                INSERT INTO ${itemBinExists.tableName}(${Object.keys(itemBinExists.data).join(\", \")})\r\n                VALUES (${Object.values(itemBinExists.data).map((value) => `'${value}`).join(\", \")})\r\n                `)\r\n\r\n                await prismaClient.bin.delete({\r\n                    where: { id }\r\n                });\r\n\r\n                return {\r\n                    data: {\r\n                        message: \"Item restaurado com sucesso\",\r\n                        status: 200\r\n                    }\r\n                  \r\n                };\r\n        }\r\n        catch(err){\r\n            return {\r\n                message: `Ocorreu um erro na restauração do item: ${err}`,\r\n                status: 500\r\n            }\r\n\r\n        }\r\n    }   \r\n}\r\n\r\nexport {BinRestoreItemsService}","import {Request, Response} from 'express'\r\nimport { BinRestoreItemsService } from '../../services/Bin/binRestoreItemsService'\r\n\r\n\r\n\r\nclass BinRestoreItemsController {\r\n    async handle(req: Request, res: Response){\r\n        const {\r\n            id,\r\n        } = req.params\r\n\r\n        const binRegisterMoveItems = new BinRestoreItemsService()\r\n\r\n        const responseBinRegisterMoveItems = await binRegisterMoveItems.execute({\r\n            id: id,\r\n        })\r\n\r\n        return res.status(responseBinRegisterMoveItems.data.status).json(responseBinRegisterMoveItems.data)\r\n \r\n    }\r\n}\r\n\r\nexport {BinRestoreItemsController}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","names":["import_express","today","import_date_fns","import_bcryptjs","import_jsonwebtoken","uuid","resolve","cloudinary","import_cloudinary","resolve","cloudinary","import_cloudinary","cloudinary","resolve","import_multer","multer","crypto","import_bcryptjs","import_cloudinary","resolve","cloudinary","import_jsonwebtoken","nodemailer","import_path","jsonwebtoken","path","fs","import_jsonwebtoken","import_bcryptjs","jsonwebtoken","import_bcryptjs","import_cloudinary","import_uuid","uuid","resolve","cloudinary","multer","import_path","import_cloudinary","express","cloudinary","cors","fileUpload","path"]}