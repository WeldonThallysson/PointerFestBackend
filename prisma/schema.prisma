// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String  @id @default(uuid())
  idPlan          String?
  idProfileAvatar String?
  name            String
  email           String
  password        String
  cpfCnpj         String
  typePerson      String  @default("PF") // Pode ser "PF" ou "PJ"
  birthDate       String
  phone           String
  gender          String

  complement     String?
  street         String?
  city           String?
  cep            String?
  region_code    String?
  number_address String?
  neighborhood   String?

  typeAccess       String  @default("client")
  profileAvatar    String?
  profileSocialUrl String?

  tutorialFirstAccess Boolean @default(true)

  registeredBy           String?
  typeAccessRegisteredBy String?
  cpfRegisteredBy        String?
  dateRegisteredBy       String?

  editedBy           String?
  typeAccessEditedBy String?
  cpfEditedBy        String?
  dateEditedBy       String?

  termsUsePlatform   Boolean?
  termsUseLGPD       Boolean?
  termsReceiptNews   Boolean?
  termsPrivacyPolicy Boolean?

  status Boolean @default(true)

  created_At   DateTime  @default(now())
  updated_At   DateTime?
  // Relacionamento com planos cadastrados
  plansCreated Plan[]    @relation("idUserOwnerPlan")

  // Relacionamento com planos adquiridos
  planSubscription Plan? @relation(fields: [idPlan], references: [id])

  products      Products[]
  typesProducts TypesProducts[]
  purchases     Purchases[]
  events        Events[]
  categories    Categories[]

  commercials     Commercials[]
  typeCommercials TypesCommercials[]

  methodsPayments MethodsPayments[]

  ownedCoupons Coupon[] @relation("UserOwner")
  promoted     Coupon[] @relation("UserPromoter")

  couponUsage CouponUsage[]

  @@map("users")
}

model Plan {
  id              String  @id @default(uuid())
  idUserOwnerPlan String
  creditsPlan     Int
  name            String
  description     String?
  price           Float
  duration        Int
  maxEvents       Int?
  maxChars        Int?

  status     Boolean     @default(true)
  created_At DateTime    @default(now())
  updated_At DateTime?
  // Quem cadastrou o plano (o dono)
  pwner      Users       @relation("idUserOwnerPlan", fields: [idUserOwnerPlan], references: [id])
  purchases  Purchases[]

  // Quem já adquiriu o plano (usuários assinantes)
  usersWhoSubscribed Users[]
  coupon             Coupon[]

  @@map("plans")
}

model Categories {
  id          String @id @default(uuid())
  idUserOwner String

  name          String
  label         String?
  idIcon        String?
  icon          String?
  themeImageUrl String

  created_At DateTime  @default(now())
  updated_At DateTime?
  events     Events[]
  userOwner  Users     @relation(fields: [idUserOwner], references: [id])

  @@map("categories")
}

model Commercials {
  id                       String  @id @default(uuid())
  idUserOwner              String
  idTypeCommercial         String
  name                     String
  description              String?
  urlImageCommercial       String
  urlSocialMediaCommercial String?
  positionOrder            Int?

  status           Boolean?         @default(true)
  created_At       DateTime?        @default(now())
  updated_At       DateTime?
  Users            Users            @relation(fields: [idUserOwner], references: [id])
  TypesCommercials TypesCommercials @relation(fields: [idTypeCommercial], references: [id])

  @@map("Commercials")
}

model TypesCommercials {
  id          String @id @default(uuid())
  idUserOwner String
  name        String
  value       String // aqui no value vou colocar o valor da posição left, right, down ou top posição que é onde vai ficar sempre os comerciais. 

  status      Boolean?      @default(true)
  created_At  DateTime?     @default(now())
  updated_At  DateTime?
  Users       Users         @relation(fields: [idUserOwner], references: [id])
  Commercials Commercials[]

  @@map("typesCommercials")
}

model Products {
  id            String @id @default(uuid())
  idCategory    String
  idTypeProduct String
  idUserOwner   String

  name        String
  description String

  labelPrice String // é a label que pode ir ao lado do preço se é a entrada,inteira,meia,promoção.
  price      Float

  expirationDate String
  dateRegistered String

  positionOrder Int?

  available      Boolean  @default(true)
  allowAddCoupon Boolean? @default(false)

  status     Boolean?  @default(true)
  created_At DateTime? @default(now())
  updated_At DateTime?

  events        Events[]
  purchases     Purchases[]
  Coupon        Coupon[]
  userOwner     Users?        @relation(fields: [idUserOwner], references: [id])
  typesProducts TypesProducts @relation(fields: [idTypeProduct], references: [id])

  @@map("products")
}

model TypesProducts {
  id          String @id @default(uuid())
  idUserOwner String
  name        String
  value       String // aqui no value vou colocar o valor da posição principal, subprincipal, letreiro e outros. 

  status     Boolean?  @default(true)
  created_At DateTime? @default(now())
  updated_At DateTime?

  Users    Users      @relation(fields: [idUserOwner], references: [id])
  products Products[]

  @@map("typesProducts")
}

model Events {
  id          String @id @default(uuid())
  idUserOwner String
  idProduct   String
  idCategory  String

  name          String
  description   String
  localityEvent String

  urlLocalityEvent     String
  urlPostSocialNetwork String? // link do post na rede social mais forte do evento

  bannerImageUrl       String
  dateEvent            String
  hourEvent            String
  placesPurchaseTicket Json? //locais para comprar ingressos
  restrictionsEvent    Json? // restrições do evento
  phoneForContact      String? // global
  status               Boolean @default(true)

  products   Products   @relation(fields: [idProduct], references: [id])
  categories Categories @relation(fields: [idCategory], references: [id])
  userOwner  Users      @relation(fields: [idUserOwner], references: [id])

  created_At DateTime  @default(now())
  updated_At DateTime?

  @@map("events")
}

model Coupon {
  id                 String   @id @default(uuid())
  idUserOwner        String?
  idPromoter         String?
  idProduct          String?
  idPlan             String?
  codeCoupon         String
  cpfForUseUnique    String?
  priceDiscount      Float?
  isPercentage       Boolean? @default(false)
  commissionPromoter Float?
  limitUseMax        Int?
  limitCouponUsed    Int?
  status             Boolean  @default(true)
  expirationCoupon   String?

  plan    Plan?     @relation(fields: [idPlan], references: [id])
  product Products? @relation(fields: [idProduct], references: [id])

  user     Users? @relation("UserOwner", fields: [idUserOwner], references: [id], onDelete: Cascade)
  promoter Users? @relation("UserPromoter", fields: [idPromoter], references: [id], onDelete: Cascade)

  created_At DateTime  @default(now())
  updated_At DateTime?

  couponUsage CouponUsage[]

  @@map("coupon")
}

model CouponUsage {
  id                             String   @id @default(uuid())
  idUserOwner                    String
  idCouponUsed                   String
  dateLastPaymentComissionCoupon String?
  statusComissionPaid            Boolean? @default(false)

  coupon Coupon @relation(fields: [idCouponUsed], references: [id])
  user   Users  @relation(fields: [idUserOwner], references: [id])

  created_At DateTime  @default(now())
  updated_At DateTime?

  @@map("couponusage")
}

model MethodsPayments {
  id                String      @id @default(uuid())
  idUserOwner       String
  name              String
  description       String
  typeMethodPayment String
  created_At        DateTime    @default(now())
  updated_At        DateTime?
  purchases         Purchases[]
  Users             Users       @relation(fields: [idUserOwner], references: [id])
  status            Boolean     @default(true)

  @@map("methodspayments")
}

model Purchases {
  id                   String  @id @default(uuid())
  idUser               String
  idMethodPayment      String
  idProduct            String?
  idPlan               String?
  datePayment          String
  codePayment          String
  codeReferencePayment String
  totalPrice           Float
  products             Json
  status               Boolean @default(true)

  created_At DateTime  @default(now())
  updated_At DateTime?

  user            Users           @relation(fields: [idUser], references: [id])
  methodsPayments MethodsPayments @relation(fields: [idMethodPayment], references: [id])
  product         Products?       @relation(fields: [idProduct], references: [id])
  plan            Plan?           @relation(fields: [idPlan], references: [id])

  @@map("purchases")
}

model Bin {
  id         String    @id @default(uuid())
  idUserOwner String?
  tableName  String
  itemId     String
  data       Json
  created_At DateTime  @default(now())
  updated_At DateTime?

  @@map("bin")
}
